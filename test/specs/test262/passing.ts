import { parseScript, parseModule } from '../../../src/cherow';
import * as chai from 'chai';

const expect = chai.expect;

describe('TC262 - passing', () => {

    it('should parse "var _፩፪፫፬፭፮፯፰፱;"', () => {
        expect(parseScript('var _፩፪፫፬፭፮፯፰፱;', {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "start": 0,
            "end": 15,
            "body": [
              {
                "type": "VariableDeclaration",
                "start": 0,
                "end": 15,
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "start": 4,
                    "end": 14,
                    "id": {
                      "type": "Identifier",
                      "start": 4,
                      "end": 14,
                      "name": "_፩፪፫፬፭፮፯፰፱"
                    },
                    "init": null
                  }
                ],
                "kind": "var"
              }
            ],
            "sourceType": "script"
          });
    });

    it('should parse "do continue; while (true);"', () => {
        expect(parseScript('do continue; while (true);', {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "start": 0,
            "end": 26,
            "body": [
              {
                "type": "DoWhileStatement",
                "start": 0,
                "end": 26,
                "body": {
                  "type": "ContinueStatement",
                  "start": 3,
                  "end": 12,
                  "label": null
                },
                "test": {
                  "type": "Literal",
                  "start": 20,
                  "end": 24,
                  "value": true,
                  "raw": "true"
                }
              }
            ],
            "sourceType": "script"
          });
    });

    it('should parse "var ABC;"', () => {
        expect(parseScript('var ABC;', {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "start": 0,
            "end": 8,
            "body": [
              {
                "type": "VariableDeclaration",
                "start": 0,
                "end": 8,
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "start": 4,
                    "end": 7,
                    "id": {
                      "type": "Identifier",
                      "start": 4,
                      "end": 7,
                      "name": "ABC"
                    },
                    "init": null
                  }
                ],
                "kind": "var"
              }
            ],
            "sourceType": "script"
          });
    });

    it('should parse "function a({b, c}) {}"', () => {
        expect(parseScript('function a({b, c}) {}', {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "start": 0,
            "end": 21,
            "body": [
              {
                "type": "FunctionDeclaration",
                "start": 0,
                "end": 21,
                "id": {
                  "type": "Identifier",
                  "start": 9,
                  "end": 10,
                  "name": "a"
                },
                "generator": false,
                "expression": false,
                "async": false,
                "params": [
                  {
                    "type": "ObjectPattern",
                    "start": 11,
                    "end": 17,
                    "properties": [
                      {
                        "type": "Property",
                        "start": 12,
                        "end": 13,
                        "method": false,
                        "shorthand": true,
                        "computed": false,
                        "key": {
                          "type": "Identifier",
                          "start": 12,
                          "end": 13,
                          "name": "b"
                        },
                        "kind": "init",
                        "value": {
                          "type": "Identifier",
                          "start": 12,
                          "end": 13,
                          "name": "b"
                        }
                      },
                      {
                        "type": "Property",
                        "start": 15,
                        "end": 16,
                        "method": false,
                        "shorthand": true,
                        "computed": false,
                        "key": {
                          "type": "Identifier",
                          "start": 15,
                          "end": 16,
                          "name": "c"
                        },
                        "kind": "init",
                        "value": {
                          "type": "Identifier",
                          "start": 15,
                          "end": 16,
                          "name": "c"
                        }
                      }
                    ]
                  }
                ],
                "body": {
                  "type": "BlockStatement",
                  "start": 19,
                  "end": 21,
                  "body": []
                }
              }
            ],
            "sourceType": "script"
          });
    });

    it('should parse "class a { set b (c) {} get b() {} };"', () => {
        expect(parseScript('class a { set b (c) {} get b() {} };', {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "start": 0,
            "end": 36,
            "body": [
              {
                "type": "ClassDeclaration",
                "start": 0,
                "end": 35,
                "id": {
                  "type": "Identifier",
                  "start": 6,
                  "end": 7,
                  "name": "a"
                },
                "superClass": null,
                "body": {
                  "type": "ClassBody",
                  "start": 8,
                  "end": 35,
                  "body": [
                    {
                      "type": "MethodDefinition",
                      "start": 10,
                      "end": 22,
                      "computed": false,
                      "key": {
                        "type": "Identifier",
                        "start": 14,
                        "end": 15,
                        "name": "b"
                      },
                      "static": false,
                      "kind": "set",
                      "value": {
                        "type": "FunctionExpression",
                        "start": 16,
                        "end": 22,
                        "id": null,
                        "generator": false,
                        "expression": false,
                        "async": false,
                        "params": [
                          {
                            "type": "Identifier",
                            "start": 17,
                            "end": 18,
                            "name": "c"
                          }
                        ],
                        "body": {
                          "type": "BlockStatement",
                          "start": 20,
                          "end": 22,
                          "body": []
                        }
                      }
                    },
                    {
                      "type": "MethodDefinition",
                      "start": 23,
                      "end": 33,
                      "computed": false,
                      "key": {
                        "type": "Identifier",
                        "start": 27,
                        "end": 28,
                        "name": "b"
                      },
                      "static": false,
                      "kind": "get",
                      "value": {
                        "type": "FunctionExpression",
                        "start": 28,
                        "end": 33,
                        "id": null,
                        "generator": false,
                        "expression": false,
                        "async": false,
                        "params": [],
                        "body": {
                          "type": "BlockStatement",
                          "start": 31,
                          "end": 33,
                          "body": []
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "EmptyStatement",
                "start": 35,
                "end": 36
              }
            ],
            "sourceType": "script"
          });
    });

    it('should parse complex #1', () => {
        expect(parseScript(`((1), a)();
        ((2), (b.a))();`, {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "start": 0,
            "end": 35,
            "body": [
              {
                "type": "ExpressionStatement",
                "start": 0,
                "end": 11,
                "expression": {
                  "type": "CallExpression",
                  "start": 0,
                  "end": 10,
                  "callee": {
                    "type": "SequenceExpression",
                    "start": 1,
                    "end": 7,
                    "expressions": [
                      {
                        "type": "Literal",
                        "start": 2,
                        "end": 3,
                        "value": 1,
                        "raw": "1"
                      },
                      {
                        "type": "Identifier",
                        "start": 6,
                        "end": 7,
                        "name": "a"
                      }
                    ]
                  },
                  "arguments": []
                }
              },
              {
                "type": "ExpressionStatement",
                "start": 20,
                "end": 35,
                "expression": {
                  "type": "CallExpression",
                  "start": 20,
                  "end": 34,
                  "callee": {
                    "type": "SequenceExpression",
                    "start": 21,
                    "end": 31,
                    "expressions": [
                      {
                        "type": "Literal",
                        "start": 22,
                        "end": 23,
                        "value": 2,
                        "raw": "2"
                      },
                      {
                        "type": "MemberExpression",
                        "start": 27,
                        "end": 30,
                        "object": {
                          "type": "Identifier",
                          "start": 27,
                          "end": 28,
                          "name": "b"
                        },
                        "property": {
                          "type": "Identifier",
                          "start": 29,
                          "end": 30,
                          "name": "a"
                        },
                        "computed": false
                      }
                    ]
                  },
                  "arguments": []
                }
              }
            ],
            "sourceType": "script"
          });
    });

    it('should parse "a => b;"', () => {
        expect(parseScript('a => b;', {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "start": 0,
            "end": 7,
            "body": [
              {
                "type": "ExpressionStatement",
                "start": 0,
                "end": 7,
                "expression": {
                  "type": "ArrowFunctionExpression",
                  "start": 0,
                  "end": 6,
                  "id": null,
                  "generator": false,
                  "expression": true,
                  "async": false,
                  "params": [
                    {
                      "type": "Identifier",
                      "start": 0,
                      "end": 1,
                      "name": "a"
                    }
                  ],
                  "body": {
                    "type": "Identifier",
                    "start": 5,
                    "end": 6,
                    "name": "b"
                  }
                }
              }
            ],
            "sourceType": "script"
          });
    });


    it('should parse "((1), (a.a))();"', () => {
        expect(parseScript('((1), (a.a))();', {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "start": 0,
            "end": 15,
            "body": [
              {
                "type": "ExpressionStatement",
                "start": 0,
                "end": 15,
                "expression": {
                  "type": "CallExpression",
                  "start": 0,
                  "end": 14,
                  "callee": {
                    "type": "SequenceExpression",
                    "start": 1,
                    "end": 11,
                    "expressions": [
                      {
                        "type": "Literal",
                        "start": 2,
                        "end": 3,
                        "value": 1,
                        "raw": "1"
                      },
                      {
                        "type": "MemberExpression",
                        "start": 7,
                        "end": 10,
                        "object": {
                          "type": "Identifier",
                          "start": 7,
                          "end": 8,
                          "name": "a"
                        },
                        "property": {
                          "type": "Identifier",
                          "start": 9,
                          "end": 10,
                          "name": "a"
                        },
                        "computed": false
                      }
                    ]
                  },
                  "arguments": []
                }
              }
            ],
            "sourceType": "script"
          });
    });

    it('should parse "var {a, b} = ({a: 1, b: 2});"', () => {
        expect(parseScript('var {a, b} = ({a: 1, b: 2});', {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "start": 0,
            "end": 28,
            "body": [
              {
                "type": "VariableDeclaration",
                "start": 0,
                "end": 28,
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "start": 4,
                    "end": 27,
                    "id": {
                      "type": "ObjectPattern",
                      "start": 4,
                      "end": 10,
                      "properties": [
                        {
                          "type": "Property",
                          "start": 5,
                          "end": 6,
                          "method": false,
                          "shorthand": true,
                          "computed": false,
                          "key": {
                            "type": "Identifier",
                            "start": 5,
                            "end": 6,
                            "name": "a"
                          },
                          "kind": "init",
                          "value": {
                            "type": "Identifier",
                            "start": 5,
                            "end": 6,
                            "name": "a"
                          }
                        },
                        {
                          "type": "Property",
                          "start": 8,
                          "end": 9,
                          "method": false,
                          "shorthand": true,
                          "computed": false,
                          "key": {
                            "type": "Identifier",
                            "start": 8,
                            "end": 9,
                            "name": "b"
                          },
                          "kind": "init",
                          "value": {
                            "type": "Identifier",
                            "start": 8,
                            "end": 9,
                            "name": "b"
                          }
                        }
                      ]
                    },
                    "init": {
                      "type": "ObjectExpression",
                      "start": 14,
                      "end": 26,
                      "properties": [
                        {
                          "type": "Property",
                          "start": 15,
                          "end": 19,
                          "method": false,
                          "shorthand": false,
                          "computed": false,
                          "key": {
                            "type": "Identifier",
                            "start": 15,
                            "end": 16,
                            "name": "a"
                          },
                          "value": {
                            "type": "Literal",
                            "start": 18,
                            "end": 19,
                            "value": 1,
                            "raw": "1"
                          },
                          "kind": "init"
                        },
                        {
                          "type": "Property",
                          "start": 21,
                          "end": 25,
                          "method": false,
                          "shorthand": false,
                          "computed": false,
                          "key": {
                            "type": "Identifier",
                            "start": 21,
                            "end": 22,
                            "name": "b"
                          },
                          "value": {
                            "type": "Literal",
                            "start": 24,
                            "end": 25,
                            "value": 2,
                            "raw": "2"
                          },
                          "kind": "init"
                        }
                      ]
                    }
                  }
                ],
                "kind": "var"
              }
            ],
            "sourceType": "script"
          });
    });

    it('should parse complex 2', () => {
        expect(parseScript(`((function () {
            return 1;
            var a = (2);
          })());`, {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "start": 0,
            "end": 79,
            "body": [
              {
                "type": "ExpressionStatement",
                "start": 0,
                "end": 79,
                "expression": {
                  "type": "CallExpression",
                  "start": 1,
                  "end": 77,
                  "callee": {
                    "type": "FunctionExpression",
                    "start": 2,
                    "end": 74,
                    "id": null,
                    "generator": false,
                    "expression": false,
                    "async": false,
                    "params": [],
                    "body": {
                      "type": "BlockStatement",
                      "start": 14,
                      "end": 74,
                      "body": [
                        {
                          "type": "ReturnStatement",
                          "start": 28,
                          "end": 37,
                          "argument": {
                            "type": "Literal",
                            "start": 35,
                            "end": 36,
                            "value": 1,
                            "raw": "1"
                          }
                        },
                        {
                          "type": "VariableDeclaration",
                          "start": 50,
                          "end": 62,
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "start": 54,
                              "end": 61,
                              "id": {
                                "type": "Identifier",
                                "start": 54,
                                "end": 55,
                                "name": "a"
                              },
                              "init": {
                                "type": "Literal",
                                "start": 59,
                                "end": 60,
                                "value": 2,
                                "raw": "2"
                              }
                            }
                          ],
                          "kind": "var"
                        }
                      ]
                    }
                  },
                  "arguments": []
                }
              }
            ],
            "sourceType": "script"
          });
    });

    it('should parse complex 3', () => {
        expect(parseScript(`function a() {
            return ({}) / (1);
          }`, {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "start": 0,
            "end": 57,
            "body": [
              {
                "type": "FunctionDeclaration",
                "start": 0,
                "end": 57,
                "id": {
                  "type": "Identifier",
                  "start": 9,
                  "end": 10,
                  "name": "a"
                },
                "generator": false,
                "expression": false,
                "async": false,
                "params": [],
                "body": {
                  "type": "BlockStatement",
                  "start": 13,
                  "end": 57,
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "start": 27,
                      "end": 45,
                      "argument": {
                        "type": "BinaryExpression",
                        "start": 34,
                        "end": 44,
                        "left": {
                          "type": "ObjectExpression",
                          "start": 35,
                          "end": 37,
                          "properties": []
                        },
                        "operator": "/",
                        "right": {
                          "type": "Literal",
                          "start": 42,
                          "end": 43,
                          "value": 1,
                          "raw": "1"
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "sourceType": "script"
          });
    });

    it('should parse "a <<= (1);"', () => {
        expect(parseScript('a <<= (1);', {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "start": 0,
            "end": 10,
            "body": [
              {
                "type": "ExpressionStatement",
                "start": 0,
                "end": 10,
                "expression": {
                  "type": "AssignmentExpression",
                  "start": 0,
                  "end": 9,
                  "operator": "<<=",
                  "left": {
                    "type": "Identifier",
                    "start": 0,
                    "end": 1,
                    "name": "a"
                  },
                  "right": {
                    "type": "Literal",
                    "start": 7,
                    "end": 8,
                    "value": 1,
                    "raw": "1"
                  }
                }
              }
            ],
            "sourceType": "script"
          });
    });

    it('should parse "({*a() {}});"', () => {
        expect(parseScript('({*a() {}});', {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "start": 0,
            "end": 12,
            "body": [
              {
                "type": "ExpressionStatement",
                "start": 0,
                "end": 12,
                "expression": {
                  "type": "ObjectExpression",
                  "start": 1,
                  "end": 10,
                  "properties": [
                    {
                      "type": "Property",
                      "start": 2,
                      "end": 9,
                      "method": true,
                      "shorthand": false,
                      "computed": false,
                      "key": {
                        "type": "Identifier",
                        "start": 3,
                        "end": 4,
                        "name": "a"
                      },
                      "kind": "init",
                      "value": {
                        "type": "FunctionExpression",
                        "start": 4,
                        "end": 9,
                        "id": null,
                        "generator": true,
                        "expression": false,
                        "async": false,
                        "params": [],
                        "body": {
                          "type": "BlockStatement",
                          "start": 7,
                          "end": 9,
                          "body": []
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "sourceType": "script"
          });
    });

    it('should parse "for (a[b in c] in d) ;"', () => {
        expect(parseScript('for (a[b in c] in d) ;', {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "start": 0,
            "end": 22,
            "body": [
              {
                "type": "ForInStatement",
                "start": 0,
                "end": 22,
                "left": {
                  "type": "MemberExpression",
                  "start": 5,
                  "end": 14,
                  "object": {
                    "type": "Identifier",
                    "start": 5,
                    "end": 6,
                    "name": "a"
                  },
                  "property": {
                    "type": "BinaryExpression",
                    "start": 7,
                    "end": 13,
                    "left": {
                      "type": "Identifier",
                      "start": 7,
                      "end": 8,
                      "name": "b"
                    },
                    "operator": "in",
                    "right": {
                      "type": "Identifier",
                      "start": 12,
                      "end": 13,
                      "name": "c"
                    }
                  },
                  "computed": true
                },
                "right": {
                  "type": "Identifier",
                  "start": 18,
                  "end": 19,
                  "name": "d"
                },
                "body": {
                  "type": "EmptyStatement",
                  "start": 21,
                  "end": 22
                }
              }
            ],
            "sourceType": "script"
          });
    });

    it('should parse "0;"', () => {
        expect(parseScript('0;', {
            ranges: false,
            raw: true
        })).to.eql({
            "type": "Program",
            "body": [
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "Literal",
                  "value": 0,
                  "raw": "0"
                }
              }
            ],
            "sourceType": "script"
          });
    });

    it('should parse "void (/test/);"', () => {
        expect(parseScript('void (/test/);', {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "start": 0,
            "end": 14,
            "body": [
              {
                "type": "ExpressionStatement",
                "start": 0,
                "end": 14,
                "expression": {
                  "type": "UnaryExpression",
                  "start": 0,
                  "end": 13,
                  "operator": "void",
                  "prefix": true,
                  "argument": {
                    "type": "Literal",
                    "start": 6,
                    "end": 12,
                    "value": /test/,
                    "raw": "/test/",
                    "regex": {
                      "pattern": "test",
                      "flags": ""
                    }
                  }
                }
              }
            ],
            "sourceType": "script"
          });
    });

    it('should parse "a = ({__proto__: 1});"', () => {
        expect(parseScript('a = ({__proto__: 1});', {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "start": 0,
            "end": 21,
            "body": [
              {
                "type": "ExpressionStatement",
                "start": 0,
                "end": 21,
                "expression": {
                  "type": "AssignmentExpression",
                  "start": 0,
                  "end": 20,
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "start": 0,
                    "end": 1,
                    "name": "a"
                  },
                  "right": {
                    "type": "ObjectExpression",
                    "start": 5,
                    "end": 19,
                    "properties": [
                      {
                        "type": "Property",
                        "start": 6,
                        "end": 18,
                        "method": false,
                        "shorthand": false,
                        "computed": false,
                        "key": {
                          "type": "Identifier",
                          "start": 6,
                          "end": 15,
                          "name": "__proto__"
                        },
                        "value": {
                          "type": "Literal",
                          "start": 17,
                          "end": 18,
                          "value": 1,
                          "raw": "1"
                        },
                        "kind": "init"
                      }
                    ]
                  }
                }
              }
            ],
            "sourceType": "script"
          });
    });

    it('should parse "{ let a = (1), b = (2), c = (3); }"', () => {
        expect(parseScript('{ let a = (1), b = (2), c = (3); }', {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "start": 0,
            "end": 34,
            "body": [
              {
                "type": "BlockStatement",
                "start": 0,
                "end": 34,
                "body": [
                  {
                    "type": "VariableDeclaration",
                    "start": 2,
                    "end": 32,
                    "declarations": [
                      {
                        "type": "VariableDeclarator",
                        "start": 6,
                        "end": 13,
                        "id": {
                          "type": "Identifier",
                          "start": 6,
                          "end": 7,
                          "name": "a"
                        },
                        "init": {
                          "type": "Literal",
                          "start": 11,
                          "end": 12,
                          "value": 1,
                          "raw": "1"
                        }
                      },
                      {
                        "type": "VariableDeclarator",
                        "start": 15,
                        "end": 22,
                        "id": {
                          "type": "Identifier",
                          "start": 15,
                          "end": 16,
                          "name": "b"
                        },
                        "init": {
                          "type": "Literal",
                          "start": 20,
                          "end": 21,
                          "value": 2,
                          "raw": "2"
                        }
                      },
                      {
                        "type": "VariableDeclarator",
                        "start": 24,
                        "end": 31,
                        "id": {
                          "type": "Identifier",
                          "start": 24,
                          "end": 25,
                          "name": "c"
                        },
                        "init": {
                          "type": "Literal",
                          "start": 29,
                          "end": 30,
                          "value": 3,
                          "raw": "3"
                        }
                      }
                    ],
                    "kind": "let"
                  }
                ]
              }
            ],
            "sourceType": "script"
          });
    });

    it('should parse "[a, b] = ([b, a]);"', () => {
        expect(parseScript('[a, b] = ([b, a]);', {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "start": 0,
            "end": 18,
            "body": [
              {
                "type": "ExpressionStatement",
                "start": 0,
                "end": 18,
                "expression": {
                  "type": "AssignmentExpression",
                  "start": 0,
                  "end": 17,
                  "operator": "=",
                  "left": {
                    "type": "ArrayPattern",
                    "start": 0,
                    "end": 6,
                    "elements": [
                      {
                        "type": "Identifier",
                        "start": 1,
                        "end": 2,
                        "name": "a"
                      },
                      {
                        "type": "Identifier",
                        "start": 4,
                        "end": 5,
                        "name": "b"
                      }
                    ]
                  },
                  "right": {
                    "type": "ArrayExpression",
                    "start": 10,
                    "end": 16,
                    "elements": [
                      {
                        "type": "Identifier",
                        "start": 11,
                        "end": 12,
                        "name": "b"
                      },
                      {
                        "type": "Identifier",
                        "start": 14,
                        "end": 15,
                        "name": "a"
                      }
                    ]
                  }
                }
              }
            ],
            "sourceType": "script"
          });
    });

    it('should parse "for (var [a, b] in c) ;"', () => {
        expect(parseScript('for (var [a, b] in c) ;', {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "start": 0,
            "end": 23,
            "body": [
              {
                "type": "ForInStatement",
                "start": 0,
                "end": 23,
                "left": {
                  "type": "VariableDeclaration",
                  "start": 5,
                  "end": 15,
                  "declarations": [
                    {
                      "type": "VariableDeclarator",
                      "start": 9,
                      "end": 15,
                      "id": {
                        "type": "ArrayPattern",
                        "start": 9,
                        "end": 15,
                        "elements": [
                          {
                            "type": "Identifier",
                            "start": 10,
                            "end": 11,
                            "name": "a"
                          },
                          {
                            "type": "Identifier",
                            "start": 13,
                            "end": 14,
                            "name": "b"
                          }
                        ]
                      },
                      "init": null
                    }
                  ],
                  "kind": "var"
                },
                "right": {
                  "type": "Identifier",
                  "start": 19,
                  "end": 20,
                  "name": "c"
                },
                "body": {
                  "type": "EmptyStatement",
                  "start": 22,
                  "end": 23
                }
              }
            ],
            "sourceType": "script"
          });
    });

    it('should parse complex 4"', () => {
        expect(parseScript(`((function () {
            while ((!a) || (!(b()))) {
              c();
            }
          })());`, {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "start": 0,
            "end": 104,
            "body": [
              {
                "type": "ExpressionStatement",
                "start": 0,
                "end": 104,
                "expression": {
                  "type": "CallExpression",
                  "start": 1,
                  "end": 102,
                  "callee": {
                    "type": "FunctionExpression",
                    "start": 2,
                    "end": 99,
                    "id": null,
                    "generator": false,
                    "expression": false,
                    "async": false,
                    "params": [],
                    "body": {
                      "type": "BlockStatement",
                      "start": 14,
                      "end": 99,
                      "body": [
                        {
                          "type": "WhileStatement",
                          "start": 28,
                          "end": 87,
                          "test": {
                            "type": "LogicalExpression",
                            "start": 35,
                            "end": 51,
                            "left": {
                              "type": "UnaryExpression",
                              "start": 36,
                              "end": 38,
                              "operator": "!",
                              "prefix": true,
                              "argument": {
                                "type": "Identifier",
                                "start": 37,
                                "end": 38,
                                "name": "a"
                              }
                            },
                            "operator": "||",
                            "right": {
                              "type": "UnaryExpression",
                              "start": 44,
                              "end": 50,
                              "operator": "!",
                              "prefix": true,
                              "argument": {
                                "type": "CallExpression",
                                "start": 46,
                                "end": 49,
                                "callee": {
                                  "type": "Identifier",
                                  "start": 46,
                                  "end": 47,
                                  "name": "b"
                                },
                                "arguments": []
                              }
                            }
                          },
                          "body": {
                            "type": "BlockStatement",
                            "start": 53,
                            "end": 87,
                            "body": [
                              {
                                "type": "ExpressionStatement",
                                "start": 69,
                                "end": 73,
                                "expression": {
                                  "type": "CallExpression",
                                  "start": 69,
                                  "end": 72,
                                  "callee": {
                                    "type": "Identifier",
                                    "start": 69,
                                    "end": 70,
                                    "name": "c"
                                  },
                                  "arguments": []
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  },
                  "arguments": []
                }
              }
            ],
            "sourceType": "script"
          });
    });

    it('should parse "6.02214179e23;"', () => {
        expect(parseScript('6.02214179e23;', {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "start": 0,
            "end": 14,
            "body": [
              {
                "type": "ExpressionStatement",
                "start": 0,
                "end": 14,
                "expression": {
                  "type": "Literal",
                  "start": 0,
                  "end": 13,
                  "value": 6.02214179e+23,
                  "raw": "6.02214179e23"
                }
              }
            ],
            "sourceType": "script"
          });
    });

    it('should parse "var a = ("very cute");"', () => {
        expect(parseScript('var a = ("very cute");', {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "start": 0,
            "end": 22,
            "body": [
              {
                "type": "VariableDeclaration",
                "start": 0,
                "end": 22,
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "start": 4,
                    "end": 21,
                    "id": {
                      "type": "Identifier",
                      "start": 4,
                      "end": 5,
                      "name": "a"
                    },
                    "init": {
                      "type": "Literal",
                      "start": 9,
                      "end": 20,
                      "value": "very cute",
                      "raw": "\"very cute\""
                    }
                  }
                ],
                "kind": "var"
              }
            ],
            "sourceType": "script"
          });
    });

    it('should parse "a[b] = b;"', () => {
        expect(parseScript('a[b] = b;', {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "start": 0,
            "end": 9,
            "body": [
              {
                "type": "ExpressionStatement",
                "start": 0,
                "end": 9,
                "expression": {
                  "type": "AssignmentExpression",
                  "start": 0,
                  "end": 8,
                  "operator": "=",
                  "left": {
                    "type": "MemberExpression",
                    "start": 0,
                    "end": 4,
                    "object": {
                      "type": "Identifier",
                      "start": 0,
                      "end": 1,
                      "name": "a"
                    },
                    "property": {
                      "type": "Identifier",
                      "start": 2,
                      "end": 3,
                      "name": "b"
                    },
                    "computed": true
                  },
                  "right": {
                    "type": "Identifier",
                    "start": 7,
                    "end": 8,
                    "name": "b"
                  }
                }
              }
            ],
            "sourceType": "script"
          });
    });

    it('should parse complex 5', () => {
        expect(parseScript(`(Infinity.a)();
        (NaN.a)();`, {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "start": 0,
            "end": 34,
            "body": [
              {
                "type": "ExpressionStatement",
                "start": 0,
                "end": 15,
                "expression": {
                  "type": "CallExpression",
                  "start": 0,
                  "end": 14,
                  "callee": {
                    "type": "MemberExpression",
                    "start": 1,
                    "end": 11,
                    "object": {
                      "type": "Identifier",
                      "start": 1,
                      "end": 9,
                      "name": "Infinity"
                    },
                    "property": {
                      "type": "Identifier",
                      "start": 10,
                      "end": 11,
                      "name": "a"
                    },
                    "computed": false
                  },
                  "arguments": []
                }
              },
              {
                "type": "ExpressionStatement",
                "start": 24,
                "end": 34,
                "expression": {
                  "type": "CallExpression",
                  "start": 24,
                  "end": 33,
                  "callee": {
                    "type": "MemberExpression",
                    "start": 25,
                    "end": 30,
                    "object": {
                      "type": "Identifier",
                      "start": 25,
                      "end": 28,
                      "name": "NaN"
                    },
                    "property": {
                      "type": "Identifier",
                      "start": 29,
                      "end": 30,
                      "name": "a"
                    },
                    "computed": false
                  },
                  "arguments": []
                }
              }
            ],
            "sourceType": "script"
          });
    });

    it('should parse "a = ({});"', () => {
        expect(parseScript('a = ({});', {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "start": 0,
            "end": 9,
            "body": [
              {
                "type": "ExpressionStatement",
                "start": 0,
                "end": 9,
                "expression": {
                  "type": "AssignmentExpression",
                  "start": 0,
                  "end": 8,
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "start": 0,
                    "end": 1,
                    "name": "a"
                  },
                  "right": {
                    "type": "ObjectExpression",
                    "start": 5,
                    "end": 7,
                    "properties": []
                  }
                }
              }
            ],
            "sourceType": "script"
          });
    });

    it('should parse "for (var a = (1), b = (2);;) ;"', () => {
        expect(parseScript('for (var a = (1), b = (2);;) ;', {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "start": 0,
            "end": 30,
            "body": [
              {
                "type": "ForStatement",
                "start": 0,
                "end": 30,
                "init": {
                  "type": "VariableDeclaration",
                  "start": 5,
                  "end": 25,
                  "declarations": [
                    {
                      "type": "VariableDeclarator",
                      "start": 9,
                      "end": 16,
                      "id": {
                        "type": "Identifier",
                        "start": 9,
                        "end": 10,
                        "name": "a"
                      },
                      "init": {
                        "type": "Literal",
                        "start": 14,
                        "end": 15,
                        "value": 1,
                        "raw": "1"
                      }
                    },
                    {
                      "type": "VariableDeclarator",
                      "start": 18,
                      "end": 25,
                      "id": {
                        "type": "Identifier",
                        "start": 18,
                        "end": 19,
                        "name": "b"
                      },
                      "init": {
                        "type": "Literal",
                        "start": 23,
                        "end": 24,
                        "value": 2,
                        "raw": "2"
                      }
                    }
                  ],
                  "kind": "var"
                },
                "test": null,
                "update": null,
                "body": {
                  "type": "EmptyStatement",
                  "start": 29,
                  "end": 30
                }
              }
            ],
            "sourceType": "script"
          });
    });

    it('should parse "function x(...[a, b]) {}"', () => {
        expect(parseScript('function x(...[a, b]) {}', {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "body": [
                {
                    "type": "FunctionDeclaration",
                    "params": [
                        {
                            "type": "RestElement",
                            "argument": {
                                "type": "ArrayPattern",
                                "elements": [
                                    {
                                        "type": "Identifier",
                                        "name": "a",
                                        "start": 15,
                                        "end": 16
                                    },
                                    {
                                        "type": "Identifier",
                                        "name": "b",
                                        "start": 18,
                                        "end": 19
                                    }
                                ],
                                "start": 14,
                                "end": 20
                            },
                            "start": 11,
                            "end": 20
                        }
                    ],
                    "body": {
                        "type": "BlockStatement",
                        "body": [],
                        "start": 22,
                        "end": 24
                    },
                    "async": false,
                    "generator": false,
                    "expression": false,
                    "id": {
                        "type": "Identifier",
                        "name": "x",
                        "start": 9,
                        "end": 10
                    },
                    "start": 0,
                    "end": 24
                }
            ],
            "sourceType": "script",
            "start": 0,
            "end": 24
        });
    });

    it('should parse "for (let a in [1, 2]) 3;"', () => {
        expect(parseScript('for (let a in [1, 2]) 3;', {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "start": 0,
            "end": 24,
            "body": [
              {
                "type": "ForInStatement",
                "start": 0,
                "end": 24,
                "left": {
                  "type": "VariableDeclaration",
                  "start": 5,
                  "end": 10,
                  "declarations": [
                    {
                      "type": "VariableDeclarator",
                      "start": 9,
                      "end": 10,
                      "id": {
                        "type": "Identifier",
                        "start": 9,
                        "end": 10,
                        "name": "a"
                      },
                      "init": null
                    }
                  ],
                  "kind": "let"
                },
                "right": {
                  "type": "ArrayExpression",
                  "start": 14,
                  "end": 20,
                  "elements": [
                    {
                      "type": "Literal",
                      "start": 15,
                      "end": 16,
                      "value": 1,
                      "raw": "1"
                    },
                    {
                      "type": "Literal",
                      "start": 18,
                      "end": 19,
                      "value": 2,
                      "raw": "2"
                    }
                  ]
                },
                "body": {
                  "type": "ExpressionStatement",
                  "start": 22,
                  "end": 24,
                  "expression": {
                    "type": "Literal",
                    "start": 22,
                    "end": 23,
                    "value": 3,
                    "raw": "3"
                  }
                }
              }
            ],
            "sourceType": "script"
          });
    });

    it('should parse "for (let a = (1), b = (2);;) ;"', () => {
        expect(parseScript('for (let a = (1), b = (2);;) ;', {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "start": 0,
            "end": 30,
            "body": [
              {
                "type": "ForStatement",
                "start": 0,
                "end": 30,
                "init": {
                  "type": "VariableDeclaration",
                  "start": 5,
                  "end": 25,
                  "declarations": [
                    {
                      "type": "VariableDeclarator",
                      "start": 9,
                      "end": 16,
                      "id": {
                        "type": "Identifier",
                        "start": 9,
                        "end": 10,
                        "name": "a"
                      },
                      "init": {
                        "type": "Literal",
                        "start": 14,
                        "end": 15,
                        "value": 1,
                        "raw": "1"
                      }
                    },
                    {
                      "type": "VariableDeclarator",
                      "start": 18,
                      "end": 25,
                      "id": {
                        "type": "Identifier",
                        "start": 18,
                        "end": 19,
                        "name": "b"
                      },
                      "init": {
                        "type": "Literal",
                        "start": 23,
                        "end": 24,
                        "value": 2,
                        "raw": "2"
                      }
                    }
                  ],
                  "kind": "let"
                },
                "test": null,
                "update": null,
                "body": {
                  "type": "EmptyStatement",
                  "start": 29,
                  "end": 30
                }
              }
            ],
            "sourceType": "script"
          });
    });


    it('should parse "({a: b} = (0));"', () => {
        expect(parseScript('({a: b} = (0));', {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "start": 0,
            "end": 15,
            "body": [
              {
                "type": "ExpressionStatement",
                "start": 0,
                "end": 15,
                "expression": {
                  "type": "AssignmentExpression",
                  "start": 1,
                  "end": 13,
                  "operator": "=",
                  "left": {
                    "type": "ObjectPattern",
                    "start": 1,
                    "end": 7,
                    "properties": [
                      {
                        "type": "Property",
                        "start": 2,
                        "end": 6,
                        "method": false,
                        "shorthand": false,
                        "computed": false,
                        "key": {
                          "type": "Identifier",
                          "start": 2,
                          "end": 3,
                          "name": "a"
                        },
                        "value": {
                          "type": "Identifier",
                          "start": 5,
                          "end": 6,
                          "name": "b"
                        },
                        "kind": "init"
                      }
                    ]
                  },
                  "right": {
                    "type": "Literal",
                    "start": 11,
                    "end": 12,
                    "value": 0,
                    "raw": "0"
                  }
                }
              }
            ],
            "sourceType": "script"
          });
    });

    it('should parse complex 6"', () => {
        expect(parseScript(`((function () {
            var a = (1);
            arguments[2] = (3);
            ((function () {
              eval("");
            })());
          })());`, {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "start": 0,
            "end": 160,
            "body": [
              {
                "type": "ExpressionStatement",
                "start": 0,
                "end": 160,
                "expression": {
                  "type": "CallExpression",
                  "start": 1,
                  "end": 158,
                  "callee": {
                    "type": "FunctionExpression",
                    "start": 2,
                    "end": 155,
                    "id": null,
                    "generator": false,
                    "expression": false,
                    "async": false,
                    "params": [],
                    "body": {
                      "type": "BlockStatement",
                      "start": 14,
                      "end": 155,
                      "body": [
                        {
                          "type": "VariableDeclaration",
                          "start": 28,
                          "end": 40,
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "start": 32,
                              "end": 39,
                              "id": {
                                "type": "Identifier",
                                "start": 32,
                                "end": 33,
                                "name": "a"
                              },
                              "init": {
                                "type": "Literal",
                                "start": 37,
                                "end": 38,
                                "value": 1,
                                "raw": "1"
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "ExpressionStatement",
                          "start": 53,
                          "end": 72,
                          "expression": {
                            "type": "AssignmentExpression",
                            "start": 53,
                            "end": 71,
                            "operator": "=",
                            "left": {
                              "type": "MemberExpression",
                              "start": 53,
                              "end": 65,
                              "object": {
                                "type": "Identifier",
                                "start": 53,
                                "end": 62,
                                "name": "arguments"
                              },
                              "property": {
                                "type": "Literal",
                                "start": 63,
                                "end": 64,
                                "value": 2,
                                "raw": "2"
                              },
                              "computed": true
                            },
                            "right": {
                              "type": "Literal",
                              "start": 69,
                              "end": 70,
                              "value": 3,
                              "raw": "3"
                            }
                          }
                        },
                        {
                          "type": "ExpressionStatement",
                          "start": 85,
                          "end": 143,
                          "expression": {
                            "type": "CallExpression",
                            "start": 86,
                            "end": 141,
                            "callee": {
                              "type": "FunctionExpression",
                              "start": 87,
                              "end": 138,
                              "id": null,
                              "generator": false,
                              "expression": false,
                              "async": false,
                              "params": [],
                              "body": {
                                "type": "BlockStatement",
                                "start": 99,
                                "end": 138,
                                "body": [
                                  {
                                    "type": "ExpressionStatement",
                                    "start": 115,
                                    "end": 124,
                                    "expression": {
                                      "type": "CallExpression",
                                      "start": 115,
                                      "end": 123,
                                      "callee": {
                                        "type": "Identifier",
                                        "start": 115,
                                        "end": 119,
                                        "name": "eval"
                                      },
                                      "arguments": [
                                        {
                                          "type": "Literal",
                                          "start": 120,
                                          "end": 122,
                                          "value": "",
                                          "raw": "\"\""
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            },
                            "arguments": []
                          }
                        }
                      ]
                    }
                  },
                  "arguments": []
                }
              }
            ],
            "sourceType": "script"
          });
    });

    it('should parse "delete (/test/);"', () => {
        expect(parseScript('delete (/test/);', {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "start": 0,
            "end": 16,
            "body": [
              {
                "type": "ExpressionStatement",
                "start": 0,
                "end": 16,
                "expression": {
                  "type": "UnaryExpression",
                  "start": 0,
                  "end": 15,
                  "operator": "delete",
                  "prefix": true,
                  "argument": {
                    "type": "Literal",
                    "start": 8,
                    "end": 14,
                    "value": /test/,
                    "raw": "/test/",
                    "regex": {
                      "pattern": "test",
                      "flags": ""
                    }
                  }
                }
              }
            ],
            "sourceType": "script"
          });
    });

    it('should parse "let.let;"', () => {
        expect(parseScript('let.let;', {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "start": 0,
            "end": 8,
            "body": [
              {
                "type": "ExpressionStatement",
                "start": 0,
                "end": 8,
                "expression": {
                  "type": "MemberExpression",
                  "start": 0,
                  "end": 7,
                  "object": {
                    "type": "Identifier",
                    "start": 0,
                    "end": 3,
                    "name": "let"
                  },
                  "property": {
                    "type": "Identifier",
                    "start": 4,
                    "end": 7,
                    "name": "let"
                  },
                  "computed": false
                }
              }
            ],
            "sourceType": "script"
          });
    });

    it('should parse "(function x({a: {w, x}, b: [y, z]}, ...[a, b, c]) {});"', () => {
        expect(parseScript('(function x({a: {w, x}, b: [y, z]}, ...[a, b, c]) {});', {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "body": [
                {
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "FunctionExpression",
                        "params": [
                            {
                                "type": "ObjectPattern",
                                "properties": [
                                    {
                                        "type": "Property",
                                        "kind": "init",
                                        "key": {
                                            "type": "Identifier",
                                            "name": "a",
                                            "start": 13,
                                            "end": 14
                                        },
                                        "computed": false,
                                        "value": {
                                            "type": "ObjectPattern",
                                            "properties": [
                                                {
                                                    "type": "Property",
                                                    "kind": "init",
                                                    "key": {
                                                        "type": "Identifier",
                                                        "name": "w",
                                                        "start": 17,
                                                        "end": 18
                                                    },
                                                    "computed": false,
                                                    "value": {
                                                        "type": "Identifier",
                                                        "name": "w",
                                                        "start": 17,
                                                        "end": 18
                                                    },
                                                    "method": false,
                                                    "shorthand": true,
                                                    "start": 17,
                                                    "end": 18
                                                },
                                                {
                                                    "type": "Property",
                                                    "kind": "init",
                                                    "key": {
                                                        "type": "Identifier",
                                                        "name": "x",
                                                        "start": 20,
                                                        "end": 21
                                                    },
                                                    "computed": false,
                                                    "value": {
                                                        "type": "Identifier",
                                                        "name": "x",
                                                        "start": 20,
                                                        "end": 21
                                                    },
                                                    "method": false,
                                                    "shorthand": true,
                                                    "start": 20,
                                                    "end": 21
                                                }
                                            ],
                                            "start": 16,
                                            "end": 22
                                        },
                                        "method": false,
                                        "shorthand": false,
                                        "start": 13,
                                        "end": 22
                                    },
                                    {
                                        "type": "Property",
                                        "kind": "init",
                                        "key": {
                                            "type": "Identifier",
                                            "name": "b",
                                            "start": 24,
                                            "end": 25
                                        },
                                        "computed": false,
                                        "value": {
                                            "type": "ArrayPattern",
                                            "elements": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "y",
                                                    "start": 28,
                                                    "end": 29
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "z",
                                                    "start": 31,
                                                    "end": 32
                                                }
                                            ],
                                            "start": 27,
                                            "end": 33
                                        },
                                        "method": false,
                                        "shorthand": false,
                                        "start": 24,
                                        "end": 33
                                    }
                                ],
                                "start": 12,
                                "end": 34
                            },
                            {
                                "type": "RestElement",
                                "argument": {
                                    "type": "ArrayPattern",
                                    "elements": [
                                        {
                                            "type": "Identifier",
                                            "name": "a",
                                            "start": 40,
                                            "end": 41
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "b",
                                            "start": 43,
                                            "end": 44
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "c",
                                            "start": 46,
                                            "end": 47
                                        }
                                    ],
                                    "start": 39,
                                    "end": 48
                                },
                                "start": 36,
                                "end": 48
                            }
                        ],
                        "body": {
                            "type": "BlockStatement",
                            "body": [],
                            "start": 50,
                            "end": 52
                        },
                        "async": false,
                        "generator": false,
                        "expression": false,
                        "id": {
                            "type": "Identifier",
                            "name": "x",
                            "start": 10,
                            "end": 11
                        },
                        "start": 1,
                        "end": 52
                    },
                    "start": 0,
                    "end": 54
                }
            ],
            "sourceType": "script",
            "start": 0,
            "end": 54
        });
    });

    it('should parse "a(b(c, c), d(c, c), e(c, c));"', () => {
        expect(parseScript('a(b(c, c), d(c, c), e(c, c));', {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "start": 0,
            "end": 29,
            "body": [
              {
                "type": "ExpressionStatement",
                "start": 0,
                "end": 29,
                "expression": {
                  "type": "CallExpression",
                  "start": 0,
                  "end": 28,
                  "callee": {
                    "type": "Identifier",
                    "start": 0,
                    "end": 1,
                    "name": "a"
                  },
                  "arguments": [
                    {
                      "type": "CallExpression",
                      "start": 2,
                      "end": 9,
                      "callee": {
                        "type": "Identifier",
                        "start": 2,
                        "end": 3,
                        "name": "b"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "start": 4,
                          "end": 5,
                          "name": "c"
                        },
                        {
                          "type": "Identifier",
                          "start": 7,
                          "end": 8,
                          "name": "c"
                        }
                      ]
                    },
                    {
                      "type": "CallExpression",
                      "start": 11,
                      "end": 18,
                      "callee": {
                        "type": "Identifier",
                        "start": 11,
                        "end": 12,
                        "name": "d"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "start": 13,
                          "end": 14,
                          "name": "c"
                        },
                        {
                          "type": "Identifier",
                          "start": 16,
                          "end": 17,
                          "name": "c"
                        }
                      ]
                    },
                    {
                      "type": "CallExpression",
                      "start": 20,
                      "end": 27,
                      "callee": {
                        "type": "Identifier",
                        "start": 20,
                        "end": 21,
                        "name": "e"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "start": 22,
                          "end": 23,
                          "name": "c"
                        },
                        {
                          "type": "Identifier",
                          "start": 25,
                          "end": 26,
                          "name": "c"
                        }
                      ]
                    }
                  ]
                }
              }
            ],
            "sourceType": "script"
          });
    });

    it('should parse complex 7', () => {
        expect(parseScript(`throw "a";
        b();`, {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "start": 0,
            "end": 23,
            "body": [
              {
                "type": "ThrowStatement",
                "start": 0,
                "end": 10,
                "argument": {
                  "type": "Literal",
                  "start": 6,
                  "end": 9,
                  "value": "a",
                  "raw": "\"a\""
                }
              },
              {
                "type": "ExpressionStatement",
                "start": 19,
                "end": 23,
                "expression": {
                  "type": "CallExpression",
                  "start": 19,
                  "end": 22,
                  "callee": {
                    "type": "Identifier",
                    "start": 19,
                    "end": 20,
                    "name": "b"
                  },
                  "arguments": []
                }
              }
            ],
            "sourceType": "script"
          });
    });

    it('should parse "({a}) => (1);"', () => {
        expect(parseScript('({a}) => (1);', {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "start": 0,
            "end": 13,
            "body": [
              {
                "type": "ExpressionStatement",
                "start": 0,
                "end": 13,
                "expression": {
                  "type": "ArrowFunctionExpression",
                  "start": 0,
                  "end": 12,
                  "id": null,
                  "generator": false,
                  "expression": true,
                  "async": false,
                  "params": [
                    {
                      "type": "ObjectPattern",
                      "start": 1,
                      "end": 4,
                      "properties": [
                        {
                          "type": "Property",
                          "start": 2,
                          "end": 3,
                          "method": false,
                          "shorthand": true,
                          "computed": false,
                          "key": {
                            "type": "Identifier",
                            "start": 2,
                            "end": 3,
                            "name": "a"
                          },
                          "kind": "init",
                          "value": {
                            "type": "Identifier",
                            "start": 2,
                            "end": 3,
                            "name": "a"
                          }
                        }
                      ]
                    }
                  ],
                  "body": {
                    "type": "Literal",
                    "start": 10,
                    "end": 11,
                    "value": 1,
                    "raw": "1"
                  }
                }
              }
            ],
            "sourceType": "script"
          });
    });

    it('should parse "for (const a of b) c(a);"', () => {
        expect(parseScript('for (const a of b) c(a);', {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "start": 0,
            "end": 24,
            "body": [
              {
                "type": "ForOfStatement",
                "await": false,
                "start": 0,
                "end": 24,
                "left": {
                  "type": "VariableDeclaration",
                  "start": 5,
                  "end": 12,
                  "declarations": [
                    {
                      "type": "VariableDeclarator",
                      "start": 11,
                      "end": 12,
                      "id": {
                        "type": "Identifier",
                        "start": 11,
                        "end": 12,
                        "name": "a"
                      },
                      "init": null
                    }
                  ],
                  "kind": "const"
                },
                "right": {
                  "type": "Identifier",
                  "start": 16,
                  "end": 17,
                  "name": "b"
                },
                "body": {
                  "type": "ExpressionStatement",
                  "start": 19,
                  "end": 24,
                  "expression": {
                    "type": "CallExpression",
                    "start": 19,
                    "end": 23,
                    "callee": {
                      "type": "Identifier",
                      "start": 19,
                      "end": 20,
                      "name": "c"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "start": 21,
                        "end": 22,
                        "name": "a"
                      }
                    ]
                  }
                }
              }
            ],
            "sourceType": "script"
          });
    });

    it('should parse "a ^= (1);"', () => {
        expect(parseScript('a ^= (1);', {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "start": 0,
            "end": 9,
            "body": [
              {
                "type": "ExpressionStatement",
                "start": 0,
                "end": 9,
                "expression": {
                  "type": "AssignmentExpression",
                  "start": 0,
                  "end": 8,
                  "operator": "^=",
                  "left": {
                    "type": "Identifier",
                    "start": 0,
                    "end": 1,
                    "name": "a"
                  },
                  "right": {
                    "type": "Literal",
                    "start": 6,
                    "end": 7,
                    "value": 1,
                    "raw": "1"
                  }
                }
              }
            ],
            "sourceType": "script"
          });
    });

    it('should parse "({a, b} = (1));"', () => {
        expect(parseScript('({a, b} = (1));', {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "start": 0,
            "end": 15,
            "body": [
              {
                "type": "ExpressionStatement",
                "start": 0,
                "end": 15,
                "expression": {
                  "type": "AssignmentExpression",
                  "start": 1,
                  "end": 13,
                  "operator": "=",
                  "left": {
                    "type": "ObjectPattern",
                    "start": 1,
                    "end": 7,
                    "properties": [
                      {
                        "type": "Property",
                        "start": 2,
                        "end": 3,
                        "method": false,
                        "shorthand": true,
                        "computed": false,
                        "key": {
                          "type": "Identifier",
                          "start": 2,
                          "end": 3,
                          "name": "a"
                        },
                        "kind": "init",
                        "value": {
                          "type": "Identifier",
                          "start": 2,
                          "end": 3,
                          "name": "a"
                        }
                      },
                      {
                        "type": "Property",
                        "start": 5,
                        "end": 6,
                        "method": false,
                        "shorthand": true,
                        "computed": false,
                        "key": {
                          "type": "Identifier",
                          "start": 5,
                          "end": 6,
                          "name": "b"
                        },
                        "kind": "init",
                        "value": {
                          "type": "Identifier",
                          "start": 5,
                          "end": 6,
                          "name": "b"
                        }
                      }
                    ]
                  },
                  "right": {
                    "type": "Literal",
                    "start": 11,
                    "end": 12,
                    "value": 1,
                    "raw": "1"
                  }
                }
              }
            ],
            "sourceType": "script"
          });
    });

    it('should parse "for (;;) if (a()) b(); else break;"', () => {
        expect(parseScript('for (;;) if (a()) b(); else break;', {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "body": [
                {
                    "type": "ForStatement",
                    "body": {
                        "type": "IfStatement",
                        "test": {
                            "type": "CallExpression",
                            "arguments": [],
                            "callee": {
                                "type": "Identifier",
                                "name": "a",
                                "start": 13,
                                "end": 14
                            },
                            "start": 13,
                            "end": 16
                        },
                        "alternate": {
                            "type": "BreakStatement",
                            "label": null,
                            "start": 28,
                            "end": 34
                        },
                        "consequent": {
                            "type": "ExpressionStatement",
                            "expression": {
                                "type": "CallExpression",
                                "arguments": [],
                                "callee": {
                                    "type": "Identifier",
                                    "name": "b",
                                    "start": 18,
                                    "end": 19
                                },
                                "start": 18,
                                "end": 21
                            },
                            "start": 18,
                            "end": 22
                        },
                        "start": 9,
                        "end": 34
                    },
                    "init": null,
                    "test": null,
                    "update": null,
                    "start": 0,
                    "end": 34
                }
            ],
            "sourceType": "script",
            "start": 0,
            "end": 34
        });
    });

    it('should parse "(function a([b, c]) {});"', () => {
        expect(parseScript('(function a([b, c]) {});', {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "start": 0,
            "end": 24,
            "body": [
              {
                "type": "ExpressionStatement",
                "start": 0,
                "end": 24,
                "expression": {
                  "type": "FunctionExpression",
                  "start": 1,
                  "end": 22,
                  "id": {
                    "type": "Identifier",
                    "start": 10,
                    "end": 11,
                    "name": "a"
                  },
                  "generator": false,
                  "expression": false,
                  "async": false,
                  "params": [
                    {
                      "type": "ArrayPattern",
                      "start": 12,
                      "end": 18,
                      "elements": [
                        {
                          "type": "Identifier",
                          "start": 13,
                          "end": 14,
                          "name": "b"
                        },
                        {
                          "type": "Identifier",
                          "start": 16,
                          "end": 17,
                          "name": "c"
                        }
                      ]
                    }
                  ],
                  "body": {
                    "type": "BlockStatement",
                    "start": 20,
                    "end": 22,
                    "body": []
                  }
                }
              }
            ],
            "sourceType": "script"
          });
    });

    it('should parse "function a([b, c]) {}"', () => {
        expect(parseScript('function a([b, c]) {}', {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "start": 0,
            "end": 21,
            "body": [
              {
                "type": "FunctionDeclaration",
                "start": 0,
                "end": 21,
                "id": {
                  "type": "Identifier",
                  "start": 9,
                  "end": 10,
                  "name": "a"
                },
                "generator": false,
                "expression": false,
                "async": false,
                "params": [
                  {
                    "type": "ArrayPattern",
                    "start": 11,
                    "end": 17,
                    "elements": [
                      {
                        "type": "Identifier",
                        "start": 12,
                        "end": 13,
                        "name": "b"
                      },
                      {
                        "type": "Identifier",
                        "start": 15,
                        "end": 16,
                        "name": "c"
                      }
                    ]
                  }
                ],
                "body": {
                  "type": "BlockStatement",
                  "start": 19,
                  "end": 21,
                  "body": []
                }
              }
            ],
            "sourceType": "script"
          });
    });

    it('should parse "(a | b) | c;"', () => {
        expect(parseScript('(a | b) | c;', {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "start": 0,
            "end": 12,
            "body": [
              {
                "type": "ExpressionStatement",
                "start": 0,
                "end": 12,
                "expression": {
                  "type": "BinaryExpression",
                  "start": 0,
                  "end": 11,
                  "left": {
                    "type": "BinaryExpression",
                    "start": 1,
                    "end": 6,
                    "left": {
                      "type": "Identifier",
                      "start": 1,
                      "end": 2,
                      "name": "a"
                    },
                    "operator": "|",
                    "right": {
                      "type": "Identifier",
                      "start": 5,
                      "end": 6,
                      "name": "b"
                    }
                  },
                  "operator": "|",
                  "right": {
                    "type": "Identifier",
                    "start": 10,
                    "end": 11,
                    "name": "c"
                  }
                }
              }
            ],
            "sourceType": "script"
          });
    });

    it('should parse "var [{__proto__: a, __proto__: b}] = (1);"', () => {
        expect(parseScript('var [{__proto__: a, __proto__: b}] = (1);', {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "body": [
                {
                    "type": "VariableDeclaration",
                    "declarations": [
                        {
                            "type": "VariableDeclarator",
                            "init": {
                                "type": "Literal",
                                "value": 1,
                                "start": 38,
                                "end": 39,
                                "raw": "1"
                            },
                            "id": {
                                "type": "ArrayPattern",
                                "elements": [
                                    {
                                        "type": "ObjectPattern",
                                        "properties": [
                                            {
                                                "type": "Property",
                                                "kind": "init",
                                                "key": {
                                                    "type": "Identifier",
                                                    "name": "__proto__",
                                                    "start": 6,
                                                    "end": 15
                                                },
                                                "computed": false,
                                                "value": {
                                                    "type": "Identifier",
                                                    "name": "a",
                                                    "start": 17,
                                                    "end": 18
                                                },
                                                "method": false,
                                                "shorthand": false,
                                                "start": 6,
                                                "end": 18
                                            },
                                            {
                                                "type": "Property",
                                                "kind": "init",
                                                "key": {
                                                    "type": "Identifier",
                                                    "name": "__proto__",
                                                    "start": 20,
                                                    "end": 29
                                                },
                                                "computed": false,
                                                "value": {
                                                    "type": "Identifier",
                                                    "name": "b",
                                                    "start": 31,
                                                    "end": 32
                                                },
                                                "method": false,
                                                "shorthand": false,
                                                "start": 20,
                                                "end": 32
                                            }
                                        ],
                                        "start": 5,
                                        "end": 33
                                    }
                                ],
                                "start": 4,
                                "end": 34
                            },
                            "start": 4,
                            "end": 40
                        }
                    ],
                    "kind": "var",
                    "start": 0,
                    "end": 41
                }
            ],
            "sourceType": "script",
            "start": 0,
            "end": 41
        });
    });

    it('should parse complex 8"', () => {
        expect(parseScript(`(function* () {
            yield (yield (1));
          });`, {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "start": 0,
            "end": 60,
            "body": [
              {
                "type": "ExpressionStatement",
                "start": 0,
                "end": 60,
                "expression": {
                  "type": "FunctionExpression",
                  "start": 1,
                  "end": 58,
                  "id": null,
                  "generator": true,
                  "expression": false,
                  "async": false,
                  "params": [],
                  "body": {
                    "type": "BlockStatement",
                    "start": 14,
                    "end": 58,
                    "body": [
                      {
                        "type": "ExpressionStatement",
                        "start": 28,
                        "end": 46,
                        "expression": {
                          "type": "YieldExpression",
                          "start": 28,
                          "end": 45,
                          "delegate": false,
                          "argument": {
                            "type": "YieldExpression",
                            "start": 35,
                            "end": 44,
                            "delegate": false,
                            "argument": {
                              "type": "Literal",
                              "start": 42,
                              "end": 43,
                              "value": 1,
                              "raw": "1"
                            }
                          }
                        }
                      }
                    ]
                  }
                }
              }
            ],
            "sourceType": "script"
          });
    });


    it('should parse "let {} = (1);"', () => {
        expect(parseScript('let {} = (1);', {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "start": 0,
            "end": 13,
            "body": [
              {
                "type": "VariableDeclaration",
                "start": 0,
                "end": 13,
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "start": 4,
                    "end": 12,
                    "id": {
                      "type": "ObjectPattern",
                      "start": 4,
                      "end": 6,
                      "properties": []
                    },
                    "init": {
                      "type": "Literal",
                      "start": 10,
                      "end": 11,
                      "value": 1,
                      "raw": "1"
                    }
                  }
                ],
                "kind": "let"
              }
            ],
            "sourceType": "script"
          });
    });

    it('should parse complex 9', () => {
        expect(parseScript(`((function () {
            var a = ({b: 1});
          })());`, {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "start": 0,
            "end": 62,
            "body": [
              {
                "type": "ExpressionStatement",
                "start": 0,
                "end": 62,
                "expression": {
                  "type": "CallExpression",
                  "start": 1,
                  "end": 60,
                  "callee": {
                    "type": "FunctionExpression",
                    "start": 2,
                    "end": 57,
                    "id": null,
                    "generator": false,
                    "expression": false,
                    "async": false,
                    "params": [],
                    "body": {
                      "type": "BlockStatement",
                      "start": 14,
                      "end": 57,
                      "body": [
                        {
                          "type": "VariableDeclaration",
                          "start": 28,
                          "end": 45,
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "start": 32,
                              "end": 44,
                              "id": {
                                "type": "Identifier",
                                "start": 32,
                                "end": 33,
                                "name": "a"
                              },
                              "init": {
                                "type": "ObjectExpression",
                                "start": 37,
                                "end": 43,
                                "properties": [
                                  {
                                    "type": "Property",
                                    "start": 38,
                                    "end": 42,
                                    "method": false,
                                    "shorthand": false,
                                    "computed": false,
                                    "key": {
                                      "type": "Identifier",
                                      "start": 38,
                                      "end": 39,
                                      "name": "b"
                                    },
                                    "value": {
                                      "type": "Literal",
                                      "start": 41,
                                      "end": 42,
                                      "value": 1,
                                      "raw": "1"
                                    },
                                    "kind": "init"
                                  }
                                ]
                              }
                            }
                          ],
                          "kind": "var"
                        }
                      ]
                    }
                  },
                  "arguments": []
                }
              }
            ],
            "sourceType": "script"
          });
    });

    it('should parse "!(/test/);"', () => {
        expect(parseScript('!(/test/);', {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "start": 0,
            "end": 10,
            "body": [
              {
                "type": "ExpressionStatement",
                "start": 0,
                "end": 10,
                "expression": {
                  "type": "UnaryExpression",
                  "start": 0,
                  "end": 9,
                  "operator": "!",
                  "prefix": true,
                  "argument": {
                    "type": "Literal",
                    "start": 2,
                    "end": 8,
                    "value": /test/,
                    "raw": "/test/",
                    "regex": {
                      "pattern": "test",
                      "flags": ""
                    }
                  }
                }
              }
            ],
            "sourceType": "script"
          });
    });

    it('should parse "({a = 1} = (2));"', () => {
        expect(parseScript('({a = 1} = (2));', {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "start": 0,
            "end": 16,
            "body": [
              {
                "type": "ExpressionStatement",
                "start": 0,
                "end": 16,
                "expression": {
                  "type": "AssignmentExpression",
                  "start": 1,
                  "end": 14,
                  "operator": "=",
                  "left": {
                    "type": "ObjectPattern",
                    "start": 1,
                    "end": 8,
                    "properties": [
                      {
                        "type": "Property",
                        "start": 2,
                        "end": 7,
                        "method": false,
                        "shorthand": true,
                        "computed": false,
                        "key": {
                          "type": "Identifier",
                          "start": 2,
                          "end": 3,
                          "name": "a"
                        },
                        "kind": "init",
                        "value": {
                          "type": "AssignmentPattern",
                          "start": 2,
                          "end": 7,
                          "left": {
                            "type": "Identifier",
                            "start": 2,
                            "end": 3,
                            "name": "a"
                          },
                          "right": {
                            "type": "Literal",
                            "start": 6,
                            "end": 7,
                            "value": 1,
                            "raw": "1"
                          }
                        }
                      }
                    ]
                  },
                  "right": {
                    "type": "Literal",
                    "start": 12,
                    "end": 13,
                    "value": 2,
                    "raw": "2"
                  }
                }
              }
            ],
            "sourceType": "script"
          });
    });

    it('should parse "(1) + (((a()), (b())), (c()));"', () => {
        expect(parseScript('(1) + (((a()), (b())), (c()));', {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "start": 0,
            "end": 30,
            "body": [
              {
                "type": "ExpressionStatement",
                "start": 0,
                "end": 30,
                "expression": {
                  "type": "BinaryExpression",
                  "start": 0,
                  "end": 29,
                  "left": {
                    "type": "Literal",
                    "start": 1,
                    "end": 2,
                    "value": 1,
                    "raw": "1"
                  },
                  "operator": "+",
                  "right": {
                    "type": "SequenceExpression",
                    "start": 7,
                    "end": 28,
                    "expressions": [
                      {
                        "type": "SequenceExpression",
                        "start": 8,
                        "end": 20,
                        "expressions": [
                          {
                            "type": "CallExpression",
                            "start": 9,
                            "end": 12,
                            "callee": {
                              "type": "Identifier",
                              "start": 9,
                              "end": 10,
                              "name": "a"
                            },
                            "arguments": []
                          },
                          {
                            "type": "CallExpression",
                            "start": 16,
                            "end": 19,
                            "callee": {
                              "type": "Identifier",
                              "start": 16,
                              "end": 17,
                              "name": "b"
                            },
                            "arguments": []
                          }
                        ]
                      },
                      {
                        "type": "CallExpression",
                        "start": 24,
                        "end": 27,
                        "callee": {
                          "type": "Identifier",
                          "start": 24,
                          "end": 25,
                          "name": "c"
                        },
                        "arguments": []
                      }
                    ]
                  }
                }
              }
            ],
            "sourceType": "script"
          });
    });

    it('should parse "(class {get a() {}})"', () => {
        expect(parseScript('for([a,b[a],{c,d=e,[f]:[g,h().a,(1).i,...j[2]]}] in 3);', {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "body": [
                {
                    "type": "ForInStatement",
                    "body": {
                        "type": "EmptyStatement",
                        "start": 54,
                        "end": 55
                    },
                    "left": {
                        "type": "ArrayPattern",
                        "elements": [
                            {
                                "type": "Identifier",
                                "name": "a",
                                "start": 5,
                                "end": 6
                            },
                            {
                                "type": "MemberExpression",
                                "object": {
                                    "type": "Identifier",
                                    "name": "b",
                                    "start": 7,
                                    "end": 8
                                },
                                "computed": true,
                                "property": {
                                    "type": "Identifier",
                                    "name": "a",
                                    "start": 9,
                                    "end": 10
                                },
                                "start": 7,
                                "end": 11
                            },
                            {
                                "type": "ObjectPattern",
                                "properties": [
                                    {
                                        "type": "Property",
                                        "computed": false,
                                        "key": {
                                            "type": "Identifier",
                                            "name": "c",
                                            "start": 13,
                                            "end": 14
                                        },
                                        "kind": "init",
                                        "method": false,
                                        "shorthand": true,
                                        "value": {
                                            "type": "Identifier",
                                            "name": "c",
                                            "start": 13,
                                            "end": 14
                                        },
                                        "start": 13,
                                        "end": 14
                                    },
                                    {
                                        "type": "Property",
                                        "computed": false,
                                        "key": {
                                            "type": "Identifier",
                                            "name": "d",
                                            "start": 15,
                                            "end": 16
                                        },
                                        "kind": "init",
                                        "method": false,
                                        "shorthand": true,
                                        "value": {
                                            "type": "AssignmentPattern",
                                            "left": {
                                                "type": "Identifier",
                                                "name": "d",
                                                "start": 15,
                                                "end": 16
                                            },
                                            "right": {
                                                "type": "Identifier",
                                                "name": "e",
                                                "start": 17,
                                                "end": 18
                                            },
                                            "start": 15,
                                            "end": 18
                                        },
                                        "start": 15,
                                        "end": 18
                                    },
                                    {
                                        "type": "Property",
                                        "computed": true,
                                        "key": {
                                            "type": "Identifier",
                                            "name": "f",
                                            "start": 20,
                                            "end": 21
                                        },
                                        "kind": "init",
                                        "method": false,
                                        "shorthand": false,
                                        "value": {
                                            "type": "ArrayPattern",
                                            "elements": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "g",
                                                    "start": 24,
                                                    "end": 25
                                                },
                                                {
                                                    "type": "MemberExpression",
                                                    "object": {
                                                        "type": "CallExpression",
                                                        "arguments": [],
                                                        "callee": {
                                                            "type": "Identifier",
                                                            "name": "h",
                                                            "start": 26,
                                                            "end": 27
                                                        },
                                                        "start": 26,
                                                        "end": 29
                                                    },
                                                    "computed": false,
                                                    "property": {
                                                        "type": "Identifier",
                                                        "name": "a",
                                                        "start": 30,
                                                        "end": 31
                                                    },
                                                    "start": 26,
                                                    "end": 31
                                                },
                                                {
                                                    "type": "MemberExpression",
                                                    "object": {
                                                        "type": "Literal",
                                                        "value": 1,
                                                        "start": 33,
                                                        "end": 34,
                                                        "raw": "1"
                                                    },
                                                    "computed": false,
                                                    "property": {
                                                        "type": "Identifier",
                                                        "name": "i",
                                                        "start": 36,
                                                        "end": 37
                                                    },
                                                    "start": 32,
                                                    "end": 37
                                                },
                                                {
                                                    "type": "RestElement",
                                                    "argument": {
                                                        "type": "MemberExpression",
                                                        "object": {
                                                            "type": "Identifier",
                                                            "name": "j",
                                                            "start": 41,
                                                            "end": 42
                                                        },
                                                        "computed": true,
                                                        "property": {
                                                            "type": "Literal",
                                                            "value": 2,
                                                            "start": 43,
                                                            "end": 44,
                                                            "raw": "2"
                                                        },
                                                        "start": 41,
                                                        "end": 45
                                                    },
                                                    "start": 38,
                                                    "end": 45
                                                }
                                            ],
                                            "start": 23,
                                            "end": 46
                                        },
                                        "start": 19,
                                        "end": 46
                                    }
                                ],
                                "start": 12,
                                "end": 47
                            }
                        ],
                        "start": 4,
                        "end": 48
                    },
                    "right": {
                        "type": "Literal",
                        "value": 3,
                        "start": 52,
                        "end": 53,
                        "raw": "3"
                    },
                    "start": 0,
                    "end": 55
                }
            ],
            "sourceType": "script",
            "start": 0,
            "end": 55
        });
    });

    it('should parse complex test', () => {
        expect(parseScript(`a.b('c').
        d('e',
            /*@ngInject*/
            function(f) {
                return f;
            }).
        g('h',
            /*@ngInject*/
            function(i) {
                return i;
            })`, {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "start": 0,
            "end": 226,
            "body": [
              {
                "type": "ExpressionStatement",
                "start": 0,
                "end": 226,
                "expression": {
                  "type": "CallExpression",
                  "start": 0,
                  "end": 226,
                  "callee": {
                    "type": "MemberExpression",
                    "start": 0,
                    "end": 128,
                    "object": {
                      "type": "CallExpression",
                      "start": 0,
                      "end": 117,
                      "callee": {
                        "type": "MemberExpression",
                        "start": 0,
                        "end": 19,
                        "object": {
                          "type": "CallExpression",
                          "start": 0,
                          "end": 8,
                          "callee": {
                            "type": "MemberExpression",
                            "start": 0,
                            "end": 3,
                            "object": {
                              "type": "Identifier",
                              "start": 0,
                              "end": 1,
                              "name": "a"
                            },
                            "property": {
                              "type": "Identifier",
                              "start": 2,
                              "end": 3,
                              "name": "b"
                            },
                            "computed": false
                          },
                          "arguments": [
                            {
                              "type": "Literal",
                              "start": 4,
                              "end": 7,
                              "value": "c",
                              "raw": "'c'"
                            }
                          ]
                        },
                        "property": {
                          "type": "Identifier",
                          "start": 18,
                          "end": 19,
                          "name": "d"
                        },
                        "computed": false
                      },
                      "arguments": [
                        {
                          "type": "Literal",
                          "start": 20,
                          "end": 23,
                          "value": "e",
                          "raw": "'e'"
                        },
                        {
                          "type": "FunctionExpression",
                          "start": 63,
                          "end": 116,
                          "id": null,
                          "generator": false,
                          "expression": false,
                          "async": false,
                          "params": [
                            {
                              "type": "Identifier",
                              "start": 72,
                              "end": 73,
                              "name": "f"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "start": 75,
                            "end": 116,
                            "body": [
                              {
                                "type": "ReturnStatement",
                                "start": 93,
                                "end": 102,
                                "argument": {
                                  "type": "Identifier",
                                  "start": 100,
                                  "end": 101,
                                  "name": "f"
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "property": {
                      "type": "Identifier",
                      "start": 127,
                      "end": 128,
                      "name": "g"
                    },
                    "computed": false
                  },
                  "arguments": [
                    {
                      "type": "Literal",
                      "start": 129,
                      "end": 132,
                      "value": "h",
                      "raw": "'h'"
                    },
                    {
                      "type": "FunctionExpression",
                      "start": 172,
                      "end": 225,
                      "id": null,
                      "generator": false,
                      "expression": false,
                      "async": false,
                      "params": [
                        {
                          "type": "Identifier",
                          "start": 181,
                          "end": 182,
                          "name": "i"
                        }
                      ],
                      "body": {
                        "type": "BlockStatement",
                        "start": 184,
                        "end": 225,
                        "body": [
                          {
                            "type": "ReturnStatement",
                            "start": 202,
                            "end": 211,
                            "argument": {
                              "type": "Identifier",
                              "start": 209,
                              "end": 210,
                              "name": "i"
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ],
            "sourceType": "script"
          });
    });

    it('should parse "a >>= 1"', () => {
        expect(parseScript('a >>= 1', {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "start": 0,
            "end": 7,
            "body": [
              {
                "type": "ExpressionStatement",
                "start": 0,
                "end": 7,
                "expression": {
                  "type": "AssignmentExpression",
                  "start": 0,
                  "end": 7,
                  "operator": ">>=",
                  "left": {
                    "type": "Identifier",
                    "start": 0,
                    "end": 1,
                    "name": "a"
                  },
                  "right": {
                    "type": "Literal",
                    "start": 6,
                    "end": 7,
                    "value": 1,
                    "raw": "1"
                  }
                }
              }
            ],
            "sourceType": "script"
          });
    });

    it('should parse "({ get: 1 })"', () => {
        expect(parseScript('({ get: 1 })', {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "start": 0,
            "end": 12,
            "body": [
              {
                "type": "ExpressionStatement",
                "start": 0,
                "end": 12,
                "expression": {
                  "type": "ObjectExpression",
                  "start": 1,
                  "end": 11,
                  "properties": [
                    {
                      "type": "Property",
                      "start": 3,
                      "end": 9,
                      "method": false,
                      "shorthand": false,
                      "computed": false,
                      "key": {
                        "type": "Identifier",
                        "start": 3,
                        "end": 6,
                        "name": "get"
                      },
                      "value": {
                        "type": "Literal",
                        "start": 8,
                        "end": 9,
                        "value": 1,
                        "raw": "1"
                      },
                      "kind": "init"
                    }
                  ]
                }
              }
            ],
            "sourceType": "script"
          });
    });

    it('should parse "a = (b, c)"', () => {
        expect(parseScript('a = (b, c)', {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "start": 0,
            "end": 10,
            "body": [
              {
                "type": "ExpressionStatement",
                "start": 0,
                "end": 10,
                "expression": {
                  "type": "AssignmentExpression",
                  "start": 0,
                  "end": 10,
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "start": 0,
                    "end": 1,
                    "name": "a"
                  },
                  "right": {
                    "type": "SequenceExpression",
                    "start": 5,
                    "end": 9,
                    "expressions": [
                      {
                        "type": "Identifier",
                        "start": 5,
                        "end": 6,
                        "name": "b"
                      },
                      {
                        "type": "Identifier",
                        "start": 8,
                        "end": 9,
                        "name": "c"
                      }
                    ]
                  }
                }
              }
            ],
            "sourceType": "script"
          });
    });

    it('should parse "function *a(){yield ++a;}', () => {
        expect(parseScript('function *a(){yield ++a;}', {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "start": 0,
            "end": 25,
            "body": [
              {
                "type": "FunctionDeclaration",
                "start": 0,
                "end": 25,
                "id": {
                  "type": "Identifier",
                  "start": 10,
                  "end": 11,
                  "name": "a"
                },
                "generator": true,
                "expression": false,
                "async": false,
                "params": [],
                "body": {
                  "type": "BlockStatement",
                  "start": 13,
                  "end": 25,
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "start": 14,
                      "end": 24,
                      "expression": {
                        "type": "YieldExpression",
                        "start": 14,
                        "end": 23,
                        "delegate": false,
                        "argument": {
                          "type": "UpdateExpression",
                          "start": 20,
                          "end": 23,
                          "operator": "++",
                          "prefix": true,
                          "argument": {
                            "type": "Identifier",
                            "start": 22,
                            "end": 23,
                            "name": "a"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "sourceType": "script"
          });
    });

    it('should parse "function eval() { function a() { "use strict" } }"', () => {
        expect(parseScript('function eval() { function a() { "use strict" } }', {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "start": 0,
            "end": 49,
            "body": [
              {
                "type": "FunctionDeclaration",
                "start": 0,
                "end": 49,
                "id": {
                  "type": "Identifier",
                  "start": 9,
                  "end": 13,
                  "name": "eval"
                },
                "generator": false,
                "expression": false,
                "async": false,
                "params": [],
                "body": {
                  "type": "BlockStatement",
                  "start": 16,
                  "end": 49,
                  "body": [
                    {
                      "type": "FunctionDeclaration",
                      "start": 18,
                      "end": 47,
                      "id": {
                        "type": "Identifier",
                        "start": 27,
                        "end": 28,
                        "name": "a"
                      },
                      "generator": false,
                      "expression": false,
                      "async": false,
                      "params": [],
                      "body": {
                        "type": "BlockStatement",
                        "start": 31,
                        "end": 47,
                        "body": [
                          {
                            "type": "ExpressionStatement",
                            "start": 33,
                            "end": 45,
                            "expression": {
                              "type": "Literal",
                              "start": 33,
                              "end": 45,
                              "value": "use strict",
                              "raw": "\"use strict\""
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ],
            "sourceType": "script"
          });
    });

    it('should parse "function* a(){yield}"', () => {
        expect(parseScript('function* a(){yield}', {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "start": 0,
            "end": 20,
            "body": [
              {
                "type": "FunctionDeclaration",
                "start": 0,
                "end": 20,
                "id": {
                  "type": "Identifier",
                  "start": 10,
                  "end": 11,
                  "name": "a"
                },
                "generator": true,
                "expression": false,
                "async": false,
                "params": [],
                "body": {
                  "type": "BlockStatement",
                  "start": 13,
                  "end": 20,
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "start": 14,
                      "end": 19,
                      "expression": {
                        "type": "YieldExpression",
                        "start": 14,
                        "end": 19,
                        "delegate": false,
                        "argument": null
                      }
                    }
                  ]
                }
              }
            ],
            "sourceType": "script"
          });
    });

    it('should parse "(function () { }(1,2,3))', () => {
        expect(parseScript(`(function () {
        }(1,2,3))`, {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "start": 0,
            "end": 32,
            "body": [
              {
                "type": "ExpressionStatement",
                "start": 0,
                "end": 32,
                "expression": {
                  "type": "CallExpression",
                  "start": 1,
                  "end": 31,
                  "callee": {
                    "type": "FunctionExpression",
                    "start": 1,
                    "end": 24,
                    "id": null,
                    "generator": false,
                    "expression": false,
                    "async": false,
                    "params": [],
                    "body": {
                      "type": "BlockStatement",
                      "start": 13,
                      "end": 24,
                      "body": []
                    }
                  },
                  "arguments": [
                    {
                      "type": "Literal",
                      "start": 25,
                      "end": 26,
                      "value": 1,
                      "raw": "1"
                    },
                    {
                      "type": "Literal",
                      "start": 27,
                      "end": 28,
                      "value": 2,
                      "raw": "2"
                    },
                    {
                      "type": "Literal",
                      "start": 29,
                      "end": 30,
                      "value": 3,
                      "raw": "3"
                    }
                  ]
                }
              }
            ],
            "sourceType": "script"
          });
    });

    it('should parse "function a({ b, c }){}"', () => {
        expect(parseScript('function a({ b, c }){}', {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "start": 0,
            "end": 22,
            "body": [
              {
                "type": "FunctionDeclaration",
                "start": 0,
                "end": 22,
                "id": {
                  "type": "Identifier",
                  "start": 9,
                  "end": 10,
                  "name": "a"
                },
                "generator": false,
                "expression": false,
                "async": false,
                "params": [
                  {
                    "type": "ObjectPattern",
                    "start": 11,
                    "end": 19,
                    "properties": [
                      {
                        "type": "Property",
                        "start": 13,
                        "end": 14,
                        "method": false,
                        "shorthand": true,
                        "computed": false,
                        "key": {
                          "type": "Identifier",
                          "start": 13,
                          "end": 14,
                          "name": "b"
                        },
                        "kind": "init",
                        "value": {
                          "type": "Identifier",
                          "start": 13,
                          "end": 14,
                          "name": "b"
                        }
                      },
                      {
                        "type": "Property",
                        "start": 16,
                        "end": 17,
                        "method": false,
                        "shorthand": true,
                        "computed": false,
                        "key": {
                          "type": "Identifier",
                          "start": 16,
                          "end": 17,
                          "name": "c"
                        },
                        "kind": "init",
                        "value": {
                          "type": "Identifier",
                          "start": 16,
                          "end": 17,
                          "name": "c"
                        }
                      }
                    ]
                  }
                ],
                "body": {
                  "type": "BlockStatement",
                  "start": 20,
                  "end": 22,
                  "body": []
                }
              }
            ],
            "sourceType": "script"
          });
    });

    it('should parse "let {a,b=1,c:d,e:f=2,[g]:[h]}=3"', () => {
        expect(parseScript(`var a, b;
        if (a && !(a + "1") && b) { // 1
            var c;
            d();
        } else {
            e();
        }
        
        if (a || !!(a + "1") || b) { // 2
            d();
        } else {
            var f;
            e();
        }`, {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "start": 0,
            "end": 261,
            "body": [
              {
                "type": "VariableDeclaration",
                "start": 0,
                "end": 9,
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "start": 4,
                    "end": 5,
                    "id": {
                      "type": "Identifier",
                      "start": 4,
                      "end": 5,
                      "name": "a"
                    },
                    "init": null
                  },
                  {
                    "type": "VariableDeclarator",
                    "start": 7,
                    "end": 8,
                    "id": {
                      "type": "Identifier",
                      "start": 7,
                      "end": 8,
                      "name": "b"
                    },
                    "init": null
                  }
                ],
                "kind": "var"
              },
              {
                "type": "IfStatement",
                "start": 18,
                "end": 130,
                "test": {
                  "type": "LogicalExpression",
                  "start": 22,
                  "end": 42,
                  "left": {
                    "type": "LogicalExpression",
                    "start": 22,
                    "end": 37,
                    "left": {
                      "type": "Identifier",
                      "start": 22,
                      "end": 23,
                      "name": "a"
                    },
                    "operator": "&&",
                    "right": {
                      "type": "UnaryExpression",
                      "start": 27,
                      "end": 37,
                      "operator": "!",
                      "prefix": true,
                      "argument": {
                        "type": "BinaryExpression",
                        "start": 29,
                        "end": 36,
                        "left": {
                          "type": "Identifier",
                          "start": 29,
                          "end": 30,
                          "name": "a"
                        },
                        "operator": "+",
                        "right": {
                          "type": "Literal",
                          "start": 33,
                          "end": 36,
                          "value": "1",
                          "raw": "\"1\""
                        }
                      }
                    }
                  },
                  "operator": "&&",
                  "right": {
                    "type": "Identifier",
                    "start": 41,
                    "end": 42,
                    "name": "b"
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "start": 44,
                  "end": 96,
                  "body": [
                    {
                      "type": "VariableDeclaration",
                      "start": 63,
                      "end": 69,
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "start": 67,
                          "end": 68,
                          "id": {
                            "type": "Identifier",
                            "start": 67,
                            "end": 68,
                            "name": "c"
                          },
                          "init": null
                        }
                      ],
                      "kind": "var"
                    },
                    {
                      "type": "ExpressionStatement",
                      "start": 82,
                      "end": 86,
                      "expression": {
                        "type": "CallExpression",
                        "start": 82,
                        "end": 85,
                        "callee": {
                          "type": "Identifier",
                          "start": 82,
                          "end": 83,
                          "name": "d"
                        },
                        "arguments": []
                      }
                    }
                  ]
                },
                "alternate": {
                  "type": "BlockStatement",
                  "start": 102,
                  "end": 130,
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "start": 116,
                      "end": 120,
                      "expression": {
                        "type": "CallExpression",
                        "start": 116,
                        "end": 119,
                        "callee": {
                          "type": "Identifier",
                          "start": 116,
                          "end": 117,
                          "name": "e"
                        },
                        "arguments": []
                      }
                    }
                  ]
                }
              },
              {
                "type": "IfStatement",
                "start": 148,
                "end": 261,
                "test": {
                  "type": "LogicalExpression",
                  "start": 152,
                  "end": 173,
                  "left": {
                    "type": "LogicalExpression",
                    "start": 152,
                    "end": 168,
                    "left": {
                      "type": "Identifier",
                      "start": 152,
                      "end": 153,
                      "name": "a"
                    },
                    "operator": "||",
                    "right": {
                      "type": "UnaryExpression",
                      "start": 157,
                      "end": 168,
                      "operator": "!",
                      "prefix": true,
                      "argument": {
                        "type": "UnaryExpression",
                        "start": 158,
                        "end": 168,
                        "operator": "!",
                        "prefix": true,
                        "argument": {
                          "type": "BinaryExpression",
                          "start": 160,
                          "end": 167,
                          "left": {
                            "type": "Identifier",
                            "start": 160,
                            "end": 161,
                            "name": "a"
                          },
                          "operator": "+",
                          "right": {
                            "type": "Literal",
                            "start": 164,
                            "end": 167,
                            "value": "1",
                            "raw": "\"1\""
                          }
                        }
                      }
                    }
                  },
                  "operator": "||",
                  "right": {
                    "type": "Identifier",
                    "start": 172,
                    "end": 173,
                    "name": "b"
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "start": 175,
                  "end": 208,
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "start": 194,
                      "end": 198,
                      "expression": {
                        "type": "CallExpression",
                        "start": 194,
                        "end": 197,
                        "callee": {
                          "type": "Identifier",
                          "start": 194,
                          "end": 195,
                          "name": "d"
                        },
                        "arguments": []
                      }
                    }
                  ]
                },
                "alternate": {
                  "type": "BlockStatement",
                  "start": 214,
                  "end": 261,
                  "body": [
                    {
                      "type": "VariableDeclaration",
                      "start": 228,
                      "end": 234,
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "start": 232,
                          "end": 233,
                          "id": {
                            "type": "Identifier",
                            "start": 232,
                            "end": 233,
                            "name": "f"
                          },
                          "init": null
                        }
                      ],
                      "kind": "var"
                    },
                    {
                      "type": "ExpressionStatement",
                      "start": 247,
                      "end": 251,
                      "expression": {
                        "type": "CallExpression",
                        "start": 247,
                        "end": 250,
                        "callee": {
                          "type": "Identifier",
                          "start": 247,
                          "end": 248,
                          "name": "e"
                        },
                        "arguments": []
                      }
                    }
                  ]
                }
              }
            ],
            "sourceType": "script"
          });
    });


    it('should parse "function a() { /* infinite */ while (true) { } /* bar */ var b; }"', () => {
        expect(parseScript('function a() { /* infinite */ while (true) { } /* bar */ var b; }', {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "start": 0,
            "end": 65,
            "body": [
              {
                "type": "FunctionDeclaration",
                "start": 0,
                "end": 65,
                "id": {
                  "type": "Identifier",
                  "start": 9,
                  "end": 10,
                  "name": "a"
                },
                "generator": false,
                "expression": false,
                "async": false,
                "params": [],
                "body": {
                  "type": "BlockStatement",
                  "start": 13,
                  "end": 65,
                  "body": [
                    {
                      "type": "WhileStatement",
                      "start": 30,
                      "end": 46,
                      "test": {
                        "type": "Literal",
                        "start": 37,
                        "end": 41,
                        "value": true,
                        "raw": "true"
                      },
                      "body": {
                        "type": "BlockStatement",
                        "start": 43,
                        "end": 46,
                        "body": []
                      }
                    },
                    {
                      "type": "VariableDeclaration",
                      "start": 57,
                      "end": 63,
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "start": 61,
                          "end": 62,
                          "id": {
                            "type": "Identifier",
                            "start": 61,
                            "end": 62,
                            "name": "b"
                          },
                          "init": null
                        }
                      ],
                      "kind": "var"
                    }
                  ]
                }
              }
            ],
            "sourceType": "script"
          });
    });


    it('should parse "- (1 - 2 - 3)"', () => {
        expect(parseScript('- (1 - 2 - 3)', {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "start": 0,
            "end": 13,
            "body": [
              {
                "type": "ExpressionStatement",
                "start": 0,
                "end": 13,
                "expression": {
                  "type": "UnaryExpression",
                  "start": 0,
                  "end": 13,
                  "operator": "-",
                  "prefix": true,
                  "argument": {
                    "type": "BinaryExpression",
                    "start": 3,
                    "end": 12,
                    "left": {
                      "type": "BinaryExpression",
                      "start": 3,
                      "end": 8,
                      "left": {
                        "type": "Literal",
                        "start": 3,
                        "end": 4,
                        "value": 1,
                        "raw": "1"
                      },
                      "operator": "-",
                      "right": {
                        "type": "Literal",
                        "start": 7,
                        "end": 8,
                        "value": 2,
                        "raw": "2"
                      }
                    },
                    "operator": "-",
                    "right": {
                      "type": "Literal",
                      "start": 11,
                      "end": 12,
                      "value": 3,
                      "raw": "3"
                    }
                  }
                }
              }
            ],
            "sourceType": "script"
          });
    });

    it('should parse "[] = 1""', () => {
        expect(parseScript('[] = 1', {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "start": 0,
            "end": 6,
            "body": [
              {
                "type": "ExpressionStatement",
                "start": 0,
                "end": 6,
                "expression": {
                  "type": "AssignmentExpression",
                  "start": 0,
                  "end": 6,
                  "operator": "=",
                  "left": {
                    "type": "ArrayPattern",
                    "start": 0,
                    "end": 2,
                    "elements": []
                  },
                  "right": {
                    "type": "Literal",
                    "start": 5,
                    "end": 6,
                    "value": 1,
                    "raw": "1"
                  }
                }
              }
            ],
            "sourceType": "script"
          });
    });

    it('should parse "for (var [a, b] in c);"', () => {
        expect(parseScript('for (var [a, b] in c);', {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "start": 0,
            "end": 22,
            "body": [
              {
                "type": "ForInStatement",
                "start": 0,
                "end": 22,
                "left": {
                  "type": "VariableDeclaration",
                  "start": 5,
                  "end": 15,
                  "declarations": [
                    {
                      "type": "VariableDeclarator",
                      "start": 9,
                      "end": 15,
                      "id": {
                        "type": "ArrayPattern",
                        "start": 9,
                        "end": 15,
                        "elements": [
                          {
                            "type": "Identifier",
                            "start": 10,
                            "end": 11,
                            "name": "a"
                          },
                          {
                            "type": "Identifier",
                            "start": 13,
                            "end": 14,
                            "name": "b"
                          }
                        ]
                      },
                      "init": null
                    }
                  ],
                  "kind": "var"
                },
                "right": {
                  "type": "Identifier",
                  "start": 19,
                  "end": 20,
                  "name": "c"
                },
                "body": {
                  "type": "EmptyStatement",
                  "start": 21,
                  "end": 22
                }
              }
            ],
            "sourceType": "script"
          });
    });

    it('should parse "price_9̶9̶_89"', () => {
        expect(parseScript('price_9̶9̶_89', {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "start": 0,
            "end": 13,
            "body": [
              {
                "type": "ExpressionStatement",
                "start": 0,
                "end": 13,
                "expression": {
                  "type": "Identifier",
                  "start": 0,
                  "end": 13,
                  "name": "price_9̶9̶_89"
                }
              }
            ],
            "sourceType": "script"
          });
    });

    it('should parse "({ yield() {} })"', () => {
        expect(parseScript('({ yield() {} })', {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "start": 0,
            "end": 16,
            "body": [
              {
                "type": "ExpressionStatement",
                "start": 0,
                "end": 16,
                "expression": {
                  "type": "ObjectExpression",
                  "start": 1,
                  "end": 15,
                  "properties": [
                    {
                      "type": "Property",
                      "start": 3,
                      "end": 13,
                      "method": true,
                      "shorthand": false,
                      "computed": false,
                      "key": {
                        "type": "Identifier",
                        "start": 3,
                        "end": 8,
                        "name": "yield"
                      },
                      "kind": "init",
                      "value": {
                        "type": "FunctionExpression",
                        "start": 8,
                        "end": 13,
                        "id": null,
                        "generator": false,
                        "expression": false,
                        "async": false,
                        "params": [],
                        "body": {
                          "type": "BlockStatement",
                          "start": 11,
                          "end": 13,
                          "body": []
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "sourceType": "script"
          });
    });

    it('should parse "({a:yield} = 1);"', () => {
        expect(parseScript('({a:yield} = 1);', {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "start": 0,
            "end": 16,
            "body": [
              {
                "type": "ExpressionStatement",
                "start": 0,
                "end": 16,
                "expression": {
                  "type": "AssignmentExpression",
                  "start": 1,
                  "end": 14,
                  "operator": "=",
                  "left": {
                    "type": "ObjectPattern",
                    "start": 1,
                    "end": 10,
                    "properties": [
                      {
                        "type": "Property",
                        "start": 2,
                        "end": 9,
                        "method": false,
                        "shorthand": false,
                        "computed": false,
                        "key": {
                          "type": "Identifier",
                          "start": 2,
                          "end": 3,
                          "name": "a"
                        },
                        "value": {
                          "type": "Identifier",
                          "start": 4,
                          "end": 9,
                          "name": "yield"
                        },
                        "kind": "init"
                      }
                    ]
                  },
                  "right": {
                    "type": "Literal",
                    "start": 13,
                    "end": 14,
                    "value": 1,
                    "raw": "1"
                  }
                }
              }
            ],
            "sourceType": "script"
          });
    });

    it('should parse "class a extends b { constructor() { super() } }"', () => {
        expect(parseScript('class a extends b { constructor() { super() } }', {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "start": 0,
            "end": 47,
            "body": [
              {
                "type": "ClassDeclaration",
                "start": 0,
                "end": 47,
                "id": {
                  "type": "Identifier",
                  "start": 6,
                  "end": 7,
                  "name": "a"
                },
                "superClass": {
                  "type": "Identifier",
                  "start": 16,
                  "end": 17,
                  "name": "b"
                },
                "body": {
                  "type": "ClassBody",
                  "start": 18,
                  "end": 47,
                  "body": [
                    {
                      "type": "MethodDefinition",
                      "start": 20,
                      "end": 45,
                      "computed": false,
                      "key": {
                        "type": "Identifier",
                        "start": 20,
                        "end": 31,
                        "name": "constructor"
                      },
                      "static": false,
                      "kind": "constructor",
                      "value": {
                        "type": "FunctionExpression",
                        "start": 31,
                        "end": 45,
                        "id": null,
                        "generator": false,
                        "expression": false,
                        "async": false,
                        "params": [],
                        "body": {
                          "type": "BlockStatement",
                          "start": 34,
                          "end": 45,
                          "body": [
                            {
                              "type": "ExpressionStatement",
                              "start": 36,
                              "end": 43,
                              "expression": {
                                "type": "CallExpression",
                                "start": 36,
                                "end": 43,
                                "callee": {
                                  "type": "Super",
                                  "start": 36,
                                  "end": 41
                                },
                                "arguments": []
                              }
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "sourceType": "script"
          });
    });

    it('should parse array rest spread with object', () => {
        expect(parseScript(`(function () {
            if (true) {
                var a = 1;
            }
        }());`, {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "start": 0,
            "end": 93,
            "body": [
              {
                "type": "ExpressionStatement",
                "start": 0,
                "end": 93,
                "expression": {
                  "type": "CallExpression",
                  "start": 1,
                  "end": 91,
                  "callee": {
                    "type": "FunctionExpression",
                    "start": 1,
                    "end": 89,
                    "id": null,
                    "generator": false,
                    "expression": false,
                    "async": false,
                    "params": [],
                    "body": {
                      "type": "BlockStatement",
                      "start": 13,
                      "end": 89,
                      "body": [
                        {
                          "type": "IfStatement",
                          "start": 27,
                          "end": 79,
                          "test": {
                            "type": "Literal",
                            "start": 31,
                            "end": 35,
                            "value": true,
                            "raw": "true"
                          },
                          "consequent": {
                            "type": "BlockStatement",
                            "start": 37,
                            "end": 79,
                            "body": [
                              {
                                "type": "VariableDeclaration",
                                "start": 55,
                                "end": 65,
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "start": 59,
                                    "end": 64,
                                    "id": {
                                      "type": "Identifier",
                                      "start": 59,
                                      "end": 60,
                                      "name": "a"
                                    },
                                    "init": {
                                      "type": "Literal",
                                      "start": 63,
                                      "end": 64,
                                      "value": 1,
                                      "raw": "1"
                                    }
                                  }
                                ],
                                "kind": "var"
                              }
                            ]
                          },
                          "alternate": null
                        }
                      ]
                    }
                  },
                  "arguments": []
                }
              }
            ],
            "sourceType": "script"
          });
    });

    it('should parse "class a { static *[b]() {} }"', () => {
        expect(parseScript('class a { static *[b]() {} }', {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "start": 0,
            "end": 28,
            "body": [
              {
                "type": "ClassDeclaration",
                "start": 0,
                "end": 28,
                "id": {
                  "type": "Identifier",
                  "start": 6,
                  "end": 7,
                  "name": "a"
                },
                "superClass": null,
                "body": {
                  "type": "ClassBody",
                  "start": 8,
                  "end": 28,
                  "body": [
                    {
                      "type": "MethodDefinition",
                      "start": 10,
                      "end": 26,
                      "computed": true,
                      "key": {
                        "type": "Identifier",
                        "start": 19,
                        "end": 20,
                        "name": "b"
                      },
                      "static": true,
                      "kind": "method",
                      "value": {
                        "type": "FunctionExpression",
                        "start": 21,
                        "end": 26,
                        "id": null,
                        "generator": true,
                        "expression": false,
                        "async": false,
                        "params": [],
                        "body": {
                          "type": "BlockStatement",
                          "start": 24,
                          "end": 26,
                          "body": []
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "sourceType": "script"
          });
    });

    it('should parse "a << b << c"', () => {
        expect(parseScript('a << b << c', {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "start": 0,
            "end": 11,
            "body": [
              {
                "type": "ExpressionStatement",
                "start": 0,
                "end": 11,
                "expression": {
                  "type": "BinaryExpression",
                  "start": 0,
                  "end": 11,
                  "left": {
                    "type": "BinaryExpression",
                    "start": 0,
                    "end": 6,
                    "left": {
                      "type": "Identifier",
                      "start": 0,
                      "end": 1,
                      "name": "a"
                    },
                    "operator": "<<",
                    "right": {
                      "type": "Identifier",
                      "start": 5,
                      "end": 6,
                      "name": "b"
                    }
                  },
                  "operator": "<<",
                  "right": {
                    "type": "Identifier",
                    "start": 10,
                    "end": 11,
                    "name": "c"
                  }
                }
              }
            ],
            "sourceType": "script"
          });
    });

    it('should parse "class a {set(b) {};}"', () => {
        expect(parseScript('class a {set(b) {};}', {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "start": 0,
            "end": 20,
            "body": [
              {
                "type": "ClassDeclaration",
                "start": 0,
                "end": 20,
                "id": {
                  "type": "Identifier",
                  "start": 6,
                  "end": 7,
                  "name": "a"
                },
                "superClass": null,
                "body": {
                  "type": "ClassBody",
                  "start": 8,
                  "end": 20,
                  "body": [
                    {
                      "type": "MethodDefinition",
                      "start": 9,
                      "end": 18,
                      "computed": false,
                      "key": {
                        "type": "Identifier",
                        "start": 9,
                        "end": 12,
                        "name": "set"
                      },
                      "static": false,
                      "kind": "method",
                      "value": {
                        "type": "FunctionExpression",
                        "start": 12,
                        "end": 18,
                        "id": null,
                        "generator": false,
                        "expression": false,
                        "async": false,
                        "params": [
                          {
                            "type": "Identifier",
                            "start": 13,
                            "end": 14,
                            "name": "b"
                          }
                        ],
                        "body": {
                          "type": "BlockStatement",
                          "start": 16,
                          "end": 18,
                          "body": []
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "sourceType": "script"
          });
    });

    it('should parse "({ get a() { }, get a() { } })"', () => {
        expect(parseScript('({ get a() { }, get a() { } })', {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "start": 0,
            "end": 30,
            "body": [
              {
                "type": "ExpressionStatement",
                "start": 0,
                "end": 30,
                "expression": {
                  "type": "ObjectExpression",
                  "start": 1,
                  "end": 29,
                  "properties": [
                    {
                      "type": "Property",
                      "start": 3,
                      "end": 14,
                      "method": false,
                      "shorthand": false,
                      "computed": false,
                      "key": {
                        "type": "Identifier",
                        "start": 7,
                        "end": 8,
                        "name": "a"
                      },
                      "kind": "get",
                      "value": {
                        "type": "FunctionExpression",
                        "start": 8,
                        "end": 14,
                        "id": null,
                        "generator": false,
                        "expression": false,
                        "async": false,
                        "params": [],
                        "body": {
                          "type": "BlockStatement",
                          "start": 11,
                          "end": 14,
                          "body": []
                        }
                      }
                    },
                    {
                      "type": "Property",
                      "start": 16,
                      "end": 27,
                      "method": false,
                      "shorthand": false,
                      "computed": false,
                      "key": {
                        "type": "Identifier",
                        "start": 20,
                        "end": 21,
                        "name": "a"
                      },
                      "kind": "get",
                      "value": {
                        "type": "FunctionExpression",
                        "start": 21,
                        "end": 27,
                        "id": null,
                        "generator": false,
                        "expression": false,
                        "async": false,
                        "params": [],
                        "body": {
                          "type": "BlockStatement",
                          "start": 24,
                          "end": 27,
                          "body": []
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "sourceType": "script"
          });
    });

    it('should parse "/(?=.)*/;"', () => {
        expect(parseScript('/(?=.)*/;', {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "start": 0,
            "end": 9,
            "body": [
              {
                "type": "ExpressionStatement",
                "start": 0,
                "end": 9,
                "expression": {
                  "type": "Literal",
                  "start": 0,
                  "end": 8,
                  "value": /(?=.)*/,
                  "raw": "/(?=.)*/",
                  "regex": {
                    "pattern": "(?=.)*",
                    "flags": ""
                  }
                }
              }
            ],
            "sourceType": "script"
          });
    });

    it('should parse array rest spread with object', () => {
        expect(parseScript("(1, a['a'])()", {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "start": 0,
            "end": 13,
            "body": [
              {
                "type": "ExpressionStatement",
                "start": 0,
                "end": 13,
                "expression": {
                  "type": "CallExpression",
                  "start": 0,
                  "end": 13,
                  "callee": {
                    "type": "SequenceExpression",
                    "start": 1,
                    "end": 10,
                    "expressions": [
                      {
                        "type": "Literal",
                        "start": 1,
                        "end": 2,
                        "value": 1,
                        "raw": "1"
                      },
                      {
                        "type": "MemberExpression",
                        "start": 4,
                        "end": 10,
                        "object": {
                          "type": "Identifier",
                          "start": 4,
                          "end": 5,
                          "name": "a"
                        },
                        "property": {
                          "type": "Literal",
                          "start": 6,
                          "end": 9,
                          "value": "a",
                          "raw": "'a'"
                        },
                        "computed": true
                      }
                    ]
                  },
                  "arguments": []
                }
              }
            ],
            "sourceType": "script"
          });
    });

    it('should parse "var [{__proto__:a, __proto__:b}] = 1;"', () => {
        expect(parseScript('var [{__proto__:a, __proto__:b}] = 1;', {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "body": [
                {
                    "type": "VariableDeclaration",
                    "declarations": [
                        {
                            "type": "VariableDeclarator",
                            "init": {
                                "type": "Literal",
                                "value": 1,
                                "start": 35,
                                "end": 36,
                                "raw": "1"
                            },
                            "id": {
                                "type": "ArrayPattern",
                                "elements": [
                                    {
                                        "type": "ObjectPattern",
                                        "properties": [
                                            {
                                                "type": "Property",
                                                "kind": "init",
                                                "key": {
                                                    "type": "Identifier",
                                                    "name": "__proto__",
                                                    "start": 6,
                                                    "end": 15
                                                },
                                                "computed": false,
                                                "value": {
                                                    "type": "Identifier",
                                                    "name": "a",
                                                    "start": 16,
                                                    "end": 17
                                                },
                                                "method": false,
                                                "shorthand": false,
                                                "start": 6,
                                                "end": 17
                                            },
                                            {
                                                "type": "Property",
                                                "kind": "init",
                                                "key": {
                                                    "type": "Identifier",
                                                    "name": "__proto__",
                                                    "start": 19,
                                                    "end": 28
                                                },
                                                "computed": false,
                                                "value": {
                                                    "type": "Identifier",
                                                    "name": "b",
                                                    "start": 29,
                                                    "end": 30
                                                },
                                                "method": false,
                                                "shorthand": false,
                                                "start": 19,
                                                "end": 30
                                            }
                                        ],
                                        "start": 5,
                                        "end": 31
                                    }
                                ],
                                "start": 4,
                                "end": 32
                            },
                            "start": 4,
                            "end": 36
                        }
                    ],
                    "kind": "var",
                    "start": 0,
                    "end": 37
                }
            ],
            "sourceType": "script",
            "start": 0,
            "end": 37
        });
    });

    it('should parse "[a, {b: {c = 1}}] = d"', () => {
        expect(parseScript('[a, {b: {c = 1}}] = d', {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "start": 0,
            "end": 21,
            "body": [
              {
                "type": "ExpressionStatement",
                "start": 0,
                "end": 21,
                "expression": {
                  "type": "AssignmentExpression",
                  "start": 0,
                  "end": 21,
                  "operator": "=",
                  "left": {
                    "type": "ArrayPattern",
                    "start": 0,
                    "end": 17,
                    "elements": [
                      {
                        "type": "Identifier",
                        "start": 1,
                        "end": 2,
                        "name": "a"
                      },
                      {
                        "type": "ObjectPattern",
                        "start": 4,
                        "end": 16,
                        "properties": [
                          {
                            "type": "Property",
                            "start": 5,
                            "end": 15,
                            "method": false,
                            "shorthand": false,
                            "computed": false,
                            "key": {
                              "type": "Identifier",
                              "start": 5,
                              "end": 6,
                              "name": "b"
                            },
                            "value": {
                              "type": "ObjectPattern",
                              "start": 8,
                              "end": 15,
                              "properties": [
                                {
                                  "type": "Property",
                                  "start": 9,
                                  "end": 14,
                                  "method": false,
                                  "shorthand": true,
                                  "computed": false,
                                  "key": {
                                    "type": "Identifier",
                                    "start": 9,
                                    "end": 10,
                                    "name": "c"
                                  },
                                  "kind": "init",
                                  "value": {
                                    "type": "AssignmentPattern",
                                    "start": 9,
                                    "end": 14,
                                    "left": {
                                      "type": "Identifier",
                                      "start": 9,
                                      "end": 10,
                                      "name": "c"
                                    },
                                    "right": {
                                      "type": "Literal",
                                      "start": 13,
                                      "end": 14,
                                      "value": 1,
                                      "raw": "1"
                                    }
                                  }
                                }
                              ]
                            },
                            "kind": "init"
                          }
                        ]
                      }
                    ]
                  },
                  "right": {
                    "type": "Identifier",
                    "start": 20,
                    "end": 21,
                    "name": "d"
                  }
                }
              }
            ],
            "sourceType": "script"
          });
    });

    it('should parse "try {} catch ({a = 1}) {}""', () => {
        expect(parseScript('try {} catch ({a = 1}) {}', {
            ranges: true,
            locations: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "body": [
              {
                  "type": "TryStatement",
                  "block": {
                      "type": "BlockStatement",
                      "body": [],
                      "start": 4,
                      "end": 6,
                      "loc": {
                          "start": {
                              "line": 1,
                              "column": 4
                          },
                          "end": {
                              "line": 1,
                              "column": 6
                          }
                      }
                  },
                  "handler": {
                      "type": "CatchClause",
                      "param": {
                          "type": "ObjectPattern",
                          "properties": [
                              {
                                  "type": "Property",
                                  "kind": "init",
                                  "key": {
                                      "type": "Identifier",
                                      "name": "a",
                                      "start": 15,
                                      "end": 16,
                                      "loc": {
                                          "start": {
                                              "line": 1,
                                              "column": 15
                                          },
                                          "end": {
                                              "line": 1,
                                              "column": 16
                                          }
                                      }
                                  },
                                  "computed": false,
                                  "value": {
                                      "type": "AssignmentPattern",
                                      "left": {
                                          "type": "Identifier",
                                          "name": "a",
                                          "start": 15,
                                          "end": 16,
                                          "loc": {
                                              "start": {
                                                  "line": 1,
                                                  "column": 15
                                              },
                                              "end": {
                                                  "line": 1,
                                                  "column": 16
                                              }
                                          }
                                      },
                                      "right": {
                                          "type": "Literal",
                                          "value": 1,
                                          "start": 19,
                                          "end": 20,
                                          "loc": {
                                              "start": {
                                                  "line": 1,
                                                  "column": 19
                                              },
                                              "end": {
                                                  "line": 1,
                                                  "column": 20
                                              }
                                          },
                                          "raw": "1"
                                      },
                                      "start": 15,
                                      "end": 20,
                                      "loc": {
                                          "start": {
                                              "line": 1,
                                              "column": 15
                                          },
                                          "end": {
                                              "line": 1,
                                              "column": 20
                                          }
                                      }
                                  },
                                  "method": false,
                                  "shorthand": true,
                                  "start": 15,
                                  "end": 20,
                                  "loc": {
                                      "start": {
                                          "line": 1,
                                          "column": 15
                                      },
                                      "end": {
                                          "line": 1,
                                          "column": 20
                                      }
                                  }
                              }
                          ],
                          "start": 7,
                          "end": 21,
                          "loc": {
                              "start": {
                                  "line": 1,
                                  "column": 7
                              },
                              "end": {
                                  "line": 1,
                                  "column": 21
                              }
                          }
                      },
                      "body": {
                          "type": "BlockStatement",
                          "body": [],
                          "start": 23,
                          "end": 25,
                          "loc": {
                              "start": {
                                  "line": 1,
                                  "column": 23
                              },
                              "end": {
                                  "line": 1,
                                  "column": 25
                              }
                          }
                      },
                      "start": 7,
                      "end": 25,
                      "loc": {
                          "start": {
                              "line": 1,
                              "column": 7
                          },
                          "end": {
                              "line": 1,
                              "column": 25
                          }
                      }
                  },
                  "finalizer": null,
                  "start": 0,
                  "end": 25,
                  "loc": {
                      "start": {
                          "line": 1,
                          "column": 0
                      },
                      "end": {
                          "line": 1,
                          "column": 25
                      }
                  }
              }
          ],
          "sourceType": "script",
          "start": 0,
          "end": 25,
          "loc": {
              "start": {
                  "line": 1,
                  "column": 0
              },
              "end": {
                  "line": 1,
                  "column": 25
              }
          }
      });
    });

    it('should parse "function a([a=1]) {}"', () => {
        expect(parseScript('function a([a=1]) {}', {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "start": 0,
            "end": 20,
            "body": [
              {
                "type": "FunctionDeclaration",
                "start": 0,
                "end": 20,
                "id": {
                  "type": "Identifier",
                  "start": 9,
                  "end": 10,
                  "name": "a"
                },
                "generator": false,
                "expression": false,
                "async": false,
                "params": [
                  {
                    "type": "ArrayPattern",
                    "start": 11,
                    "end": 16,
                    "elements": [
                      {
                        "type": "AssignmentPattern",
                        "start": 12,
                        "end": 15,
                        "left": {
                          "type": "Identifier",
                          "start": 12,
                          "end": 13,
                          "name": "a"
                        },
                        "right": {
                          "type": "Literal",
                          "start": 14,
                          "end": 15,
                          "value": 1,
                          "raw": "1"
                        }
                      }
                    ]
                  }
                ],
                "body": {
                  "type": "BlockStatement",
                  "start": 18,
                  "end": 20,
                  "body": []
                }
              }
            ],
            "sourceType": "script"
          });
    });

    it('should parse "(...a) => 0"', () => {
        expect(parseScript('(...a) => 0', {
            ranges: true,
            raw: true
        })).to.eql({
            "type": "Program",
            "start": 0,
            "end": 11,
            "body": [
              {
                "type": "ExpressionStatement",
                "start": 0,
                "end": 11,
                "expression": {
                  "type": "ArrowFunctionExpression",
                  "start": 0,
                  "end": 11,
                  "id": null,
                  "generator": false,
                  "expression": true,
                  "async": false,
                  "params": [
                    {
                      "type": "RestElement",
                      "start": 1,
                      "end": 5,
                      "argument": {
                        "type": "Identifier",
                        "start": 4,
                        "end": 5,
                        "name": "a"
                      }
                    }
                  ],
                  "body": {
                    "type": "Literal",
                    "start": 10,
                    "end": 11,
                    "value": 0,
                    "raw": "0"
                  }
                }
              }
            ],
            "sourceType": "script"
          });
    });

   
    it('should parse array rest spread with object', () => {
            expect(parseScript('var [...{length}] = [ 1, 2, 3];', {
                ranges: true,
                locations: true,
                raw: true
            })).to.eql({
              "type": "Program",
              "body": [
                  {
                      "type": "VariableDeclaration",
                      "declarations": [
                          {
                              "type": "VariableDeclarator",
                              "init": {
                                  "type": "ArrayExpression",
                                  "elements": [
                                      {
                                          "type": "Literal",
                                          "value": 1,
                                          "start": 22,
                                          "end": 23,
                                          "loc": {
                                              "start": {
                                                  "line": 1,
                                                  "column": 22
                                              },
                                              "end": {
                                                  "line": 1,
                                                  "column": 23
                                              }
                                          },
                                          "raw": "1"
                                      },
                                      {
                                          "type": "Literal",
                                          "value": 2,
                                          "start": 25,
                                          "end": 26,
                                          "loc": {
                                              "start": {
                                                  "line": 1,
                                                  "column": 25
                                              },
                                              "end": {
                                                  "line": 1,
                                                  "column": 26
                                              }
                                          },
                                          "raw": "2"
                                      },
                                      {
                                          "type": "Literal",
                                          "value": 3,
                                          "start": 28,
                                          "end": 29,
                                          "loc": {
                                              "start": {
                                                  "line": 1,
                                                  "column": 28
                                              },
                                              "end": {
                                                  "line": 1,
                                                  "column": 29
                                              }
                                          },
                                          "raw": "3"
                                      }
                                  ],
                                  "start": 20,
                                  "end": 30,
                                  "loc": {
                                      "start": {
                                          "line": 1,
                                          "column": 20
                                      },
                                      "end": {
                                          "line": 1,
                                          "column": 30
                                      }
                                  }
                              },
                              "id": {
                                  "type": "ArrayPattern",
                                  "elements": [
                                      {
                                          "type": "RestElement",
                                          "argument": {
                                              "type": "ObjectPattern",
                                              "properties": [
                                                  {
                                                      "type": "Property",
                                                      "kind": "init",
                                                      "key": {
                                                          "type": "Identifier",
                                                          "name": "length",
                                                          "start": 9,
                                                          "end": 15,
                                                          "loc": {
                                                              "start": {
                                                                  "line": 1,
                                                                  "column": 9
                                                              },
                                                              "end": {
                                                                  "line": 1,
                                                                  "column": 15
                                                              }
                                                          }
                                                      },
                                                      "computed": false,
                                                      "value": {
                                                          "type": "Identifier",
                                                          "name": "length",
                                                          "start": 9,
                                                          "end": 15,
                                                          "loc": {
                                                              "start": {
                                                                  "line": 1,
                                                                  "column": 9
                                                              },
                                                              "end": {
                                                                  "line": 1,
                                                                  "column": 15
                                                              }
                                                          }
                                                      },
                                                      "method": false,
                                                      "shorthand": true,
                                                      "start": 9,
                                                      "end": 15,
                                                      "loc": {
                                                          "start": {
                                                              "line": 1,
                                                              "column": 9
                                                          },
                                                          "end": {
                                                              "line": 1,
                                                              "column": 15
                                                          }
                                                      }
                                                  }
                                              ],
                                              "start": 5,
                                              "end": 16,
                                              "loc": {
                                                  "start": {
                                                      "line": 1,
                                                      "column": 5
                                                  },
                                                  "end": {
                                                      "line": 1,
                                                      "column": 16
                                                  }
                                              }
                                          },
                                          "start": 5,
                                          "end": 16,
                                          "loc": {
                                              "start": {
                                                  "line": 1,
                                                  "column": 5
                                              },
                                              "end": {
                                                  "line": 1,
                                                  "column": 16
                                              }
                                          }
                                      }
                                  ],
                                  "start": 4,
                                  "end": 17,
                                  "loc": {
                                      "start": {
                                          "line": 1,
                                          "column": 4
                                      },
                                      "end": {
                                          "line": 1,
                                          "column": 17
                                      }
                                  }
                              },
                              "start": 4,
                              "end": 30,
                              "loc": {
                                  "start": {
                                      "line": 1,
                                      "column": 4
                                  },
                                  "end": {
                                      "line": 1,
                                      "column": 30
                                  }
                              }
                          }
                      ],
                      "kind": "var",
                      "start": 0,
                      "end": 31,
                      "loc": {
                          "start": {
                              "line": 1,
                              "column": 0
                          },
                          "end": {
                              "line": 1,
                              "column": 31
                          }
                      }
                  }
              ],
              "sourceType": "script",
              "start": 0,
              "end": 31,
              "loc": {
                  "start": {
                      "line": 1,
                      "column": 0
                  },
                  "end": {
                      "line": 1,
                      "column": 31
                  }
              }
          });
        });
    
    
    
        it('should parse "(function* () { yield *a })"', () => {
            expect(parseScript('(function* () { yield *a })', {
                ranges: true,
                raw: true
            })).to.eql({
                "type": "Program",
                "start": 0,
                "end": 27,
                "body": [
                  {
                    "type": "ExpressionStatement",
                    "start": 0,
                    "end": 27,
                    "expression": {
                      "type": "FunctionExpression",
                      "start": 1,
                      "end": 26,
                      "id": null,
                      "generator": true,
                      "expression": false,
                      "async": false,
                      "params": [],
                      "body": {
                        "type": "BlockStatement",
                        "start": 14,
                        "end": 26,
                        "body": [
                          {
                            "type": "ExpressionStatement",
                            "start": 16,
                            "end": 24,
                            "expression": {
                              "type": "YieldExpression",
                              "start": 16,
                              "end": 24,
                              "delegate": true,
                              "argument": {
                                "type": "Identifier",
                                "start": 23,
                                "end": 24,
                                "name": "a"
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                ],
                "sourceType": "script"
              });
        });
    
        it('should parse "({ get: 1 })"', () => {
            expect(parseScript('({ get: 1 })', {
                ranges: true,
                raw: true
            })).to.eql({
                "type": "Program",
                "start": 0,
                "end": 12,
                "body": [
                  {
                    "type": "ExpressionStatement",
                    "start": 0,
                    "end": 12,
                    "expression": {
                      "type": "ObjectExpression",
                      "start": 1,
                      "end": 11,
                      "properties": [
                        {
                          "type": "Property",
                          "start": 3,
                          "end": 9,
                          "method": false,
                          "shorthand": false,
                          "computed": false,
                          "key": {
                            "type": "Identifier",
                            "start": 3,
                            "end": 6,
                            "name": "get"
                          },
                          "value": {
                            "type": "Literal",
                            "start": 8,
                            "end": 9,
                            "value": 1,
                            "raw": "1"
                          },
                          "kind": "init"
                        }
                      ]
                    }
                  }
                ],
                "sourceType": "script"
              });
        });
    
        it('should parse "!a"', () => {
            expect(parseScript('!a', {
                ranges: true,
                raw: true
            })).to.eql({
                "type": "Program",
                "start": 0,
                "end": 2,
                "body": [
                  {
                    "type": "ExpressionStatement",
                    "start": 0,
                    "end": 2,
                    "expression": {
                      "type": "UnaryExpression",
                      "start": 0,
                      "end": 2,
                      "operator": "!",
                      "prefix": true,
                      "argument": {
                        "type": "Identifier",
                        "start": 1,
                        "end": 2,
                        "name": "a"
                      }
                    }
                  }
                ],
                "sourceType": "script"
              });
        });
    
        it('should parse ""', () => {
            expect(parseScript(`{;}
                  a();
                  {};
                  {
                      {};
                  };
                  b();
                  {}`, {
                ranges: true,
                raw: true
            })).to.eql({
                "type": "Program",
                "start": 0,
                "end": 159,
                "body": [
                  {
                    "type": "BlockStatement",
                    "start": 0,
                    "end": 3,
                    "body": [
                      {
                        "type": "EmptyStatement",
                        "start": 1,
                        "end": 2
                      }
                    ]
                  },
                  {
                    "type": "ExpressionStatement",
                    "start": 22,
                    "end": 26,
                    "expression": {
                      "type": "CallExpression",
                      "start": 22,
                      "end": 25,
                      "callee": {
                        "type": "Identifier",
                        "start": 22,
                        "end": 23,
                        "name": "a"
                      },
                      "arguments": []
                    }
                  },
                  {
                    "type": "BlockStatement",
                    "start": 45,
                    "end": 47,
                    "body": []
                  },
                  {
                    "type": "EmptyStatement",
                    "start": 47,
                    "end": 48
                  },
                  {
                    "type": "BlockStatement",
                    "start": 67,
                    "end": 114,
                    "body": [
                      {
                        "type": "BlockStatement",
                        "start": 91,
                        "end": 93,
                        "body": []
                      },
                      {
                        "type": "EmptyStatement",
                        "start": 93,
                        "end": 94
                      }
                    ]
                  },
                  {
                    "type": "EmptyStatement",
                    "start": 114,
                    "end": 115
                  },
                  {
                    "type": "ExpressionStatement",
                    "start": 134,
                    "end": 138,
                    "expression": {
                      "type": "CallExpression",
                      "start": 134,
                      "end": 137,
                      "callee": {
                        "type": "Identifier",
                        "start": 134,
                        "end": 135,
                        "name": "b"
                      },
                      "arguments": []
                    }
                  },
                  {
                    "type": "BlockStatement",
                    "start": 157,
                    "end": 159,
                    "body": []
                  }
                ],
                "sourceType": "script"
              });
        });
    
        it('should parse "({a: b = c = 1} = 2)"', () => {
            expect(parseScript('({a: b = c = 1} = 2)', {
                ranges: true,
                raw: true
            })).to.eql({
                "type": "Program",
                "start": 0,
                "end": 20,
                "body": [
                  {
                    "type": "ExpressionStatement",
                    "start": 0,
                    "end": 20,
                    "expression": {
                      "type": "AssignmentExpression",
                      "start": 1,
                      "end": 19,
                      "operator": "=",
                      "left": {
                        "type": "ObjectPattern",
                        "start": 1,
                        "end": 15,
                        "properties": [
                          {
                            "type": "Property",
                            "start": 2,
                            "end": 14,
                            "method": false,
                            "shorthand": false,
                            "computed": false,
                            "key": {
                              "type": "Identifier",
                              "start": 2,
                              "end": 3,
                              "name": "a"
                            },
                            "value": {
                              "type": "AssignmentPattern",
                              "start": 5,
                              "end": 14,
                              "left": {
                                "type": "Identifier",
                                "start": 5,
                                "end": 6,
                                "name": "b"
                              },
                              "right": {
                                "type": "AssignmentExpression",
                                "start": 9,
                                "end": 14,
                                "operator": "=",
                                "left": {
                                  "type": "Identifier",
                                  "start": 9,
                                  "end": 10,
                                  "name": "c"
                                },
                                "right": {
                                  "type": "Literal",
                                  "start": 13,
                                  "end": 14,
                                  "value": 1,
                                  "raw": "1"
                                }
                              }
                            },
                            "kind": "init"
                          }
                        ]
                      },
                      "right": {
                        "type": "Literal",
                        "start": 18,
                        "end": 19,
                        "value": 2,
                        "raw": "2"
                      }
                    }
                  }
                ],
                "sourceType": "script"
              });
        });
    
        it('should parse "function *a(){yield ++a;}"', () => {
            expect(parseScript('function *a(){yield ++a;}', {
                ranges: true,
                raw: true
            })).to.eql({
                "type": "Program",
                "start": 0,
                "end": 25,
                "body": [
                  {
                    "type": "FunctionDeclaration",
                    "start": 0,
                    "end": 25,
                    "id": {
                      "type": "Identifier",
                      "start": 10,
                      "end": 11,
                      "name": "a"
                    },
                    "generator": true,
                    "expression": false,
                    "async": false,
                    "params": [],
                    "body": {
                      "type": "BlockStatement",
                      "start": 13,
                      "end": 25,
                      "body": [
                        {
                          "type": "ExpressionStatement",
                          "start": 14,
                          "end": 24,
                          "expression": {
                            "type": "YieldExpression",
                            "start": 14,
                            "end": 23,
                            "delegate": false,
                            "argument": {
                              "type": "UpdateExpression",
                              "start": 20,
                              "end": 23,
                              "operator": "++",
                              "prefix": true,
                              "argument": {
                                "type": "Identifier",
                                "start": 22,
                                "end": 23,
                                "name": "a"
                              }
                            }
                          }
                        }
                      ]
                    }
                  }
                ],
                "sourceType": "script"
              });
        });
        it('should parse "a && (() => {});"', () => {
            expect(parseScript('a && (() => {});', {
                ranges: true,
                raw: true
            })).to.eql({
                "type": "Program",
                "start": 0,
                "end": 16,
                "body": [
                  {
                    "type": "ExpressionStatement",
                    "start": 0,
                    "end": 16,
                    "expression": {
                      "type": "LogicalExpression",
                      "start": 0,
                      "end": 15,
                      "left": {
                        "type": "Identifier",
                        "start": 0,
                        "end": 1,
                        "name": "a"
                      },
                      "operator": "&&",
                      "right": {
                        "type": "ArrowFunctionExpression",
                        "start": 6,
                        "end": 14,
                        "id": null,
                        "generator": false,
                        "expression": false,
                        "async": false,
                        "params": [],
                        "body": {
                          "type": "BlockStatement",
                          "start": 12,
                          "end": 14,
                          "body": []
                        }
                      }
                    }
                  }
                ],
                "sourceType": "script"
              });
        });
    
        it('should parse "[...a[1]] = 2;"', () => {
            expect(parseScript('[...a[1]] = 2;', {
                ranges: true,
                raw: true
            })).to.eql({
                "type": "Program",
                "start": 0,
                "end": 14,
                "body": [
                  {
                    "type": "ExpressionStatement",
                    "start": 0,
                    "end": 14,
                    "expression": {
                      "type": "AssignmentExpression",
                      "start": 0,
                      "end": 13,
                      "operator": "=",
                      "left": {
                        "type": "ArrayPattern",
                        "start": 0,
                        "end": 9,
                        "elements": [
                          {
                            "type": "RestElement",
                            "start": 1,
                            "end": 8,
                            "argument": {
                              "type": "MemberExpression",
                              "start": 4,
                              "end": 8,
                              "object": {
                                "type": "Identifier",
                                "start": 4,
                                "end": 5,
                                "name": "a"
                              },
                              "property": {
                                "type": "Literal",
                                "start": 6,
                                "end": 7,
                                "value": 1,
                                "raw": "1"
                              },
                              "computed": true
                            }
                          }
                        ]
                      },
                      "right": {
                        "type": "Literal",
                        "start": 12,
                        "end": 13,
                        "value": 2,
                        "raw": "2"
                      }
                    }
                  }
                ],
                "sourceType": "script"
              });
        });
    
        it('should parse "function eval() { function a() { "use strict" } }"', () => {
            expect(parseScript('function eval() { function a() { "use strict" } }', {
                ranges: true,
                raw: true
            })).to.eql({
                "type": "Program",
                "start": 0,
                "end": 49,
                "body": [
                  {
                    "type": "FunctionDeclaration",
                    "start": 0,
                    "end": 49,
                    "id": {
                      "type": "Identifier",
                      "start": 9,
                      "end": 13,
                      "name": "eval"
                    },
                    "generator": false,
                    "expression": false,
                    "async": false,
                    "params": [],
                    "body": {
                      "type": "BlockStatement",
                      "start": 16,
                      "end": 49,
                      "body": [
                        {
                          "type": "FunctionDeclaration",
                          "start": 18,
                          "end": 47,
                          "id": {
                            "type": "Identifier",
                            "start": 27,
                            "end": 28,
                            "name": "a"
                          },
                          "generator": false,
                          "expression": false,
                          "async": false,
                          "params": [],
                          "body": {
                            "type": "BlockStatement",
                            "start": 31,
                            "end": 47,
                            "body": [
                              {
                                "type": "ExpressionStatement",
                                "start": 33,
                                "end": 45,
                                "expression": {
                                  "type": "Literal",
                                  "start": 33,
                                  "end": 45,
                                  "value": "use strict",
                                  "raw": "\"use strict\""
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                ],
                "sourceType": "script"
              });
        });
        it('should parse ""', () => {
            expect(parseScript(`(function () {
                    var a = {
                        '1e2000': 1
                    };
                }());`, {
                ranges: true,
                raw: true
            })).to.eql({
                "type": "Program",
                "start": 0,
                "end": 125,
                "body": [
                  {
                    "type": "ExpressionStatement",
                    "start": 0,
                    "end": 125,
                    "expression": {
                      "type": "CallExpression",
                      "start": 1,
                      "end": 123,
                      "callee": {
                        "type": "FunctionExpression",
                        "start": 1,
                        "end": 121,
                        "id": null,
                        "generator": false,
                        "expression": false,
                        "async": false,
                        "params": [],
                        "body": {
                          "type": "BlockStatement",
                          "start": 13,
                          "end": 121,
                          "body": [
                            {
                              "type": "VariableDeclaration",
                              "start": 35,
                              "end": 103,
                              "declarations": [
                                {
                                  "type": "VariableDeclarator",
                                  "start": 39,
                                  "end": 102,
                                  "id": {
                                    "type": "Identifier",
                                    "start": 39,
                                    "end": 40,
                                    "name": "a"
                                  },
                                  "init": {
                                    "type": "ObjectExpression",
                                    "start": 43,
                                    "end": 102,
                                    "properties": [
                                      {
                                        "type": "Property",
                                        "start": 69,
                                        "end": 80,
                                        "method": false,
                                        "shorthand": false,
                                        "computed": false,
                                        "key": {
                                          "type": "Literal",
                                          "start": 69,
                                          "end": 77,
                                          "value": "1e2000",
                                          "raw": "'1e2000'"
                                        },
                                        "value": {
                                          "type": "Literal",
                                          "start": 79,
                                          "end": 80,
                                          "value": 1,
                                          "raw": "1"
                                        },
                                        "kind": "init"
                                      }
                                    ]
                                  }
                                }
                              ],
                              "kind": "var"
                            }
                          ]
                        }
                      },
                      "arguments": []
                    }
                  }
                ],
                "sourceType": "script"
              });
        });
    
        it('should parse "/[a-c]/i"', () => {
            expect(parseScript('/[a-c]/i', {
                ranges: false
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "Literal",
                        "value": /[a-c]/i,
                        "regex": {
                            "pattern": "[a-c]",
                            "flags": "i"
                        }
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse ""', () => {
            expect(parseScript(`(function() {
                    a(), 1, 2;
                }());`, {
                ranges: true,
                raw: true
            })).to.eql({
                "type": "Program",
                "start": 0,
                "end": 66,
                "body": [
                  {
                    "type": "ExpressionStatement",
                    "start": 0,
                    "end": 66,
                    "expression": {
                      "type": "CallExpression",
                      "start": 1,
                      "end": 64,
                      "callee": {
                        "type": "FunctionExpression",
                        "start": 1,
                        "end": 62,
                        "id": null,
                        "generator": false,
                        "expression": false,
                        "async": false,
                        "params": [],
                        "body": {
                          "type": "BlockStatement",
                          "start": 12,
                          "end": 62,
                          "body": [
                            {
                              "type": "ExpressionStatement",
                              "start": 34,
                              "end": 44,
                              "expression": {
                                "type": "SequenceExpression",
                                "start": 34,
                                "end": 43,
                                "expressions": [
                                  {
                                    "type": "CallExpression",
                                    "start": 34,
                                    "end": 37,
                                    "callee": {
                                      "type": "Identifier",
                                      "start": 34,
                                      "end": 35,
                                      "name": "a"
                                    },
                                    "arguments": []
                                  },
                                  {
                                    "type": "Literal",
                                    "start": 39,
                                    "end": 40,
                                    "value": 1,
                                    "raw": "1"
                                  },
                                  {
                                    "type": "Literal",
                                    "start": 42,
                                    "end": 43,
                                    "value": 2,
                                    "raw": "2"
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      "arguments": []
                    }
                  }
                ],
                "sourceType": "script"
              });
        });
        it('should parse ""', () => {
            expect(parseScript(`if (a) {
                    b();
                } else if (c) {
                    d();
                } else if (e) {
                    f();
                }
                
                if (a) {
                    b();
                } else if (c) {
                    d();
                } else if (e) {
                    f();
                } else {
                    g();
                }`, {
                ranges: true,
                raw: true
            })).to.eql({
                "type": "Program",
                "start": 0,
                "end": 414,
                "body": [
                  {
                    "type": "IfStatement",
                    "start": 0,
                    "end": 165,
                    "test": {
                      "type": "Identifier",
                      "start": 4,
                      "end": 5,
                      "name": "a"
                    },
                    "consequent": {
                      "type": "BlockStatement",
                      "start": 7,
                      "end": 51,
                      "body": [
                        {
                          "type": "ExpressionStatement",
                          "start": 29,
                          "end": 33,
                          "expression": {
                            "type": "CallExpression",
                            "start": 29,
                            "end": 32,
                            "callee": {
                              "type": "Identifier",
                              "start": 29,
                              "end": 30,
                              "name": "b"
                            },
                            "arguments": []
                          }
                        }
                      ]
                    },
                    "alternate": {
                      "type": "IfStatement",
                      "start": 57,
                      "end": 165,
                      "test": {
                        "type": "Identifier",
                        "start": 61,
                        "end": 62,
                        "name": "c"
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "start": 64,
                        "end": 108,
                        "body": [
                          {
                            "type": "ExpressionStatement",
                            "start": 86,
                            "end": 90,
                            "expression": {
                              "type": "CallExpression",
                              "start": 86,
                              "end": 89,
                              "callee": {
                                "type": "Identifier",
                                "start": 86,
                                "end": 87,
                                "name": "d"
                              },
                              "arguments": []
                            }
                          }
                        ]
                      },
                      "alternate": {
                        "type": "IfStatement",
                        "start": 114,
                        "end": 165,
                        "test": {
                          "type": "Identifier",
                          "start": 118,
                          "end": 119,
                          "name": "e"
                        },
                        "consequent": {
                          "type": "BlockStatement",
                          "start": 121,
                          "end": 165,
                          "body": [
                            {
                              "type": "ExpressionStatement",
                              "start": 143,
                              "end": 147,
                              "expression": {
                                "type": "CallExpression",
                                "start": 143,
                                "end": 146,
                                "callee": {
                                  "type": "Identifier",
                                  "start": 143,
                                  "end": 144,
                                  "name": "f"
                                },
                                "arguments": []
                              }
                            }
                          ]
                        },
                        "alternate": null
                      }
                    }
                  },
                  {
                    "type": "IfStatement",
                    "start": 199,
                    "end": 414,
                    "test": {
                      "type": "Identifier",
                      "start": 203,
                      "end": 204,
                      "name": "a"
                    },
                    "consequent": {
                      "type": "BlockStatement",
                      "start": 206,
                      "end": 250,
                      "body": [
                        {
                          "type": "ExpressionStatement",
                          "start": 228,
                          "end": 232,
                          "expression": {
                            "type": "CallExpression",
                            "start": 228,
                            "end": 231,
                            "callee": {
                              "type": "Identifier",
                              "start": 228,
                              "end": 229,
                              "name": "b"
                            },
                            "arguments": []
                          }
                        }
                      ]
                    },
                    "alternate": {
                      "type": "IfStatement",
                      "start": 256,
                      "end": 414,
                      "test": {
                        "type": "Identifier",
                        "start": 260,
                        "end": 261,
                        "name": "c"
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "start": 263,
                        "end": 307,
                        "body": [
                          {
                            "type": "ExpressionStatement",
                            "start": 285,
                            "end": 289,
                            "expression": {
                              "type": "CallExpression",
                              "start": 285,
                              "end": 288,
                              "callee": {
                                "type": "Identifier",
                                "start": 285,
                                "end": 286,
                                "name": "d"
                              },
                              "arguments": []
                            }
                          }
                        ]
                      },
                      "alternate": {
                        "type": "IfStatement",
                        "start": 313,
                        "end": 414,
                        "test": {
                          "type": "Identifier",
                          "start": 317,
                          "end": 318,
                          "name": "e"
                        },
                        "consequent": {
                          "type": "BlockStatement",
                          "start": 320,
                          "end": 364,
                          "body": [
                            {
                              "type": "ExpressionStatement",
                              "start": 342,
                              "end": 346,
                              "expression": {
                                "type": "CallExpression",
                                "start": 342,
                                "end": 345,
                                "callee": {
                                  "type": "Identifier",
                                  "start": 342,
                                  "end": 343,
                                  "name": "f"
                                },
                                "arguments": []
                              }
                            }
                          ]
                        },
                        "alternate": {
                          "type": "BlockStatement",
                          "start": 370,
                          "end": 414,
                          "body": [
                            {
                              "type": "ExpressionStatement",
                              "start": 392,
                              "end": 396,
                              "expression": {
                                "type": "CallExpression",
                                "start": 392,
                                "end": 395,
                                "callee": {
                                  "type": "Identifier",
                                  "start": 392,
                                  "end": 393,
                                  "name": "g"
                                },
                                "arguments": []
                              }
                            }
                          ]
                        }
                      }
                    }
                  }
                ],
                "sourceType": "script"
              });
        });
    
        it('should parse "var a = class b extends 1{}"', () => {
            expect(parseScript('var a = class b extends 1{}', {
                ranges: true,
                raw: true
            })).to.eql({
                "type": "Program",
                "start": 0,
                "end": 27,
                "body": [
                  {
                    "type": "VariableDeclaration",
                    "start": 0,
                    "end": 27,
                    "declarations": [
                      {
                        "type": "VariableDeclarator",
                        "start": 4,
                        "end": 27,
                        "id": {
                          "type": "Identifier",
                          "start": 4,
                          "end": 5,
                          "name": "a"
                        },
                        "init": {
                          "type": "ClassExpression",
                          "start": 8,
                          "end": 27,
                          "id": {
                            "type": "Identifier",
                            "start": 14,
                            "end": 15,
                            "name": "b"
                          },
                          "superClass": {
                            "type": "Literal",
                            "start": 24,
                            "end": 25,
                            "value": 1,
                            "raw": "1"
                          },
                          "body": {
                            "type": "ClassBody",
                            "start": 25,
                            "end": 27,
                            "body": []
                          }
                        }
                      }
                    ],
                    "kind": "var"
                  }
                ],
                "sourceType": "script"
              });
        });
    
        it('should parse "(function () { }(1,2,3))"', () => {
            expect(parseScript('(function () { }(1,2,3))', {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "CallExpression",
                        "callee": {
                            "type": "FunctionExpression",
                            "id": null,
                            "params": [],
                            "body": {
                                "type": "BlockStatement",
                                "body": []
                            },
                            "generator": false,
                            "expression": false,
                            "async": false
                        },
                        "arguments": [{
                                "type": "Literal",
                                "value": 1,
                                "raw": "1"
                            },
                            {
                                "type": "Literal",
                                "value": 2,
                                "raw": "2"
                            },
                            {
                                "type": "Literal",
                                "value": 3,
                                "raw": "3"
                            }
                        ]
                    }
                }],
                "sourceType": "script"
            });
        });
        it('should parse "a: while (true) { break a }"', () => {
            expect(parseScript('a: while (true) { break a }', {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "LabeledStatement",
                    "label": {
                        "type": "Identifier",
                        "name": "a"
                    },
                    "body": {
                        "type": "WhileStatement",
                        "test": {
                            "type": "Literal",
                            "value": true,
                            "raw": "true"
                        },
                        "body": {
                            "type": "BlockStatement",
                            "body": [{
                                "type": "BreakStatement",
                                "label": {
                                    "type": "Identifier",
                                    "name": "a"
                                }
                            }]
                        }
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse ""', () => {
            expect(parseScript(`/*a
                  b*/ 1`, {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1"
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse ""', () => {
            expect(parseScript(`function a() {
                    if (false) {
                        // because test is not referenced
                        var a = 1;
                    }
                }`, {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "FunctionDeclaration",
                    "id": {
                        "type": "Identifier",
                        "name": "a"
                    },
                    "params": [],
                    "body": {
                        "type": "BlockStatement",
                        "body": [{
                            "type": "IfStatement",
                            "test": {
                                "type": "Literal",
                                "value": false,
                                "raw": "false"
                            },
                            "consequent": {
                                "type": "BlockStatement",
                                "body": [{
                                    "type": "VariableDeclaration",
                                    "declarations": [{
                                        "type": "VariableDeclarator",
                                        "id": {
                                            "type": "Identifier",
                                            "name": "a"
                                        },
                                        "init": {
                                            "type": "Literal",
                                            "value": 1,
                                            "raw": "1"
                                        }
                                    }],
                                    "kind": "var"
                                }]
                            },
                            "alternate": null
                        }]
                    },
                    "generator": false,
                    "expression": false,
                    "async": false
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse ""', () => {
            expect(parseScript(`var a;
                  if (b()) {
                      new a(1);
                  } else {
                      a(2);
                  }`, {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                        "type": "VariableDeclaration",
                        "declarations": [{
                            "type": "VariableDeclarator",
                            "id": {
                                "type": "Identifier",
                                "name": "a"
                            },
                            "init": null
                        }],
                        "kind": "var"
                    },
                    {
                        "type": "IfStatement",
                        "test": {
                            "type": "CallExpression",
                            "callee": {
                                "type": "Identifier",
                                "name": "b"
                            },
                            "arguments": []
                        },
                        "consequent": {
                            "type": "BlockStatement",
                            "body": [{
                                "type": "ExpressionStatement",
                                "expression": {
                                    "type": "NewExpression",
                                    "callee": {
                                        "type": "Identifier",
                                        "name": "a"
                                    },
                                    "arguments": [{
                                        "type": "Literal",
                                        "value": 1,
                                        "raw": "1"
                                    }]
                                }
                            }]
                        },
                        "alternate": {
                            "type": "BlockStatement",
                            "body": [{
                                "type": "ExpressionStatement",
                                "expression": {
                                    "type": "CallExpression",
                                    "callee": {
                                        "type": "Identifier",
                                        "name": "a"
                                    },
                                    "arguments": [{
                                        "type": "Literal",
                                        "value": 2,
                                        "raw": "2"
                                    }]
                                }
                            }]
                        }
                    }
                ],
                "sourceType": "script"
            });
        });
    
        it('should parse "var A\u{42}C;"', () => {
            expect(parseScript('var A\u{42}C;', {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "VariableDeclaration",
                    "declarations": [{
                        "type": "VariableDeclarator",
                        "id": {
                            "type": "Identifier",
                            "name": "ABC"
                        },
                        "init": null
                    }],
                    "kind": "var"
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "do continue; while (true)  // should be empty statement"', () => {
            expect(parseScript('do continue; while (true)  // should be empty statement', {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "DoWhileStatement",
                    "body": {
                        "type": "ContinueStatement",
                        "label": null
                    },
                    "test": {
                        "type": "Literal",
                        "value": true,
                        "raw": "true"
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "function a({ b, c }){}"', () => {
            expect(parseScript('function a({ b, c }){}', {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "FunctionDeclaration",
                    "id": {
                        "type": "Identifier",
                        "name": "a"
                    },
                    "params": [{
                        "type": "ObjectPattern",
                        "properties": [{
                                "type": "Property",
                                "key": {
                                    "type": "Identifier",
                                    "name": "b"
                                },
                                "computed": false,
                                "value": {
                                    "type": "Identifier",
                                    "name": "b"
                                },
                                "kind": "init",
                                "method": false,
                                "shorthand": true
                            },
                            {
                                "type": "Property",
                                "key": {
                                    "type": "Identifier",
                                    "name": "c"
                                },
                                "computed": false,
                                "value": {
                                    "type": "Identifier",
                                    "name": "c"
                                },
                                "kind": "init",
                                "method": false,
                                "shorthand": true
                            }
                        ]
                    }],
                    "body": {
                        "type": "BlockStatement",
                        "body": []
                    },
                    "generator": false,
                    "expression": false,
                    "async": false
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "({2e308:1})"', () => {
            expect(parseScript('({2e308:1})', {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "ObjectExpression",
                        "properties": [{
                            "type": "Property",
                            "key": {
                                "type": "Literal",
                                "value": Infinity,
                                "raw": "2e308"
                            },
                            "computed": false,
                            "value": {
                                "type": "Literal",
                                "value": 1,
                                "raw": "1"
                            },
                            "kind": "init",
                            "method": false,
                            "shorthand": false
                        }]
                    }
                }],
                "sourceType": "script"
            });
        });
        it('should parse ""', () => {
            expect(parseScript(`(function () {
                    var a;
                    eval('a');
                    function b() {
                        a = a += 1;  // eval makes dynamic
                    }
                }());`, {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "CallExpression",
                        "callee": {
                            "type": "FunctionExpression",
                            "id": null,
                            "params": [],
                            "body": {
                                "type": "BlockStatement",
                                "body": [{
                                        "type": "VariableDeclaration",
                                        "declarations": [{
                                            "type": "VariableDeclarator",
                                            "id": {
                                                "type": "Identifier",
                                                "name": "a"
                                            },
                                            "init": null
                                        }],
                                        "kind": "var"
                                    },
                                    {
                                        "type": "ExpressionStatement",
                                        "expression": {
                                            "type": "CallExpression",
                                            "callee": {
                                                "type": "Identifier",
                                                "name": "eval"
                                            },
                                            "arguments": [{
                                                "type": "Literal",
                                                "value": "a",
                                                "raw": "'a'"
                                            }]
                                        }
                                    },
                                    {
                                        "type": "FunctionDeclaration",
                                        "id": {
                                            "type": "Identifier",
                                            "name": "b"
                                        },
                                        "params": [],
                                        "body": {
                                            "type": "BlockStatement",
                                            "body": [{
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                    "type": "AssignmentExpression",
                                                    "operator": "=",
                                                    "left": {
                                                        "type": "Identifier",
                                                        "name": "a"
                                                    },
                                                    "right": {
                                                        "type": "AssignmentExpression",
                                                        "operator": "+=",
                                                        "left": {
                                                            "type": "Identifier",
                                                            "name": "a"
                                                        },
                                                        "right": {
                                                            "type": "Literal",
                                                            "value": 1,
                                                            "raw": "1"
                                                        }
                                                    }
                                                }
                                            }]
                                        },
                                        "generator": false,
                                        "expression": false,
                                        "async": false
                                    }
                                ]
                            },
                            "generator": false,
                            "expression": false,
                            "async": false
                        },
                        "arguments": []
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse ""', () => {
            expect(parseScript(`new a("aa, [bb]", 'return aa;');
                  new a("aa, {bb}", 'return aa;');
                  new a("[[aa]], [{bb}]", 'return aa;');`, {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "NewExpression",
                            "callee": {
                                "type": "Identifier",
                                "name": "a"
                            },
                            "arguments": [{
                                    "type": "Literal",
                                    "value": "aa, [bb]",
                                    "raw": "\"aa, [bb]\""
                                },
                                {
                                    "type": "Literal",
                                    "value": "return aa;",
                                    "raw": "'return aa;'"
                                }
                            ]
                        }
                    },
                    {
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "NewExpression",
                            "callee": {
                                "type": "Identifier",
                                "name": "a"
                            },
                            "arguments": [{
                                    "type": "Literal",
                                    "value": "aa, {bb}",
                                    "raw": "\"aa, {bb}\""
                                },
                                {
                                    "type": "Literal",
                                    "value": "return aa;",
                                    "raw": "'return aa;'"
                                }
                            ]
                        }
                    },
                    {
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "NewExpression",
                            "callee": {
                                "type": "Identifier",
                                "name": "a"
                            },
                            "arguments": [{
                                    "type": "Literal",
                                    "value": "[[aa]], [{bb}]",
                                    "raw": "\"[[aa]], [{bb}]\""
                                },
                                {
                                    "type": "Literal",
                                    "value": "return aa;",
                                    "raw": "'return aa;'"
                                }
                            ]
                        }
                    }
                ],
                "sourceType": "script"
            });
        });
    
        it('should parse "({ get a() {} })"', () => {
            expect(parseScript('({ get a() {} })', {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "ObjectExpression",
                        "properties": [{
                            "type": "Property",
                            "key": {
                                "type": "Identifier",
                                "name": "a"
                            },
                            "computed": false,
                            "value": {
                                "type": "FunctionExpression",
                                "id": null,
                                "params": [],
                                "body": {
                                    "type": "BlockStatement",
                                    "body": []
                                },
                                "generator": false,
                                "expression": false,
                                "async": false
                            },
                            "kind": "get",
                            "method": false,
                            "shorthand": false
                        }]
                    }
                }],
                "sourceType": "script"
            });
        });
        it('should parse ""', () => {
            expect(parseScript(`(function () {
                    arguments[1] = 2;
                    var a =3;  // should not hoist to parameter
                }());`, {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "CallExpression",
                        "callee": {
                            "type": "FunctionExpression",
                            "id": null,
                            "params": [],
                            "body": {
                                "type": "BlockStatement",
                                "body": [{
                                        "type": "ExpressionStatement",
                                        "expression": {
                                            "type": "AssignmentExpression",
                                            "operator": "=",
                                            "left": {
                                                "type": "MemberExpression",
                                                "computed": true,
                                                "object": {
                                                    "type": "Identifier",
                                                    "name": "arguments"
                                                },
                                                "property": {
                                                    "type": "Literal",
                                                    "value": 1,
                                                    "raw": "1"
                                                }
                                            },
                                            "right": {
                                                "type": "Literal",
                                                "value": 2,
                                                "raw": "2"
                                            }
                                        }
                                    },
                                    {
                                        "type": "VariableDeclaration",
                                        "declarations": [{
                                            "type": "VariableDeclarator",
                                            "id": {
                                                "type": "Identifier",
                                                "name": "a"
                                            },
                                            "init": {
                                                "type": "Literal",
                                                "value": 3,
                                                "raw": "3"
                                            }
                                        }],
                                        "kind": "var"
                                    }
                                ]
                            },
                            "generator": false,
                            "expression": false,
                            "async": false
                        },
                        "arguments": []
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "var a = class extends b {}"', () => {
            expect(parseScript('var a = class extends b {}', {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "VariableDeclaration",
                    "declarations": [{
                        "type": "VariableDeclarator",
                        "id": {
                            "type": "Identifier",
                            "name": "a"
                        },
                        "init": {
                            "type": "ClassExpression",
                            "id": null,
                            "superClass": {
                                "type": "Identifier",
                                "name": "b"
                            },
                            "body": {
                                "type": "ClassBody",
                                "body": []
                            }
                        }
                    }],
                    "kind": "var"
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "var [{a},b] = c;"', () => {
            expect(parseScript('var [{a},b] = c;', {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "VariableDeclaration",
                    "declarations": [{
                        "type": "VariableDeclarator",
                        "id": {
                            "type": "ArrayPattern",
                            "elements": [{
                                    "type": "ObjectPattern",
                                    "properties": [{
                                        "type": "Property",
                                        "key": {
                                            "type": "Identifier",
                                            "name": "a"
                                        },
                                        "computed": false,
                                        "value": {
                                            "type": "Identifier",
                                            "name": "a"
                                        },
                                        "kind": "init",
                                        "method": false,
                                        "shorthand": true
                                    }]
                                },
                                {
                                    "type": "Identifier",
                                    "name": "b"
                                }
                            ]
                        },
                        "init": {
                            "type": "Identifier",
                            "name": "c"
                        }
                    }],
                    "kind": "var"
                }],
                "sourceType": "script"
            });
        });
        it('should parse "(class {get a() {}})"', () => {
            expect(parseScript('(class {get a() {}})', {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "ClassExpression",
                        "id": null,
                        "superClass": null,
                        "body": {
                            "type": "ClassBody",
                            "body": [{
                                "type": "MethodDefinition",
                                "key": {
                                    "type": "Identifier",
                                    "name": "a"
                                },
                                "computed": false,
                                "value": {
                                    "type": "FunctionExpression",
                                    "id": null,
                                    "params": [],
                                    "body": {
                                        "type": "BlockStatement",
                                        "body": []
                                    },
                                    "generator": false,
                                    "expression": false,
                                    "async": false
                                },
                                "kind": "get",
                                "static": false
                            }]
                        }
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "((a,a),(a,a))"', () => {
            expect(parseScript('((a,a),(a,a))', {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "SequenceExpression",
                        "expressions": [{
                                "type": "SequenceExpression",
                                "expressions": [{
                                        "type": "Identifier",
                                        "name": "a"
                                    },
                                    {
                                        "type": "Identifier",
                                        "name": "a"
                                    }
                                ]
                            },
                            {
                                "type": "SequenceExpression",
                                "expressions": [{
                                        "type": "Identifier",
                                        "name": "a"
                                    },
                                    {
                                        "type": "Identifier",
                                        "name": "a"
                                    }
                                ]
                            }
                        ]
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "1;"', () => {
            expect(parseScript('1;', {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1"
                    }
                }],
                "sourceType": "script"
            });
        });
        it('should parse "T‍"', () => {
            expect(parseScript('T', {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "Identifier",
                        "name": "T"
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "function a([]) {}"', () => {
            expect(parseScript('function a([]) {}', {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "FunctionDeclaration",
                    "id": {
                        "type": "Identifier",
                        "name": "a"
                    },
                    "params": [{
                        "type": "ArrayPattern",
                        "elements": []
                    }],
                    "body": {
                        "type": "BlockStatement",
                        "body": []
                    },
                    "generator": false,
                    "expression": false,
                    "async": false
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "("a")"', () => {
            expect(parseScript('("a")', {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "Literal",
                        "value": "a",
                        "raw": "\"a\""
                    }
                }],
                "sourceType": "script"
            });
        });
        it('should parse "[...a] = b"', () => {
            expect(parseScript(' [...a] = b', {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                            "type": "ArrayPattern",
                            "elements": [{
                                "type": "RestElement",
                                "argument": {
                                    "type": "Identifier",
                                    "name": "a"
                                }
                            }]
                        },
                        "right": {
                            "type": "Identifier",
                            "name": "b"
                        }
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "- (1 - 2 - 3)"', () => {
            expect(parseScript(`- (1 - 2 - 3)`, {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "UnaryExpression",
                        "operator": "-",
                        "argument": {
                            "type": "BinaryExpression",
                            "operator": "-",
                            "left": {
                                "type": "BinaryExpression",
                                "operator": "-",
                                "left": {
                                    "type": "Literal",
                                    "value": 1,
                                    "raw": "1"
                                },
                                "right": {
                                    "type": "Literal",
                                    "value": 2,
                                    "raw": "2"
                                }
                            },
                            "right": {
                                "type": "Literal",
                                "value": 3,
                                "raw": "3"
                            }
                        },
                        "prefix": true
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse ""', () => {
            expect(parseScript(`new (function () {
                    var a = 1;
                });`, {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "NewExpression",
                        "callee": {
                            "type": "FunctionExpression",
                            "id": null,
                            "params": [],
                            "body": {
                                "type": "BlockStatement",
                                "body": [{
                                    "type": "VariableDeclaration",
                                    "declarations": [{
                                        "type": "VariableDeclarator",
                                        "id": {
                                            "type": "Identifier",
                                            "name": "a"
                                        },
                                        "init": {
                                            "type": "Literal",
                                            "value": 1,
                                            "raw": "1"
                                        }
                                    }],
                                    "kind": "var"
                                }]
                            },
                            "generator": false,
                            "expression": false,
                            "async": false
                        },
                        "arguments": []
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "({yield})"', () => {
            expect(parseScript('({yield})', {
                ranges: false,
                raw: true
            })).to.eql({
                "body": [{
                    "expression": {
                        "properties": [{
                            "computed": false,
                            "key": {
                                "name": "yield",
                                "type": "Identifier"
                            },
                            "kind": "init",
                            "method": false,
                            "shorthand": true,
                            "type": "Property",
                            "value": {
                                "name": "yield",
                                "type": "Identifier"
                            }
                        }],
                        "type": "ObjectExpression"
                    },
                    "type": "ExpressionStatement"
                }],
                "sourceType": "script",
                "type": "Program"
            });
        });
    
    
        it('should parse "(a => a)"', () => {
            expect(parseScript('(a => a)', {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "ArrowFunctionExpression",
                        "id": null,
                        "params": [{
                            "type": "Identifier",
                            "name": "a"
                        }],
                        "body": {
                            "type": "Identifier",
                            "name": "a"
                        },
                        "generator": false,
                        "expression": true,
                        "async": false
                    }
                }],
                "sourceType": "script"
            });
        });
        it('should parse "function *a(){yield typeof 0}"', () => {
            expect(parseScript('function *a(){yield typeof 0}', {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "FunctionDeclaration",
                    "id": {
                        "type": "Identifier",
                        "name": "a"
                    },
                    "params": [],
                    "body": {
                        "type": "BlockStatement",
                        "body": [{
                            "type": "ExpressionStatement",
                            "expression": {
                                "type": "YieldExpression",
                                "argument": {
                                    "type": "UnaryExpression",
                                    "operator": "typeof",
                                    "argument": {
                                        "type": "Literal",
                                        "value": 0,
                                        "raw": "0"
                                    },
                                    "prefix": true
                                },
                                "delegate": false
                            }
                        }]
                    },
                    "generator": true,
                    "expression": false,
                    "async": false
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "function a({yield: b}){}"', () => {
            expect(parseScript('function a({yield: b}){}', {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "FunctionDeclaration",
                    "id": {
                        "type": "Identifier",
                        "name": "a"
                    },
                    "params": [{
                        "type": "ObjectPattern",
                        "properties": [{
                            "type": "Property",
                            "key": {
                                "type": "Identifier",
                                "name": "yield"
                            },
                            "computed": false,
                            "value": {
                                "type": "Identifier",
                                "name": "b"
                            },
                            "kind": "init",
                            "method": false,
                            "shorthand": false
                        }]
                    }],
                    "body": {
                        "type": "BlockStatement",
                        "body": []
                    },
                    "generator": false,
                    "expression": false,
                    "async": false
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "switch (a) {}"', () => {
            expect(parseScript('switch (a) {}', {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "SwitchStatement",
                    "discriminant": {
                        "type": "Identifier",
                        "name": "a"
                    },
                    "cases": []
                }],
                "sourceType": "script"
            });
        });
        it('should parse ""', () => {
            expect(parseScript(`'use strict';
                  var a = {
                      delete: 1
                  };`, {
                ranges: true,
                raw: true,
            })).to.eql({
              "type": "Program",
              "start": 0,
              "end": 94,
              "body": [
                {
                  "type": "ExpressionStatement",
                  "start": 0,
                  "end": 13,
                  "expression": {
                    "type": "Literal",
                    "start": 0,
                    "end": 12,
                    "value": "use strict",
                    "raw": "'use strict'"
                  }
                },
                {
                  "type": "VariableDeclaration",
                  "start": 32,
                  "end": 94,
                  "declarations": [
                    {
                      "type": "VariableDeclarator",
                      "start": 36,
                      "end": 93,
                      "id": {
                        "type": "Identifier",
                        "start": 36,
                        "end": 37,
                        "name": "a"
                      },
                      "init": {
                        "type": "ObjectExpression",
                        "start": 40,
                        "end": 93,
                        "properties": [
                          {
                            "type": "Property",
                            "start": 64,
                            "end": 73,
                            "method": false,
                            "shorthand": false,
                            "computed": false,
                            "key": {
                              "type": "Identifier",
                              "start": 64,
                              "end": 70,
                              "name": "delete"
                            },
                            "value": {
                              "type": "Literal",
                              "start": 72,
                              "end": 73,
                              "value": 1,
                              "raw": "1"
                            },
                            "kind": "init"
                          }
                        ]
                      }
                    }
                  ],
                  "kind": "var"
                }
              ],
              "sourceType": "script"
            });
        });
    
        it('should parse "({ "__proto__": null, __proto__(){}, })"', () => {
            expect(parseScript('({ "__proto__": null, __proto__(){}, })', {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "ObjectExpression",
                        "properties": [{
                                "type": "Property",
                                "key": {
                                    "type": "Literal",
                                    "value": "__proto__",
                                    "raw": "\"__proto__\""
                                },
                                "computed": false,
                                "value": {
                                    "type": "Literal",
                                    "value": null,
                                    "raw": "null"
                                },
                                "kind": "init",
                                "method": false,
                                "shorthand": false
                            },
                            {
                                "type": "Property",
                                "key": {
                                    "type": "Identifier",
                                    "name": "__proto__"
                                },
                                "computed": false,
                                "value": {
                                    "type": "FunctionExpression",
                                    "id": null,
                                    "params": [],
                                    "body": {
                                        "type": "BlockStatement",
                                        "body": []
                                    },
                                    "generator": false,
                                    "expression": false,
                                    "async": false
                                },
                                "kind": "init",
                                "method": true,
                                "shorthand": false
                            }
                        ]
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "a in b"', () => {
            expect(parseScript('a in b', {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "BinaryExpression",
                        "operator": "in",
                        "left": {
                            "type": "Identifier",
                            "name": "a"
                        },
                        "right": {
                            "type": "Identifier",
                            "name": "b"
                        }
                    }
                }],
                "sourceType": "script"
            });
        });
        it('should parse ""', () => {
            expect(parseScript(`// optimize this
                  (function () {
                    a('b');
                  }());
                  try {
                  } catch (c) {
                  }`, {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "CallExpression",
                            "callee": {
                                "type": "FunctionExpression",
                                "id": null,
                                "params": [],
                                "body": {
                                    "type": "BlockStatement",
                                    "body": [{
                                        "type": "ExpressionStatement",
                                        "expression": {
                                            "type": "CallExpression",
                                            "callee": {
                                                "type": "Identifier",
                                                "name": "a"
                                            },
                                            "arguments": [{
                                                "type": "Literal",
                                                "value": "b",
                                                "raw": "'b'"
                                            }]
                                        }
                                    }]
                                },
                                "generator": false,
                                "expression": false,
                                "async": false
                            },
                            "arguments": []
                        }
                    },
                    {
                        "type": "TryStatement",
                        "block": {
                            "type": "BlockStatement",
                            "body": []
                        },
                        "handler": {
                            "type": "CatchClause",
                            "param": {
                                "type": "Identifier",
                                "name": "c"
                            },
                            "body": {
                                "type": "BlockStatement",
                                "body": []
                            }
                        },
                        "finalizer": null
                    }
                ],
                "sourceType": "script"
            });
        });
    
        it('should parse ""', () => {
            expect(parseScript(`(function() {
                    a(), 1, b();
                }());`, {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "CallExpression",
                        "callee": {
                            "type": "FunctionExpression",
                            "id": null,
                            "params": [],
                            "body": {
                                "type": "BlockStatement",
                                "body": [{
                                    "type": "ExpressionStatement",
                                    "expression": {
                                        "type": "SequenceExpression",
                                        "expressions": [{
                                                "type": "CallExpression",
                                                "callee": {
                                                    "type": "Identifier",
                                                    "name": "a"
                                                },
                                                "arguments": []
                                            },
                                            {
                                                "type": "Literal",
                                                "value": 1,
                                                "raw": "1"
                                            },
                                            {
                                                "type": "CallExpression",
                                                "callee": {
                                                    "type": "Identifier",
                                                    "name": "b"
                                                },
                                                "arguments": []
                                            }
                                        ]
                                    }
                                }]
                            },
                            "generator": false,
                            "expression": false,
                            "async": false
                        },
                        "arguments": []
                    }
                }],
                "sourceType": "script"
            });
        });
      
        it('should parse "var [,a] = 1;"', () => {
            expect(parseScript('var [,a] = 1;', {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "VariableDeclaration",
                    "declarations": [{
                        "type": "VariableDeclarator",
                        "id": {
                            "type": "ArrayPattern",
                            "elements": [
                                null,
                                {
                                    "type": "Identifier",
                                    "name": "a"
                                }
                            ]
                        },
                        "init": {
                            "type": "Literal",
                            "value": 1,
                            "raw": "1"
                        }
                    }],
                    "kind": "var"
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "({ get if() {} })"', () => {
            expect(parseScript('({ get if() {} })', {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "ObjectExpression",
                        "properties": [{
                            "type": "Property",
                            "key": {
                                "type": "Identifier",
                                "name": "if"
                            },
                            "computed": false,
                            "value": {
                                "type": "FunctionExpression",
                                "id": null,
                                "params": [],
                                "body": {
                                    "type": "BlockStatement",
                                    "body": []
                                },
                                "generator": false,
                                "expression": false,
                                "async": false
                            },
                            "kind": "get",
                            "method": false,
                            "shorthand": false
                        }]
                    }
                }],
                "sourceType": "script"
            });
        });
        it('should parse "var yield;"', () => {
            expect(parseScript('var yield;', {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "VariableDeclaration",
                    "declarations": [{
                        "type": "VariableDeclarator",
                        "id": {
                            "type": "Identifier",
                            "name": "yield"
                        },
                        "init": null
                    }],
                    "kind": "var"
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse ""', () => {
            expect(parseScript(`(function () {
                    void ((a) ? 1 : b);
                }());`, {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "CallExpression",
                        "callee": {
                            "type": "FunctionExpression",
                            "id": null,
                            "params": [],
                            "body": {
                                "type": "BlockStatement",
                                "body": [{
                                    "type": "ExpressionStatement",
                                    "expression": {
                                        "type": "UnaryExpression",
                                        "operator": "void",
                                        "argument": {
                                            "type": "ConditionalExpression",
                                            "test": {
                                                "type": "Identifier",
                                                "name": "a"
                                            },
                                            "consequent": {
                                                "type": "Literal",
                                                "value": 1,
                                                "raw": "1"
                                            },
                                            "alternate": {
                                                "type": "Identifier",
                                                "name": "b"
                                            }
                                        },
                                        "prefix": true
                                    }
                                }]
                            },
                            "generator": false,
                            "expression": false,
                            "async": false
                        },
                        "arguments": []
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse ""', () => {
            expect(parseScript(`function a() {
                    if (b) {
                        let c;
                        let d;
                        var e;
                        var f;
                    }
                }`, {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "FunctionDeclaration",
                    "id": {
                        "type": "Identifier",
                        "name": "a"
                    },
                    "params": [],
                    "body": {
                        "type": "BlockStatement",
                        "body": [{
                            "type": "IfStatement",
                            "test": {
                                "type": "Identifier",
                                "name": "b"
                            },
                            "consequent": {
                                "type": "BlockStatement",
                                "body": [{
                                        "type": "VariableDeclaration",
                                        "declarations": [{
                                            "type": "VariableDeclarator",
                                            "id": {
                                                "type": "Identifier",
                                                "name": "c"
                                            },
                                            "init": null
                                        }],
                                        "kind": "let"
                                    },
                                    {
                                        "type": "VariableDeclaration",
                                        "declarations": [{
                                            "type": "VariableDeclarator",
                                            "id": {
                                                "type": "Identifier",
                                                "name": "d"
                                            },
                                            "init": null
                                        }],
                                        "kind": "let"
                                    },
                                    {
                                        "type": "VariableDeclaration",
                                        "declarations": [{
                                            "type": "VariableDeclarator",
                                            "id": {
                                                "type": "Identifier",
                                                "name": "e"
                                            },
                                            "init": null
                                        }],
                                        "kind": "var"
                                    },
                                    {
                                        "type": "VariableDeclaration",
                                        "declarations": [{
                                            "type": "VariableDeclarator",
                                            "id": {
                                                "type": "Identifier",
                                                "name": "f"
                                            },
                                            "init": null
                                        }],
                                        "kind": "var"
                                    }
                                ]
                            },
                            "alternate": null
                        }]
                    },
                    "generator": false,
                    "expression": false,
                    "async": false
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "(function({a = 1}){})"', () => {
            expect(parseScript('(function({a = 1}){})', {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "FunctionExpression",
                        "id": null,
                        "params": [{
                            "type": "ObjectPattern",
                            "properties": [{
                                "type": "Property",
                                "key": {
                                    "type": "Identifier",
                                    "name": "a"
                                },
                                "computed": false,
                                "value": {
                                    "type": "AssignmentPattern",
                                    "left": {
                                        "type": "Identifier",
                                        "name": "a"
                                    },
                                    "right": {
                                        "type": "Literal",
                                        "value": 1,
                                        "raw": "1"
                                    }
                                },
                                "kind": "init",
                                "method": false,
                                "shorthand": true
                            }]
                        }],
                        "body": {
                            "type": "BlockStatement",
                            "body": []
                        },
                        "generator": false,
                        "expression": false,
                        "async": false
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "({a:(b = 0)})"', () => {
            expect(parseScript('({a:(b = 0)})', {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "ObjectExpression",
                        "properties": [{
                            "type": "Property",
                            "key": {
                                "type": "Identifier",
                                "name": "a"
                            },
                            "computed": false,
                            "value": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                    "type": "Identifier",
                                    "name": "b"
                                },
                                "right": {
                                    "type": "Literal",
                                    "value": 0,
                                    "raw": "0"
                                }
                            },
                            "kind": "init",
                            "method": false,
                            "shorthand": false
                        }]
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "var a = /[x-z]/i"', () => {
            expect(parseScript('var a = /[x-z]/i', {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "VariableDeclaration",
                    "declarations": [{
                        "type": "VariableDeclarator",
                        "id": {
                            "type": "Identifier",
                            "name": "a"
                        },
                        "init": {
                            "type": "Literal",
                            "value": /[x-z]/i,
                            "raw": "/[x-z]/i",
                            "regex": {
                                "pattern": "[x-z]",
                                "flags": "i"
                            }
                        }
                    }],
                    "kind": "var"
                }],
                "sourceType": "script"
            });
        });
        it('should parse ""', () => {
            expect(parseScript(`(function(){ return/* Multiline
                    Comment */a; })`, {
                ranges: true,
                raw: true,
                locations: true
            })).to.eql({
              "type": "Program",
              "start": 0,
              "end": 67,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 0
                },
                "end": {
                  "line": 2,
                  "column": 35
                }
              },
              "body": [
                {
                  "type": "ExpressionStatement",
                  "start": 0,
                  "end": 67,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 0
                    },
                    "end": {
                      "line": 2,
                      "column": 35
                    }
                  },
                  "expression": {
                    "type": "FunctionExpression",
                    "start": 1,
                    "end": 66,
                    "loc": {
                      "start": {
                        "line": 1,
                        "column": 1
                      },
                      "end": {
                        "line": 2,
                        "column": 34
                      }
                    },
                    "id": null,
                    "generator": false,
                    "expression": false,
                    "async": false,
                    "params": [],
                    "body": {
                      "type": "BlockStatement",
                      "start": 11,
                      "end": 66,
                      "loc": {
                        "start": {
                          "line": 1,
                          "column": 11
                        },
                        "end": {
                          "line": 2,
                          "column": 34
                        }
                      },
                      "body": [
                        {
                          "type": "ReturnStatement",
                          "start": 13,
                          "end": 19,
                          "loc": {
                            "start": {
                              "line": 1,
                              "column": 13
                            },
                            "end": {
                              "line": 1,
                              "column": 19
                            }
                          },
                          "argument": null
                        },
                        {
                          "type": "ExpressionStatement",
                          "start": 62,
                          "end": 64,
                          "loc": {
                            "start": {
                              "line": 2,
                              "column": 30
                            },
                            "end": {
                              "line": 2,
                              "column": 32
                            }
                          },
                          "expression": {
                            "type": "Identifier",
                            "start": 62,
                            "end": 63,
                            "loc": {
                              "start": {
                                "line": 2,
                                "column": 30
                              },
                              "end": {
                                "line": 2,
                                "column": 31
                              }
                            },
                            "name": "a"
                          }
                        }
                      ]
                    }
                  }
                }
              ],
              "sourceType": "script"
            });
        });
    
        it('should parse "__proto__: while (true) { continue __proto__; }"', () => {
            expect(parseScript('__proto__: while (true) { continue __proto__; }', {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "LabeledStatement",
                    "label": {
                        "type": "Identifier",
                        "name": "__proto__"
                    },
                    "body": {
                        "type": "WhileStatement",
                        "test": {
                            "type": "Literal",
                            "value": true,
                            "raw": "true"
                        },
                        "body": {
                            "type": "BlockStatement",
                            "body": [{
                                "type": "ContinueStatement",
                                "label": {
                                    "type": "Identifier",
                                    "name": "__proto__"
                                }
                            }]
                        }
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "(function a(b, c) { })"', () => {
            expect(parseScript(`(function a(b, c) { })`, {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "FunctionExpression",
                        "id": {
                            "type": "Identifier",
                            "name": "a"
                        },
                        "params": [{
                                "type": "Identifier",
                                "name": "b"
                            },
                            {
                                "type": "Identifier",
                                "name": "c"
                            }
                        ],
                        "body": {
                            "type": "BlockStatement",
                            "body": []
                        },
                        "generator": false,
                        "expression": false,
                        "async": false
                    }
                }],
                "sourceType": "script"
            });
        });
        it('should parse ""', () => {
            expect(parseScript(`function a() {
                    return (a, void 1);
                }`, {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "FunctionDeclaration",
                    "id": {
                        "type": "Identifier",
                        "name": "a"
                    },
                    "params": [],
                    "body": {
                        "type": "BlockStatement",
                        "body": [{
                            "type": "ReturnStatement",
                            "argument": {
                                "type": "SequenceExpression",
                                "expressions": [{
                                        "type": "Identifier",
                                        "name": "a"
                                    },
                                    {
                                        "type": "UnaryExpression",
                                        "operator": "void",
                                        "argument": {
                                            "type": "Literal",
                                            "value": 1,
                                            "raw": "1"
                                        },
                                        "prefix": true
                                    }
                                ]
                            }
                        }]
                    },
                    "generator": false,
                    "expression": false,
                    "async": false
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "a++"', () => {
            expect(parseScript('a++', {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "UpdateExpression",
                        "operator": "++",
                        "argument": {
                            "type": "Identifier",
                            "name": "a"
                        },
                        "prefix": false
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "({ a: [a, b] }, ...c) => {}"', () => {
            expect(parseScript('({ a: [a, b] }, ...c) => {}', {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "ArrowFunctionExpression",
                        "id": null,
                        "params": [{
                                "type": "ObjectPattern",
                                "properties": [{
                                    "type": "Property",
                                    "key": {
                                        "type": "Identifier",
                                        "name": "a"
                                    },
                                    "computed": false,
                                    "value": {
                                        "type": "ArrayPattern",
                                        "elements": [{
                                                "type": "Identifier",
                                                "name": "a"
                                            },
                                            {
                                                "type": "Identifier",
                                                "name": "b"
                                            }
                                        ]
                                    },
                                    "kind": "init",
                                    "method": false,
                                    "shorthand": false
                                }]
                            },
                            {
                                "type": "RestElement",
                                "argument": {
                                    "type": "Identifier",
                                    "name": "c"
                                }
                            }
                        ],
                        "body": {
                            "type": "BlockStatement",
                            "body": []
                        },
                        "generator": false,
                        "expression": false,
                        "async": false
                    }
                }],
                "sourceType": "script"
            });
        });
        it('should parse "function a() {"use strict"; 0o0; }"', () => {
            expect(parseScript('function a() {"use strict"; 0o0; }', {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "FunctionDeclaration",
                    "id": {
                        "type": "Identifier",
                        "name": "a"
                    },
                    "params": [],
                    "body": {
                        "type": "BlockStatement",
                        "body": [{
                                "type": "ExpressionStatement",
                                "expression": {
                                    "type": "Literal",
                                    "value": "use strict",
                                    "raw": "\"use strict\""
                                }
                            },
                            {
                                "type": "ExpressionStatement",
                                "expression": {
                                    "type": "Literal",
                                    "value": 0,
                                    "raw": "0o0"
                                }
                            }
                        ]
                    },
                    "generator": false,
                    "expression": false,
                    "async": false
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse ""', () => {
            expect(parseScript(`b: while (a) break b;
                  c: while (a) break;`, {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                        "type": "LabeledStatement",
                        "label": {
                            "type": "Identifier",
                            "name": "b"
                        },
                        "body": {
                            "type": "WhileStatement",
                            "test": {
                                "type": "Identifier",
                                "name": "a"
                            },
                            "body": {
                                "type": "BreakStatement",
                                "label": {
                                    "type": "Identifier",
                                    "name": "b"
                                }
                            }
                        }
                    },
                    {
                        "type": "LabeledStatement",
                        "label": {
                            "type": "Identifier",
                            "name": "c"
                        },
                        "body": {
                            "type": "WhileStatement",
                            "test": {
                                "type": "Identifier",
                                "name": "a"
                            },
                            "body": {
                                "type": "BreakStatement",
                                "label": null
                            }
                        }
                    }
                ],
                "sourceType": "script"
            });
        });
    
        it('should parse "([,,])=>1"', () => {
            expect(parseScript('([,,])=>1', {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "ArrowFunctionExpression",
                        "id": null,
                        "params": [{
                            "type": "ArrayPattern",
                            "elements": [
                                null,
                                null
                            ]
                        }],
                        "body": {
                            "type": "Literal",
                            "value": 1,
                            "raw": "1"
                        },
                        "generator": false,
                        "expression": true,
                        "async": false
                    }
                }],
                "sourceType": "script"
            });
        });
        it('should parse "(function package() {"use strict"; })()"', () => {
            expect(parseScript('(function package() {"use strict"; })()', {
                ranges: false,
                raw: true
            })).to.eql({
                "body": [{
                    "expression": {
                        "arguments": [],
                        "callee": {
                            "async": false,
                            "body": {
                                "body": [{
                                    "expression": {
                                        "raw": "\"use strict\"",
                                        "type": "Literal",
                                        "value": "use strict",
                                    },
                                    "type": "ExpressionStatement"
                                }],
                                "type": "BlockStatement"
                            },
                            "expression": false,
                            "generator": false,
                            "id": {
                                "name": "package",
                                "type": "Identifier",
                            },
                            "params": [],
                            "type": "FunctionExpression"
                        },
                        "type": "CallExpression"
                    },
                    "type": "ExpressionStatement"
                }],
                "sourceType": "script",
                "type": "Program"
            });
        });
    
        it('should parse "a * b * c', () => {
            expect(parseScript('a * b * c', {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "BinaryExpression",
                        "operator": "*",
                        "left": {
                            "type": "BinaryExpression",
                            "operator": "*",
                            "left": {
                                "type": "Identifier",
                                "name": "a"
                            },
                            "right": {
                                "type": "Identifier",
                                "name": "b"
                            }
                        },
                        "right": {
                            "type": "Identifier",
                            "name": "c"
                        }
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "(a)=>{"use strict";}"', () => {
            expect(parseScript('(a)=>{"use strict";}', {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "ArrowFunctionExpression",
                        "id": null,
                        "params": [{
                            "type": "Identifier",
                            "name": "a"
                        }],
                        "body": {
                            "type": "BlockStatement",
                            "body": [{
                                "type": "ExpressionStatement",
                                "expression": {
                                    "type": "Literal",
                                    "value": "use strict",
                                    "raw": "\"use strict\""
                                }
                            }]
                        },
                        "generator": false,
                        "expression": false,
                        "async": false
                    }
                }],
                "sourceType": "script"
            });
        });
        it('should parse "({0: a, 1: a} = 1)"', () => {
            expect(parseScript('({0: a, 1: a} = 1)', {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                            "type": "ObjectPattern",
                            "properties": [{
                                    "type": "Property",
                                    "key": {
                                        "type": "Literal",
                                        "value": 0,
                                        "raw": "0"
                                    },
                                    "computed": false,
                                    "value": {
                                        "type": "Identifier",
                                        "name": "a"
                                    },
                                    "kind": "init",
                                    "method": false,
                                    "shorthand": false
                                },
                                {
                                    "type": "Property",
                                    "key": {
                                        "type": "Literal",
                                        "value": 1,
                                        "raw": "1"
                                    },
                                    "computed": false,
                                    "value": {
                                        "type": "Identifier",
                                        "name": "a"
                                    },
                                    "kind": "init",
                                    "method": false,
                                    "shorthand": false
                                }
                            ]
                        },
                        "right": {
                            "type": "Literal",
                            "value": 1,
                            "raw": "1"
                        }
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "function* a() {}"', () => {
            expect(parseScript('function* a() {}', {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "FunctionDeclaration",
                    "id": {
                        "type": "Identifier",
                        "name": "a"
                    },
                    "params": [],
                    "body": {
                        "type": "BlockStatement",
                        "body": []
                    },
                    "generator": true,
                    "expression": false,
                    "async": false
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "while (true) { break }"', () => {
            expect(parseScript('while (true) { break }', {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "WhileStatement",
                    "test": {
                        "type": "Literal",
                        "value": true,
                        "raw": "true"
                    },
                    "body": {
                        "type": "BlockStatement",
                        "body": [{
                            "type": "BreakStatement",
                            "label": null
                        }]
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse ""', () => {
            expect(parseScript(`a = [1,,];
                  b = [2, 3, c];
                  d = [4, , 5, ];
                  e = [6, c, 7];`, {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "AssignmentExpression",
                            "operator": "=",
                            "left": {
                                "type": "Identifier",
                                "name": "a"
                            },
                            "right": {
                                "type": "ArrayExpression",
                                "elements": [{
                                        "type": "Literal",
                                        "value": 1,
                                        "raw": "1"
                                    },
                                    null
                                ]
                            }
                        }
                    },
                    {
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "AssignmentExpression",
                            "operator": "=",
                            "left": {
                                "type": "Identifier",
                                "name": "b"
                            },
                            "right": {
                                "type": "ArrayExpression",
                                "elements": [{
                                        "type": "Literal",
                                        "value": 2,
                                        "raw": "2"
                                    },
                                    {
                                        "type": "Literal",
                                        "value": 3,
                                        "raw": "3"
                                    },
                                    {
                                        "type": "Identifier",
                                        "name": "c"
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "AssignmentExpression",
                            "operator": "=",
                            "left": {
                                "type": "Identifier",
                                "name": "d"
                            },
                            "right": {
                                "type": "ArrayExpression",
                                "elements": [{
                                        "type": "Literal",
                                        "value": 4,
                                        "raw": "4"
                                    },
                                    null,
                                    {
                                        "type": "Literal",
                                        "value": 5,
                                        "raw": "5"
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "AssignmentExpression",
                            "operator": "=",
                            "left": {
                                "type": "Identifier",
                                "name": "e"
                            },
                            "right": {
                                "type": "ArrayExpression",
                                "elements": [{
                                        "type": "Literal",
                                        "value": 6,
                                        "raw": "6"
                                    },
                                    {
                                        "type": "Identifier",
                                        "name": "c"
                                    },
                                    {
                                        "type": "Literal",
                                        "value": 7,
                                        "raw": "7"
                                    }
                                ]
                            }
                        }
                    }
                ],
                "sourceType": "script"
            });
        });
    
        it('should parse "a.b"', () => {
            expect(parseScript('a.b', {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                            "type": "Identifier",
                            "name": "a"
                        },
                        "property": {
                            "type": "Identifier",
                            "name": "b"
                        }
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse ""', () => {
            expect(parseScript(`a = "b".c;
                  a = ("b" + "d")["e" + "f"];
                  a = g.c;
                  a = ("b" + g).c;`, {
                ranges: true,
                raw: true
            })).to.eql({
                "type": "Program",
                "start": 0,
                "end": 118,
                "body": [
                  {
                    "type": "ExpressionStatement",
                    "start": 0,
                    "end": 10,
                    "expression": {
                      "type": "AssignmentExpression",
                      "start": 0,
                      "end": 9,
                      "operator": "=",
                      "left": {
                        "type": "Identifier",
                        "start": 0,
                        "end": 1,
                        "name": "a"
                      },
                      "right": {
                        "type": "MemberExpression",
                        "start": 4,
                        "end": 9,
                        "object": {
                          "type": "Literal",
                          "start": 4,
                          "end": 7,
                          "value": "b",
                          "raw": "\"b\""
                        },
                        "property": {
                          "type": "Identifier",
                          "start": 8,
                          "end": 9,
                          "name": "c"
                        },
                        "computed": false
                      }
                    }
                  },
                  {
                    "type": "ExpressionStatement",
                    "start": 29,
                    "end": 56,
                    "expression": {
                      "type": "AssignmentExpression",
                      "start": 29,
                      "end": 55,
                      "operator": "=",
                      "left": {
                        "type": "Identifier",
                        "start": 29,
                        "end": 30,
                        "name": "a"
                      },
                      "right": {
                        "type": "MemberExpression",
                        "start": 33,
                        "end": 55,
                        "object": {
                          "type": "BinaryExpression",
                          "start": 34,
                          "end": 43,
                          "left": {
                            "type": "Literal",
                            "start": 34,
                            "end": 37,
                            "value": "b",
                            "raw": "\"b\""
                          },
                          "operator": "+",
                          "right": {
                            "type": "Literal",
                            "start": 40,
                            "end": 43,
                            "value": "d",
                            "raw": "\"d\""
                          }
                        },
                        "property": {
                          "type": "BinaryExpression",
                          "start": 45,
                          "end": 54,
                          "left": {
                            "type": "Literal",
                            "start": 45,
                            "end": 48,
                            "value": "e",
                            "raw": "\"e\""
                          },
                          "operator": "+",
                          "right": {
                            "type": "Literal",
                            "start": 51,
                            "end": 54,
                            "value": "f",
                            "raw": "\"f\""
                          }
                        },
                        "computed": true
                      }
                    }
                  },
                  {
                    "type": "ExpressionStatement",
                    "start": 75,
                    "end": 83,
                    "expression": {
                      "type": "AssignmentExpression",
                      "start": 75,
                      "end": 82,
                      "operator": "=",
                      "left": {
                        "type": "Identifier",
                        "start": 75,
                        "end": 76,
                        "name": "a"
                      },
                      "right": {
                        "type": "MemberExpression",
                        "start": 79,
                        "end": 82,
                        "object": {
                          "type": "Identifier",
                          "start": 79,
                          "end": 80,
                          "name": "g"
                        },
                        "property": {
                          "type": "Identifier",
                          "start": 81,
                          "end": 82,
                          "name": "c"
                        },
                        "computed": false
                      }
                    }
                  },
                  {
                    "type": "ExpressionStatement",
                    "start": 102,
                    "end": 118,
                    "expression": {
                      "type": "AssignmentExpression",
                      "start": 102,
                      "end": 117,
                      "operator": "=",
                      "left": {
                        "type": "Identifier",
                        "start": 102,
                        "end": 103,
                        "name": "a"
                      },
                      "right": {
                        "type": "MemberExpression",
                        "start": 106,
                        "end": 117,
                        "object": {
                          "type": "BinaryExpression",
                          "start": 107,
                          "end": 114,
                          "left": {
                            "type": "Literal",
                            "start": 107,
                            "end": 110,
                            "value": "b",
                            "raw": "\"b\""
                          },
                          "operator": "+",
                          "right": {
                            "type": "Identifier",
                            "start": 113,
                            "end": 114,
                            "name": "g"
                          }
                        },
                        "property": {
                          "type": "Identifier",
                          "start": 116,
                          "end": 117,
                          "name": "c"
                        },
                        "computed": false
                      }
                    }
                  }
                ],
                "sourceType": "script"
              });
        });
        it('should parse "/**/ function a() {function b() {}}"', () => {
            expect(parseScript('/**/ function a() {function b() {}}', {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "FunctionDeclaration",
                    "id": {
                        "type": "Identifier",
                        "name": "a"
                    },
                    "params": [],
                    "body": {
                        "type": "BlockStatement",
                        "body": [{
                            "type": "FunctionDeclaration",
                            "id": {
                                "type": "Identifier",
                                "name": "b"
                            },
                            "params": [],
                            "body": {
                                "type": "BlockStatement",
                                "body": []
                            },
                            "generator": false,
                            "expression": false,
                            "async": false
                        }]
                    },
                    "generator": false,
                    "expression": false,
                    "async": false
                }],
                "sourceType": "script"
            });
        });

        it('should parse "let.let"', () => {
            expect(parseScript('let.let', {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                            "type": "Identifier",
                            "name": "let"
                        },
                        "property": {
                            "type": "Identifier",
                            "name": "let"
                        }
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "(class {set a(b) {"use strict";}})"', () => {
            expect(parseScript('(class {set a(b) {"use strict";}})', {
                ranges: true,
                raw: true
            })).to.eql({
                "type": "Program",
                "start": 0,
                "end": 34,
                "body": [
                  {
                    "type": "ExpressionStatement",
                    "start": 0,
                    "end": 34,
                    "expression": {
                      "type": "ClassExpression",
                      "start": 1,
                      "end": 33,
                      "id": null,
                      "superClass": null,
                      "body": {
                        "type": "ClassBody",
                        "start": 7,
                        "end": 33,
                        "body": [
                          {
                            "type": "MethodDefinition",
                            "start": 8,
                            "end": 32,
                            "computed": false,
                            "key": {
                              "type": "Identifier",
                              "start": 12,
                              "end": 13,
                              "name": "a"
                            },
                            "static": false,
                            "kind": "set",
                            "value": {
                              "type": "FunctionExpression",
                              "start": 13,
                              "end": 32,
                              "id": null,
                              "generator": false,
                              "expression": false,
                              "async": false,
                              "params": [
                                {
                                  "type": "Identifier",
                                  "start": 14,
                                  "end": 15,
                                  "name": "b"
                                }
                              ],
                              "body": {
                                "type": "BlockStatement",
                                "start": 17,
                                "end": 32,
                                "body": [
                                  {
                                    "type": "ExpressionStatement",
                                    "start": 18,
                                    "end": 31,
                                    "expression": {
                                      "type": "Literal",
                                      "start": 18,
                                      "end": 30,
                                      "value": "use strict",
                                      "raw": "\"use strict\""
                                    }
                                  }
                                ]
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                ],
                "sourceType": "script"
              });
        });
    
        it('should parse "(function x({ a: { w, x }, b: [y, z] }, ...[a, b, c]){})"', () => {
            expect(parseScript('(function x({ a: { w, x }, b: [y, z] }, ...[a, b, c]){})', {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "FunctionExpression",
                        "id": {
                            "type": "Identifier",
                            "name": "x"
                        },
                        "params": [{
                                "type": "ObjectPattern",
                                "properties": [{
                                        "type": "Property",
                                        "key": {
                                            "type": "Identifier",
                                            "name": "a"
                                        },
                                        "computed": false,
                                        "value": {
                                            "type": "ObjectPattern",
                                            "properties": [{
                                                    "type": "Property",
                                                    "key": {
                                                        "type": "Identifier",
                                                        "name": "w"
                                                    },
                                                    "computed": false,
                                                    "value": {
                                                        "type": "Identifier",
                                                        "name": "w"
                                                    },
                                                    "kind": "init",
                                                    "method": false,
                                                    "shorthand": true
                                                },
                                                {
                                                    "type": "Property",
                                                    "key": {
                                                        "type": "Identifier",
                                                        "name": "x"
                                                    },
                                                    "computed": false,
                                                    "value": {
                                                        "type": "Identifier",
                                                        "name": "x"
                                                    },
                                                    "kind": "init",
                                                    "method": false,
                                                    "shorthand": true
                                                }
                                            ]
                                        },
                                        "kind": "init",
                                        "method": false,
                                        "shorthand": false
                                    },
                                    {
                                        "type": "Property",
                                        "key": {
                                            "type": "Identifier",
                                            "name": "b"
                                        },
                                        "computed": false,
                                        "value": {
                                            "type": "ArrayPattern",
                                            "elements": [{
                                                    "type": "Identifier",
                                                    "name": "y"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "z"
                                                }
                                            ]
                                        },
                                        "kind": "init",
                                        "method": false,
                                        "shorthand": false
                                    }
                                ]
                            },
                            {
                                "type": "RestElement",
                                "argument": {
                                    "type": "ArrayPattern",
                                    "elements": [{
                                            "type": "Identifier",
                                            "name": "a"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "b"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "c"
                                        }
                                    ]
                                }
                            }
                        ],
                        "body": {
                            "type": "BlockStatement",
                            "body": []
                        },
                        "generator": false,
                        "expression": false,
                        "async": false
                    }
                }],
                "sourceType": "script"
            });
        });
        it('should parse ""', () => {
            expect(parseScript(`a(
                        b(c, c),
                        d(c, c),
                        e(c, c)
                    );`, {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "CallExpression",
                        "callee": {
                            "type": "Identifier",
                            "name": "a"
                        },
                        "arguments": [{
                                "type": "CallExpression",
                                "callee": {
                                    "type": "Identifier",
                                    "name": "b"
                                },
                                "arguments": [{
                                        "type": "Identifier",
                                        "name": "c"
                                    },
                                    {
                                        "type": "Identifier",
                                        "name": "c"
                                    }
                                ]
                            },
                            {
                                "type": "CallExpression",
                                "callee": {
                                    "type": "Identifier",
                                    "name": "d"
                                },
                                "arguments": [{
                                        "type": "Identifier",
                                        "name": "c"
                                    },
                                    {
                                        "type": "Identifier",
                                        "name": "c"
                                    }
                                ]
                            },
                            {
                                "type": "CallExpression",
                                "callee": {
                                    "type": "Identifier",
                                    "name": "e"
                                },
                                "arguments": [{
                                        "type": "Identifier",
                                        "name": "c"
                                    },
                                    {
                                        "type": "Identifier",
                                        "name": "c"
                                    }
                                ]
                            }
                        ]
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "(function a() { b; c() });"', () => {
            expect(parseScript('(function a() { b; c() });', {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "FunctionExpression",
                        "id": {
                            "type": "Identifier",
                            "name": "a"
                        },
                        "params": [],
                        "body": {
                            "type": "BlockStatement",
                            "body": [{
                                    "type": "ExpressionStatement",
                                    "expression": {
                                        "type": "Identifier",
                                        "name": "b"
                                    }
                                },
                                {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                            "type": "Identifier",
                                            "name": "c"
                                        },
                                        "arguments": []
                                    }
                                }
                            ]
                        },
                        "generator": false,
                        "expression": false,
                        "async": false
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse ""', () => {
            expect(parseScript(`var a = {};
                    a.b = 1;
                    a.c = 2;
                    d.e(a.c);`, {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                        "type": "VariableDeclaration",
                        "declarations": [{
                            "type": "VariableDeclarator",
                            "id": {
                                "type": "Identifier",
                                "name": "a"
                            },
                            "init": {
                                "type": "ObjectExpression",
                                "properties": []
                            }
                        }],
                        "kind": "var"
                    },
                    {
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "AssignmentExpression",
                            "operator": "=",
                            "left": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                    "type": "Identifier",
                                    "name": "a"
                                },
                                "property": {
                                    "type": "Identifier",
                                    "name": "b"
                                }
                            },
                            "right": {
                                "type": "Literal",
                                "value": 1,
                                "raw": "1"
                            }
                        }
                    },
                    {
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "AssignmentExpression",
                            "operator": "=",
                            "left": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                    "type": "Identifier",
                                    "name": "a"
                                },
                                "property": {
                                    "type": "Identifier",
                                    "name": "c"
                                }
                            },
                            "right": {
                                "type": "Literal",
                                "value": 2,
                                "raw": "2"
                            }
                        }
                    },
                    {
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "CallExpression",
                            "callee": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                    "type": "Identifier",
                                    "name": "d"
                                },
                                "property": {
                                    "type": "Identifier",
                                    "name": "e"
                                }
                            },
                            "arguments": [{
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                    "type": "Identifier",
                                    "name": "a"
                                },
                                "property": {
                                    "type": "Identifier",
                                    "name": "c"
                                }
                            }]
                        }
                    }
                ],
                "sourceType": "script"
            });
        });
        it('should parse ""', () => {
            expect(parseScript(`throw 'a';
                    b();`, {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                        "type": "ThrowStatement",
                        "argument": {
                            "type": "Literal",
                            "value": "a",
                            "raw": "'a'"
                        }
                    },
                    {
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "CallExpression",
                            "callee": {
                                "type": "Identifier",
                                "name": "b"
                            },
                            "arguments": []
                        }
                    }
                ],
                "sourceType": "script"
            });
        });
    
        it('should parse "new a(....5);"', () => {
            expect(parseScript('new a(....5);', {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "NewExpression",
                        "callee": {
                            "type": "Identifier",
                            "name": "a"
                        },
                        "arguments": [{
                            "type": "SpreadElement",
                            "argument": {
                                "type": "Literal",
                                "value": 0.5,
                                "raw": ".5"
                            }
                        }]
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "a << b << c"', () => {
            expect(parseScript('a << b << c', {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "BinaryExpression",
                        "operator": "<<",
                        "left": {
                            "type": "BinaryExpression",
                            "operator": "<<",
                            "left": {
                                "type": "Identifier",
                                "name": "a"
                            },
                            "right": {
                                "type": "Identifier",
                                "name": "b"
                            }
                        },
                        "right": {
                            "type": "Identifier",
                            "name": "c"
                        }
                    }
                }],
                "sourceType": "script"
            });
        });
        it('should parse "({a}) => 1"', () => {
            expect(parseScript('({a}) => 1', {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "ArrowFunctionExpression",
                        "id": null,
                        "params": [{
                            "type": "ObjectPattern",
                            "properties": [{
                                "type": "Property",
                                "key": {
                                    "type": "Identifier",
                                    "name": "a"
                                },
                                "computed": false,
                                "value": {
                                    "type": "Identifier",
                                    "name": "a"
                                },
                                "kind": "init",
                                "method": false,
                                "shorthand": true
                            }]
                        }],
                        "body": {
                            "type": "Literal",
                            "value": 1,
                            "raw": "1"
                        },
                        "generator": false,
                        "expression": true,
                        "async": false
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "a || b && c"', () => {
            expect(parseScript('a || b && c', {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "LogicalExpression",
                        "operator": "||",
                        "left": {
                            "type": "Identifier",
                            "name": "a"
                        },
                        "right": {
                            "type": "LogicalExpression",
                            "operator": "&&",
                            "left": {
                                "type": "Identifier",
                                "name": "b"
                            },
                            "right": {
                                "type": "Identifier",
                                "name": "c"
                            }
                        }
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "a ^= 1"', () => {
            expect(parseScript('a ^= 1', {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "AssignmentExpression",
                        "operator": "^=",
                        "left": {
                            "type": "Identifier",
                            "name": "a"
                        },
                        "right": {
                            "type": "Literal",
                            "value": 1,
                            "raw": "1"
                        }
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "+{} / 1"', () => {
            expect(parseScript('+{} / 1', {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "BinaryExpression",
                        "operator": "/",
                        "left": {
                            "type": "UnaryExpression",
                            "operator": "+",
                            "argument": {
                                "type": "ObjectExpression",
                                "properties": []
                            },
                            "prefix": true
                        },
                        "right": {
                            "type": "Literal",
                            "value": 1,
                            "raw": "1"
                        }
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse ""', () => {
            expect(parseScript(`(function () {
                        -1;
                    }());`, {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "CallExpression",
                        "callee": {
                            "type": "FunctionExpression",
                            "id": null,
                            "params": [],
                            "body": {
                                "type": "BlockStatement",
                                "body": [{
                                    "type": "ExpressionStatement",
                                    "expression": {
                                        "type": "UnaryExpression",
                                        "operator": "-",
                                        "argument": {
                                            "type": "Literal",
                                            "value": 1,
                                            "raw": "1"
                                        },
                                        "prefix": true
                                    }
                                }]
                            },
                            "generator": false,
                            "expression": false,
                            "async": false
                        },
                        "arguments": []
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "null"', () => {
            expect(parseScript('null', {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "Literal",
                        "value": null,
                        "raw": "null"
                    }
                }],
                "sourceType": "script"
            });
        });
        it('should parse "with({}) {}"', () => {
            expect(parseScript('with({}) {}', {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "WithStatement",
                    "object": {
                        "type": "ObjectExpression",
                        "properties": []
                    },
                    "body": {
                        "type": "BlockStatement",
                        "body": []
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "0o2"', () => {
            expect(parseScript('0o2', {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "Literal",
                        "value": 2,
                        "raw": "0o2"
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "(class {3() {}})"', () => {
            expect(parseScript('(class {3() {}})', {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "ClassExpression",
                        "id": null,
                        "superClass": null,
                        "body": {
                            "type": "ClassBody",
                            "body": [{
                                "type": "MethodDefinition",
                                "key": {
                                    "type": "Literal",
                                    "value": 3,
                                    "raw": "3"
                                },
                                "computed": false,
                                "value": {
                                    "type": "FunctionExpression",
                                    "id": null,
                                    "params": [],
                                    "body": {
                                        "type": "BlockStatement",
                                        "body": []
                                    },
                                    "generator": false,
                                    "expression": false,
                                    "async": false
                                },
                                "kind": "method",
                                "static": false
                            }]
                        }
                    }
                }],
                "sourceType": "script"
            });
        });
        it('should parse "(function yield(){})"', () => {
            expect(parseScript('(function yield(){})', {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "FunctionExpression",
                        "id": {
                            "type": "Identifier",
                            "name": "yield"
                        },
                        "params": [],
                        "body": {
                            "type": "BlockStatement",
                            "body": []
                        },
                        "generator": false,
                        "expression": false,
                        "async": false
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "a = { y, z }"', () => {
            expect(parseScript('a = { y, z }', {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                            "type": "Identifier",
                            "name": "a"
                        },
                        "right": {
                            "type": "ObjectExpression",
                            "properties": [{
                                    "type": "Property",
                                    "key": {
                                        "type": "Identifier",
                                        "name": "y"
                                    },
                                    "computed": false,
                                    "value": {
                                        "type": "Identifier",
                                        "name": "y"
                                    },
                                    "kind": "init",
                                    "method": false,
                                    "shorthand": true
                                },
                                {
                                    "type": "Property",
                                    "key": {
                                        "type": "Identifier",
                                        "name": "z"
                                    },
                                    "computed": false,
                                    "value": {
                                        "type": "Identifier",
                                        "name": "z"
                                    },
                                    "kind": "init",
                                    "method": false,
                                    "shorthand": true
                                }
                            ]
                        }
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse ""', () => {
            expect(parseScript(`do a()
                    ;while (true)`, {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "DoWhileStatement",
                    "body": {
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "CallExpression",
                            "callee": {
                                "type": "Identifier",
                                "name": "a"
                            },
                            "arguments": []
                        }
                    },
                    "test": {
                        "type": "Literal",
                        "value": true,
                        "raw": "true"
                    }
                }],
                "sourceType": "script"
            });
        });
        it('should parse "(function*(a, b, c) { yield* a; })"', () => {
            expect(parseScript('(function*(a, b, c) { yield* a; })', {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "FunctionExpression",
                        "id": null,
                        "params": [{
                                "type": "Identifier",
                                "name": "a"
                            },
                            {
                                "type": "Identifier",
                                "name": "b"
                            },
                            {
                                "type": "Identifier",
                                "name": "c"
                            }
                        ],
                        "body": {
                            "type": "BlockStatement",
                            "body": [{
                                "type": "ExpressionStatement",
                                "expression": {
                                    "type": "YieldExpression",
                                    "argument": {
                                        "type": "Identifier",
                                        "name": "a"
                                    },
                                    "delegate": true
                                }
                            }]
                        },
                        "generator": true,
                        "expression": false,
                        "async": false
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "let {a,} = 1"', () => {
            expect(parseScript('let {a,} = 1', {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "VariableDeclaration",
                    "declarations": [{
                        "type": "VariableDeclarator",
                        "id": {
                            "type": "ObjectPattern",
                            "properties": [{
                                "type": "Property",
                                "key": {
                                    "type": "Identifier",
                                    "name": "a"
                                },
                                "computed": false,
                                "value": {
                                    "type": "Identifier",
                                    "name": "a"
                                },
                                "kind": "init",
                                "method": false,
                                "shorthand": true
                            }]
                        },
                        "init": {
                            "type": "Literal",
                            "value": 1,
                            "raw": "1"
                        }
                    }],
                    "kind": "let"
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "a => ({ b: 1 })"', () => {
            expect(parseScript('a => ({ b: 1 })', {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "ArrowFunctionExpression",
                        "id": null,
                        "params": [{
                            "type": "Identifier",
                            "name": "a"
                        }],
                        "body": {
                            "type": "ObjectExpression",
                            "properties": [{
                                "type": "Property",
                                "key": {
                                    "type": "Identifier",
                                    "name": "b"
                                },
                                "computed": false,
                                "value": {
                                    "type": "Literal",
                                    "value": 1,
                                    "raw": "1"
                                },
                                "kind": "init",
                                "method": false,
                                "shorthand": false
                            }]
                        },
                        "generator": false,
                        "expression": true,
                        "async": false
                    }
                }],
                "sourceType": "script"
            });
        });
        it('should parse "a: while (true) while (true) continue a;"', () => {
            expect(parseScript('a: while (true) while (true) continue a;', {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "LabeledStatement",
                    "label": {
                        "type": "Identifier",
                        "name": "a"
                    },
                    "body": {
                        "type": "WhileStatement",
                        "test": {
                            "type": "Literal",
                            "value": true,
                            "raw": "true"
                        },
                        "body": {
                            "type": "WhileStatement",
                            "test": {
                                "type": "Literal",
                                "value": true,
                                "raw": "true"
                            },
                            "body": {
                                "type": "ContinueStatement",
                                "label": {
                                    "type": "Identifier",
                                    "name": "a"
                                }
                            }
                        }
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "try {} catch ([a]) {}"', () => {
            expect(parseScript('try {} catch ([a]) {}', {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "TryStatement",
                    "block": {
                        "type": "BlockStatement",
                        "body": []
                    },
                    "handler": {
                        "type": "CatchClause",
                        "param": {
                            "type": "ArrayPattern",
                            "elements": [{
                                "type": "Identifier",
                                "name": "a"
                            }]
                        },
                        "body": {
                            "type": "BlockStatement",
                            "body": []
                        }
                    },
                    "finalizer": null
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "arguments--"', () => {
            expect(parseScript('arguments--', {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "UpdateExpression",
                        "operator": "--",
                        "argument": {
                            "type": "Identifier",
                            "name": "arguments"
                        },
                        "prefix": false
                    }
                }],
                "sourceType": "script"
            });
        });
      
        it('should parse "(function(...a){})"', () => {
            expect(parseScript('(function(...a){})', {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "FunctionExpression",
                        "id": null,
                        "params": [{
                            "type": "RestElement",
                            "argument": {
                                "type": "Identifier",
                                "name": "a"
                            }
                        }],
                        "body": {
                            "type": "BlockStatement",
                            "body": []
                        },
                        "generator": false,
                        "expression": false,
                        "async": false
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "1/**/"', () => {
            expect(parseScript('1/**/', {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1"
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "a = { true: 1 }"', () => {
            expect(parseScript('a = { true: 1 }', {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                            "type": "Identifier",
                            "name": "a"
                        },
                        "right": {
                            "type": "ObjectExpression",
                            "properties": [{
                                "type": "Property",
                                "key": {
                                    "type": "Identifier",
                                    "name": "true"
                                },
                                "computed": false,
                                "value": {
                                    "type": "Literal",
                                    "value": 1,
                                    "raw": "1"
                                },
                                "kind": "init",
                                "method": false,
                                "shorthand": false
                            }]
                        }
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "({"a": b} = 1)"', () => {
            expect(parseScript('({"a": b} = 1)', {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                            "type": "ObjectPattern",
                            "properties": [{
                                "type": "Property",
                                "key": {
                                    "type": "Literal",
                                    "value": "a",
                                    "raw": "\"a\""
                                },
                                "computed": false,
                                "value": {
                                    "type": "Identifier",
                                    "name": "b"
                                },
                                "kind": "init",
                                "method": false,
                                "shorthand": false
                            }]
                        },
                        "right": {
                            "type": "Literal",
                            "value": 1,
                            "raw": "1"
                        }
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "a === b"', () => {
            expect(parseScript('a === b', {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "BinaryExpression",
                        "operator": "===",
                        "left": {
                            "type": "Identifier",
                            "name": "a"
                        },
                        "right": {
                            "type": "Identifier",
                            "name": "b"
                        }
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "var a = 1<!--foo"', () => {
            expect(parseScript('var a = 1<!--foo', {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "VariableDeclaration",
                    "declarations": [{
                        "type": "VariableDeclarator",
                        "id": {
                            "type": "Identifier",
                            "name": "a"
                        },
                        "init": {
                            "type": "Literal",
                            "value": 1,
                            "raw": "1"
                        }
                    }],
                    "kind": "var"
                }],
                "sourceType": "script"
            });
        });
        it('should parse ""', () => {
            expect(parseScript(`while (true) { continue // Comment
                        a; }`, {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "WhileStatement",
                    "test": {
                        "type": "Literal",
                        "value": true,
                        "raw": "true"
                    },
                    "body": {
                        "type": "BlockStatement",
                        "body": [{
                                "type": "ContinueStatement",
                                "label": null
                            },
                            {
                                "type": "ExpressionStatement",
                                "expression": {
                                    "type": "Identifier",
                                    "name": "a"
                                }
                            }
                        ]
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "(a) = 1"', () => {
            expect(parseScript('(a) = 1', {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                            "type": "Identifier",
                            "name": "a"
                        },
                        "right": {
                            "type": "Literal",
                            "value": 1,
                            "raw": "1"
                        }
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "(function* () { yield yield 1 })"', () => {
            expect(parseScript('(function* () { yield yield 1 })', {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "FunctionExpression",
                        "id": null,
                        "params": [],
                        "body": {
                            "type": "BlockStatement",
                            "body": [{
                                "type": "ExpressionStatement",
                                "expression": {
                                    "type": "YieldExpression",
                                    "argument": {
                                        "type": "YieldExpression",
                                        "argument": {
                                            "type": "Literal",
                                            "value": 1,
                                            "raw": "1"
                                        },
                                        "delegate": false
                                    },
                                    "delegate": false
                                }
                            }]
                        },
                        "generator": true,
                        "expression": false,
                        "async": false
                    }
                }],
                "sourceType": "script"
            });
        });
        it('should parse " a = function(b = 1) {}"', () => {
            expect(parseScript(' a = function(b = 1) {}', {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                            "type": "Identifier",
                            "name": "a"
                        },
                        "right": {
                            "type": "FunctionExpression",
                            "id": null,
                            "params": [{
                                "type": "AssignmentPattern",
                                "left": {
                                    "type": "Identifier",
                                    "name": "b"
                                },
                                "right": {
                                    "type": "Literal",
                                    "value": 1,
                                    "raw": "1"
                                }
                            }],
                            "body": {
                                "type": "BlockStatement",
                                "body": []
                            },
                            "generator": false,
                            "expression": false,
                            "async": false
                        }
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse ""', () => {
            expect(parseScript(`(function () {
                        a['b'];
                    }());`, {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "CallExpression",
                        "callee": {
                            "type": "FunctionExpression",
                            "id": null,
                            "params": [],
                            "body": {
                                "type": "BlockStatement",
                                "body": [{
                                    "type": "ExpressionStatement",
                                    "expression": {
                                        "type": "MemberExpression",
                                        "computed": true,
                                        "object": {
                                            "type": "Identifier",
                                            "name": "a"
                                        },
                                        "property": {
                                            "type": "Literal",
                                            "value": "b",
                                            "raw": "'b'"
                                        }
                                    }
                                }]
                            },
                            "generator": false,
                            "expression": false,
                            "async": false
                        },
                        "arguments": []
                    }
                }],
                "sourceType": "script"
            });
        });
        it('should parse "({["__proto__"]:1, ["__proto__"]:2})"', () => {
            expect(parseScript('({["__proto__"]:1, ["__proto__"]:2})', {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "ObjectExpression",
                        "properties": [{
                                "type": "Property",
                                "key": {
                                    "type": "Literal",
                                    "value": "__proto__",
                                    "raw": "\"__proto__\""
                                },
                                "computed": true,
                                "value": {
                                    "type": "Literal",
                                    "value": 1,
                                    "raw": "1"
                                },
                                "kind": "init",
                                "method": false,
                                "shorthand": false
                            },
                            {
                                "type": "Property",
                                "key": {
                                    "type": "Literal",
                                    "value": "__proto__",
                                    "raw": "\"__proto__\""
                                },
                                "computed": true,
                                "value": {
                                    "type": "Literal",
                                    "value": 2,
                                    "raw": "2"
                                },
                                "kind": "init",
                                "method": false,
                                "shorthand": false
                            }
                        ]
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse ""', () => {
            expect(parseScript(`(class {;;;
                        ;a(){}})`, {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "ClassExpression",
                        "id": null,
                        "superClass": null,
                        "body": {
                            "type": "ClassBody",
                            "body": [{
                                "type": "MethodDefinition",
                                "key": {
                                    "type": "Identifier",
                                    "name": "a"
                                },
                                "computed": false,
                                "value": {
                                    "type": "FunctionExpression",
                                    "id": null,
                                    "params": [],
                                    "body": {
                                        "type": "BlockStatement",
                                        "body": []
                                    },
                                    "generator": false,
                                    "expression": false,
                                    "async": false
                                },
                                "kind": "method",
                                "static": false
                            }]
                        }
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "  arguments++"', () => {
            expect(parseScript('  arguments++', {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "UpdateExpression",
                        "operator": "++",
                        "argument": {
                            "type": "Identifier",
                            "name": "arguments"
                        },
                        "prefix": false
                    }
                }],
                "sourceType": "script"
            });
        });
        it('should parse "true;false"', () => {
            expect(parseScript('true;false', {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "Literal",
                            "value": true,
                            "raw": "true"
                        }
                    },
                    {
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "Literal",
                            "value": false,
                            "raw": "false"
                        }
                    }
                ],
                "sourceType": "script"
            });
        });
    
        it('should parse " switch (a) { case 1: let b; }"', () => {
            expect(parseScript(' switch (a) { case 1: let b; }', {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "SwitchStatement",
                    "discriminant": {
                        "type": "Identifier",
                        "name": "a"
                    },
                    "cases": [{
                        "type": "SwitchCase",
                        "test": {
                            "type": "Literal",
                            "value": 1,
                            "raw": "1"
                        },
                        "consequent": [{
                            "type": "VariableDeclaration",
                            "declarations": [{
                                "type": "VariableDeclarator",
                                "id": {
                                    "type": "Identifier",
                                    "name": "b"
                                },
                                "init": null
                            }],
                            "kind": "let"
                        }]
                    }]
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse ""', () => {
            expect(parseScript(`(function () {
                        function a() {
                            var b = 1;
                            return b;
                        }
                    }());`, {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "CallExpression",
                        "callee": {
                            "type": "FunctionExpression",
                            "id": null,
                            "params": [],
                            "body": {
                                "type": "BlockStatement",
                                "body": [{
                                    "type": "FunctionDeclaration",
                                    "id": {
                                        "type": "Identifier",
                                        "name": "a"
                                    },
                                    "params": [],
                                    "body": {
                                        "type": "BlockStatement",
                                        "body": [{
                                                "type": "VariableDeclaration",
                                                "declarations": [{
                                                    "type": "VariableDeclarator",
                                                    "id": {
                                                        "type": "Identifier",
                                                        "name": "b"
                                                    },
                                                    "init": {
                                                        "type": "Literal",
                                                        "value": 1,
                                                        "raw": "1"
                                                    }
                                                }],
                                                "kind": "var"
                                            },
                                            {
                                                "type": "ReturnStatement",
                                                "argument": {
                                                    "type": "Identifier",
                                                    "name": "b"
                                                }
                                            }
                                        ]
                                    },
                                    "generator": false,
                                    "expression": false,
                                    "async": false
                                }]
                            },
                            "generator": false,
                            "expression": false,
                            "async": false
                        },
                        "arguments": []
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "/[a-z]/gimuy"', () => {
            expect(parseScript('/[a-z]/gimuy', {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "Literal",
                        "value": /[a-z]/gimuy,
                        "raw": "/[a-z]/gimuy",
                        "regex": {
                            "pattern": "[a-z]",
                            "flags": "gimuy"
                        }
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "("\\u{0000000000F8}")"', () => {
            expect(parseScript('("\\u{0000000000F8}")', {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "Literal",
                        "value": "ø",
                        "raw": "\"\\u{0000000000F8}\""
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "a, b"', () => {
            expect(parseScript('a, b', {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "SequenceExpression",
                        "expressions": [{
                                "type": "Identifier",
                                "name": "a"
                            },
                            {
                                "type": "Identifier",
                                "name": "b"
                            }
                        ]
                    }
                }],
                "sourceType": "script"
            });
        });
        it('should parse " ({ get "a"() {} })"', () => {
            expect(parseScript('({ get "a"() {} })', {
                ranges: false,
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "ObjectExpression",
                        "properties": [{
                            "type": "Property",
                            "key": {
                                "type": "Literal",
                                "value": "a",
                                "raw": "\"a\""
                            },
                            "computed": false,
                            "value": {
                                "type": "FunctionExpression",
                                "id": null,
                                "params": [],
                                "body": {
                                    "type": "BlockStatement",
                                    "body": []
                                },
                                "generator": false,
                                "expression": false,
                                "async": false
                            },
                            "kind": "get",
                            "method": false,
                            "shorthand": false
                        }]
                    }
                }],
                "sourceType": "script"
            });
        });
    
    
        it('should parse "use strict";a={b:1,b:2}', () => {
            expect(parseScript(`"use strict";a={b:1,b:2}`, {
                ranges: true,
                raw: true
            })).to.eql({
              "type": "Program",
              "start": 0,
              "end": 24,
              "body": [
                {
                  "type": "ExpressionStatement",
                  "start": 0,
                  "end": 13,
                  "expression": {
                    "type": "Literal",
                    "start": 0,
                    "end": 12,
                    "value": "use strict",
                    "raw": "\"use strict\""
                  }
                },
                {
                  "type": "ExpressionStatement",
                  "start": 13,
                  "end": 24,
                  "expression": {
                    "type": "AssignmentExpression",
                    "start": 13,
                    "end": 24,
                    "operator": "=",
                    "left": {
                      "type": "Identifier",
                      "start": 13,
                      "end": 14,
                      "name": "a"
                    },
                    "right": {
                      "type": "ObjectExpression",
                      "start": 15,
                      "end": 24,
                      "properties": [
                        {
                          "type": "Property",
                          "start": 16,
                          "end": 19,
                          "method": false,
                          "shorthand": false,
                          "computed": false,
                          "key": {
                            "type": "Identifier",
                            "start": 16,
                            "end": 17,
                            "name": "b"
                          },
                          "value": {
                            "type": "Literal",
                            "start": 18,
                            "end": 19,
                            "value": 1,
                            "raw": "1"
                          },
                          "kind": "init"
                        },
                        {
                          "type": "Property",
                          "start": 20,
                          "end": 23,
                          "method": false,
                          "shorthand": false,
                          "computed": false,
                          "key": {
                            "type": "Identifier",
                            "start": 20,
                            "end": 21,
                            "name": "b"
                          },
                          "value": {
                            "type": "Literal",
                            "start": 22,
                            "end": 23,
                            "value": 2,
                            "raw": "2"
                          },
                          "kind": "init"
                        }
                      ]
                    }
                  }
                }
              ],
              "sourceType": "script"
            });
        });
    
        it('should parse "use strict"; var a = { get b() {}, get b() {} }', () => {
            expect(parseScript(`"use strict"; var a = { get b() {}, get b() {} }`, {
                ranges: true,
                raw: true
            })).to.eql({
              "type": "Program",
              "start": 0,
              "end": 48,
              "body": [
                {
                  "type": "ExpressionStatement",
                  "start": 0,
                  "end": 13,
                  "expression": {
                    "type": "Literal",
                    "start": 0,
                    "end": 12,
                    "value": "use strict",
                    "raw": "\"use strict\""
                  }
                },
                {
                  "type": "VariableDeclaration",
                  "start": 14,
                  "end": 48,
                  "declarations": [
                    {
                      "type": "VariableDeclarator",
                      "start": 18,
                      "end": 48,
                      "id": {
                        "type": "Identifier",
                        "start": 18,
                        "end": 19,
                        "name": "a"
                      },
                      "init": {
                        "type": "ObjectExpression",
                        "start": 22,
                        "end": 48,
                        "properties": [
                          {
                            "type": "Property",
                            "start": 24,
                            "end": 34,
                            "method": false,
                            "shorthand": false,
                            "computed": false,
                            "key": {
                              "type": "Identifier",
                              "start": 28,
                              "end": 29,
                              "name": "b"
                            },
                            "kind": "get",
                            "value": {
                              "type": "FunctionExpression",
                              "start": 29,
                              "end": 34,
                              "id": null,
                              "generator": false,
                              "expression": false,
                              "async": false,
                              "params": [],
                              "body": {
                                "type": "BlockStatement",
                                "start": 32,
                                "end": 34,
                                "body": []
                              }
                            }
                          },
                          {
                            "type": "Property",
                            "start": 36,
                            "end": 46,
                            "method": false,
                            "shorthand": false,
                            "computed": false,
                            "key": {
                              "type": "Identifier",
                              "start": 40,
                              "end": 41,
                              "name": "b"
                            },
                            "kind": "get",
                            "value": {
                              "type": "FunctionExpression",
                              "start": 41,
                              "end": 46,
                              "id": null,
                              "generator": false,
                              "expression": false,
                              "async": false,
                              "params": [],
                              "body": {
                                "type": "BlockStatement",
                                "start": 44,
                                "end": 46,
                                "body": []
                              }
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "kind": "var"
                }
              ],
              "sourceType": "script"
            });
        });
    
        it('should parse "({[a]:()=>{}})"', () => {
            expect(parseScript(`({[a]:()=>{}})`)).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "ObjectExpression",
                        "properties": [{
                            "type": "Property",
                            "key": {
                                "type": "Identifier",
                                "name": "a"
                            },
                            "computed": true,
                            "value": {
                                "type": "ArrowFunctionExpression",
                                "id": null,
                                "params": [],
                                "body": {
                                    "type": "BlockStatement",
                                    "body": []
                                },
                                "generator": false,
                                "expression": false,
                                "async": false
                            },
                            "kind": "init",
                            "method": false,
                            "shorthand": false
                        }]
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "({"[": 1})"', () => {
            expect(parseScript(`({"[": 1})`, {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "ObjectExpression",
                        "properties": [{
                            "type": "Property",
                            "key": {
                                "type": "Literal",
                                "value": "[",
                                "raw": "\"[\""
                            },
                            "computed": false,
                            "value": {
                                "type": "Literal",
                                "value": 1,
                                "raw": "1"
                            },
                            "kind": "init",
                            "method": false,
                            "shorthand": false
                        }]
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "if (1) function a(){} else function b(){}"', () => {
            expect(parseScript(`if (1) function a(){} else function b(){}`, {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "IfStatement",
                    "test": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1"
                    },
                    "consequent": {
                        "type": "FunctionDeclaration",
                        "id": {
                            "type": "Identifier",
                            "name": "a"
                        },
                        "params": [],
                        "body": {
                            "type": "BlockStatement",
                            "body": []
                        },
                        "generator": false,
                        "expression": false,
                        "async": false
                    },
                    "alternate": {
                        "type": "FunctionDeclaration",
                        "id": {
                            "type": "Identifier",
                            "name": "b"
                        },
                        "params": [],
                        "body": {
                            "type": "BlockStatement",
                            "body": []
                        },
                        "generator": false,
                        "expression": false,
                        "async": false
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "[a, b, ...c] = 1"', () => {
            expect(parseScript(`[a, b, ...c] = 1`, {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                            "type": "ArrayPattern",
                            "elements": [{
                                    "type": "Identifier",
                                    "name": "a"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "b"
                                },
                                {
                                    "type": "RestElement",
                                    "argument": {
                                        "type": "Identifier",
                                        "name": "c"
                                    }
                                }
                            ]
                        },
                        "right": {
                            "type": "Literal",
                            "value": 1,
                            "raw": "1"
                        }
                    }
                }],
                "sourceType": "script"
            });
        });
    
    
        it('should parse "[...[...a[b]]] = c"', () => {
            expect(parseScript(`[...[...a[b]]] = c`)).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                            "type": "ArrayPattern",
                            "elements": [{
                                "type": "RestElement",
                                "argument": {
                                    "type": "ArrayPattern",
                                    "elements": [{
                                        "type": "RestElement",
                                        "argument": {
                                            "type": "MemberExpression",
                                            "computed": true,
                                            "object": {
                                                "type": "Identifier",
                                                "name": "a"
                                            },
                                            "property": {
                                                "type": "Identifier",
                                                "name": "b"
                                            }
                                        }
                                    }]
                                }
                            }]
                        },
                        "right": {
                            "type": "Identifier",
                            "name": "c"
                        }
                    }
                }],
                "sourceType": "script"
            });
        });
    
    
        it('should parse "a => b => c => 1"', () => {
            expect(parseScript(`a => b => c => 1`, {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "ArrowFunctionExpression",
                        "id": null,
                        "params": [{
                            "type": "Identifier",
                            "name": "a"
                        }],
                        "body": {
                            "type": "ArrowFunctionExpression",
                            "id": null,
                            "params": [{
                                "type": "Identifier",
                                "name": "b"
                            }],
                            "body": {
                                "type": "ArrowFunctionExpression",
                                "id": null,
                                "params": [{
                                    "type": "Identifier",
                                    "name": "c"
                                }],
                                "body": {
                                    "type": "Literal",
                                    "value": 1,
                                    "raw": "1"
                                },
                                "generator": false,
                                "expression": true,
                                "async": false
                            },
                            "generator": false,
                            "expression": true,
                            "async": false
                        },
                        "generator": false,
                        "expression": true,
                        "async": false
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "1"', () => {
            expect(parseScript('1', {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1"
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "1+1"', () => {
            expect(parseScript('1+1', {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "BinaryExpression",
                        "operator": "+",
                        "left": {
                            "type": "Literal",
                            "value": 1,
                            "raw": "1"
                        },
                        "right": {
                            "type": "Literal",
                            "value": 1,
                            "raw": "1"
                        }
                    }
                }],
                "sourceType": "script"
            });
        });
    
    
    
        it('should parse "(1+2)*3"', () => {
            expect(parseScript('(1+2)*3', {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "BinaryExpression",
                        "operator": "*",
                        "left": {
                            "type": "BinaryExpression",
                            "operator": "+",
                            "left": {
                                "type": "Literal",
                                "value": 1,
                                "raw": "1"
                            },
                            "right": {
                                "type": "Literal",
                                "value": 2,
                                "raw": "2"
                            }
                        },
                        "right": {
                            "type": "Literal",
                            "value": 3,
                            "raw": "3"
                        }
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "let [a, , ] = (1);"', () => {
            expect(parseScript(`(1+2)*3 || 4 && 5 && 6 || 7
              ? void 0
              : void 1;`, {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "ConditionalExpression",
                        "test": {
                            "type": "LogicalExpression",
                            "operator": "||",
                            "left": {
                                "type": "LogicalExpression",
                                "operator": "||",
                                "left": {
                                    "type": "BinaryExpression",
                                    "operator": "*",
                                    "left": {
                                        "type": "BinaryExpression",
                                        "operator": "+",
                                        "left": {
                                            "type": "Literal",
                                            "value": 1,
                                            "raw": "1"
                                        },
                                        "right": {
                                            "type": "Literal",
                                            "value": 2,
                                            "raw": "2"
                                        }
                                    },
                                    "right": {
                                        "type": "Literal",
                                        "value": 3,
                                        "raw": "3"
                                    }
                                },
                                "right": {
                                    "type": "LogicalExpression",
                                    "operator": "&&",
                                    "left": {
                                        "type": "LogicalExpression",
                                        "operator": "&&",
                                        "left": {
                                            "type": "Literal",
                                            "value": 4,
                                            "raw": "4"
                                        },
                                        "right": {
                                            "type": "Literal",
                                            "value": 5,
                                            "raw": "5"
                                        }
                                    },
                                    "right": {
                                        "type": "Literal",
                                        "value": 6,
                                        "raw": "6"
                                    }
                                }
                            },
                            "right": {
                                "type": "Literal",
                                "value": 7,
                                "raw": "7"
                            }
                        },
                        "consequent": {
                            "type": "UnaryExpression",
                            "operator": "void",
                            "argument": {
                                "type": "Literal",
                                "value": 0,
                                "raw": "0"
                            },
                            "prefix": true
                        },
                        "alternate": {
                            "type": "UnaryExpression",
                            "operator": "void",
                            "argument": {
                                "type": "Literal",
                                "value": 1,
                                "raw": "1"
                            },
                            "prefix": true
                        }
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "1 === 1 ? 1 : 2 !== 2 ? 2 : 3 == 3 ? 3 : 4 != 4 ? 4 : 5;"', () => {
            expect(parseScript(`1 === 1 ? 1 : 2 !== 2 ? 2 : 3 == 3 ? 3 : 4 != 4 ? 4 : 5;`, {
                raw: true,
                ranges: true
            })).to.eql({
                "type": "Program",
                "start": 0,
                "end": 56,
                "body": [
                  {
                    "type": "ExpressionStatement",
                    "start": 0,
                    "end": 56,
                    "expression": {
                      "type": "ConditionalExpression",
                      "start": 0,
                      "end": 55,
                      "test": {
                        "type": "BinaryExpression",
                        "start": 0,
                        "end": 7,
                        "left": {
                          "type": "Literal",
                          "start": 0,
                          "end": 1,
                          "value": 1,
                          "raw": "1"
                        },
                        "operator": "===",
                        "right": {
                          "type": "Literal",
                          "start": 6,
                          "end": 7,
                          "value": 1,
                          "raw": "1"
                        }
                      },
                      "consequent": {
                        "type": "Literal",
                        "start": 10,
                        "end": 11,
                        "value": 1,
                        "raw": "1"
                      },
                      "alternate": {
                        "type": "ConditionalExpression",
                        "start": 14,
                        "end": 55,
                        "test": {
                          "type": "BinaryExpression",
                          "start": 14,
                          "end": 21,
                          "left": {
                            "type": "Literal",
                            "start": 14,
                            "end": 15,
                            "value": 2,
                            "raw": "2"
                          },
                          "operator": "!==",
                          "right": {
                            "type": "Literal",
                            "start": 20,
                            "end": 21,
                            "value": 2,
                            "raw": "2"
                          }
                        },
                        "consequent": {
                          "type": "Literal",
                          "start": 24,
                          "end": 25,
                          "value": 2,
                          "raw": "2"
                        },
                        "alternate": {
                          "type": "ConditionalExpression",
                          "start": 28,
                          "end": 55,
                          "test": {
                            "type": "BinaryExpression",
                            "start": 28,
                            "end": 34,
                            "left": {
                              "type": "Literal",
                              "start": 28,
                              "end": 29,
                              "value": 3,
                              "raw": "3"
                            },
                            "operator": "==",
                            "right": {
                              "type": "Literal",
                              "start": 33,
                              "end": 34,
                              "value": 3,
                              "raw": "3"
                            }
                          },
                          "consequent": {
                            "type": "Literal",
                            "start": 37,
                            "end": 38,
                            "value": 3,
                            "raw": "3"
                          },
                          "alternate": {
                            "type": "ConditionalExpression",
                            "start": 41,
                            "end": 55,
                            "test": {
                              "type": "BinaryExpression",
                              "start": 41,
                              "end": 47,
                              "left": {
                                "type": "Literal",
                                "start": 41,
                                "end": 42,
                                "value": 4,
                                "raw": "4"
                              },
                              "operator": "!=",
                              "right": {
                                "type": "Literal",
                                "start": 46,
                                "end": 47,
                                "value": 4,
                                "raw": "4"
                              }
                            },
                            "consequent": {
                              "type": "Literal",
                              "start": 50,
                              "end": 51,
                              "value": 4,
                              "raw": "4"
                            },
                            "alternate": {
                              "type": "Literal",
                              "start": 54,
                              "end": 55,
                              "value": 5,
                              "raw": "5"
                            }
                          }
                        }
                      }
                    }
                  }
                ],
                "sourceType": "script"
              });
        });
    
    
        it('should parse "1 + 2 - 3 * 4 / 5 % 6 << 7 >> 8 >>> 9 ? 1 ^ 1 : ~1 - 1, 2, 3;"', () => {
            expect(parseScript(`1 + 2 - 3 * 4 / 5 % 6 << 7 >> 8 >>> 9 ? 1 ^ 1 : ~1 - 1, 2, 3;`, {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "SequenceExpression",
                        "expressions": [{
                                "type": "ConditionalExpression",
                                "test": {
                                    "type": "BinaryExpression",
                                    "operator": ">>>",
                                    "left": {
                                        "type": "BinaryExpression",
                                        "operator": ">>",
                                        "left": {
                                            "type": "BinaryExpression",
                                            "operator": "<<",
                                            "left": {
                                                "type": "BinaryExpression",
                                                "operator": "-",
                                                "left": {
                                                    "type": "BinaryExpression",
                                                    "operator": "+",
                                                    "left": {
                                                        "type": "Literal",
                                                        "value": 1,
                                                        "raw": "1"
                                                    },
                                                    "right": {
                                                        "type": "Literal",
                                                        "value": 2,
                                                        "raw": "2"
                                                    }
                                                },
                                                "right": {
                                                    "type": "BinaryExpression",
                                                    "operator": "%",
                                                    "left": {
                                                        "type": "BinaryExpression",
                                                        "operator": "/",
                                                        "left": {
                                                            "type": "BinaryExpression",
                                                            "operator": "*",
                                                            "left": {
                                                                "type": "Literal",
                                                                "value": 3,
                                                                "raw": "3"
                                                            },
                                                            "right": {
                                                                "type": "Literal",
                                                                "value": 4,
                                                                "raw": "4"
                                                            }
                                                        },
                                                        "right": {
                                                            "type": "Literal",
                                                            "value": 5,
                                                            "raw": "5"
                                                        }
                                                    },
                                                    "right": {
                                                        "type": "Literal",
                                                        "value": 6,
                                                        "raw": "6"
                                                    }
                                                }
                                            },
                                            "right": {
                                                "type": "Literal",
                                                "value": 7,
                                                "raw": "7"
                                            }
                                        },
                                        "right": {
                                            "type": "Literal",
                                            "value": 8,
                                            "raw": "8"
                                        }
                                    },
                                    "right": {
                                        "type": "Literal",
                                        "value": 9,
                                        "raw": "9"
                                    }
                                },
                                "consequent": {
                                    "type": "BinaryExpression",
                                    "operator": "^",
                                    "left": {
                                        "type": "Literal",
                                        "value": 1,
                                        "raw": "1"
                                    },
                                    "right": {
                                        "type": "Literal",
                                        "value": 1,
                                        "raw": "1"
                                    }
                                },
                                "alternate": {
                                    "type": "BinaryExpression",
                                    "operator": "-",
                                    "left": {
                                        "type": "UnaryExpression",
                                        "operator": "~",
                                        "argument": {
                                            "type": "Literal",
                                            "value": 1,
                                            "raw": "1"
                                        },
                                        "prefix": true
                                    },
                                    "right": {
                                        "type": "Literal",
                                        "value": 1,
                                        "raw": "1"
                                    }
                                }
                            },
                            {
                                "type": "Literal",
                                "value": 2,
                                "raw": "2"
                            },
                            {
                                "type": "Literal",
                                "value": 3,
                                "raw": "3"
                            }
                        ]
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "var a;"', () => {
            expect(parseScript(`var a;`)).to.eql({
                "type": "Program",
                "body": [{
                    "type": "VariableDeclaration",
                    "declarations": [{
                        "type": "VariableDeclarator",
                        "id": {
                            "type": "Identifier",
                            "name": "a"
                        },
                        "init": null
                    }],
                    "kind": "var"
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "var a, b, c;"', () => {
            expect(parseScript(`var a, b, c;`)).to.eql({
                "type": "Program",
                "body": [{
                    "type": "VariableDeclaration",
                    "declarations": [{
                            "type": "VariableDeclarator",
                            "id": {
                                "type": "Identifier",
                                "name": "a"
                            },
                            "init": null
                        },
                        {
                            "type": "VariableDeclarator",
                            "id": {
                                "type": "Identifier",
                                "name": "b"
                            },
                            "init": null
                        },
                        {
                            "type": "VariableDeclarator",
                            "id": {
                                "type": "Identifier",
                                "name": "c"
                            },
                            "init": null
                        }
                    ],
                    "kind": "var"
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "var a = 1;"', () => {
            expect(parseScript(`var a = 1;`, {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "VariableDeclaration",
                    "declarations": [{
                        "type": "VariableDeclarator",
                        "id": {
                            "type": "Identifier",
                            "name": "a"
                        },
                        "init": {
                            "type": "Literal",
                            "value": 1,
                            "raw": "1"
                        }
                    }],
                    "kind": "var"
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "var a = 1, b = 2, c, d = 1 + 1;"', () => {
            expect(parseScript(`var a = 1, b = 2, c, d = 1 + 1;`, {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "VariableDeclaration",
                    "declarations": [{
                            "type": "VariableDeclarator",
                            "id": {
                                "type": "Identifier",
                                "name": "a"
                            },
                            "init": {
                                "type": "Literal",
                                "value": 1,
                                "raw": "1"
                            }
                        },
                        {
                            "type": "VariableDeclarator",
                            "id": {
                                "type": "Identifier",
                                "name": "b"
                            },
                            "init": {
                                "type": "Literal",
                                "value": 2,
                                "raw": "2"
                            }
                        },
                        {
                            "type": "VariableDeclarator",
                            "id": {
                                "type": "Identifier",
                                "name": "c"
                            },
                            "init": null
                        },
                        {
                            "type": "VariableDeclarator",
                            "id": {
                                "type": "Identifier",
                                "name": "d"
                            },
                            "init": {
                                "type": "BinaryExpression",
                                "operator": "+",
                                "left": {
                                    "type": "Literal",
                                    "value": 1,
                                    "raw": "1"
                                },
                                "right": {
                                    "type": "Literal",
                                    "value": 1,
                                    "raw": "1"
                                }
                            }
                        }
                    ],
                    "kind": "var"
                }],
                "sourceType": "script"
            });
        });
    
    
        it('should parse "function a(a) {}"', () => {
            expect(parseScript(`function a(a) {}`)).to.eql({
                "type": "Program",
                "body": [{
                    "type": "FunctionDeclaration",
                    "id": {
                        "type": "Identifier",
                        "name": "a"
                    },
                    "params": [{
                        "type": "Identifier",
                        "name": "a"
                    }],
                    "body": {
                        "type": "BlockStatement",
                        "body": []
                    },
                    "generator": false,
                    "expression": false,
                    "async": false
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "function a() {}"', () => {
            expect(parseScript(`function a() {
        }`)).to.eql({
                "type": "Program",
                "body": [{
                    "type": "FunctionDeclaration",
                    "id": {
                        "type": "Identifier",
                        "name": "a"
                    },
                    "params": [],
                    "body": {
                        "type": "BlockStatement",
                        "body": []
                    },
                    "generator": false,
                    "expression": false,
                    "async": false
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "let [a, , ] = (1);"', () => {
            expect(parseScript(`var a = function(a, b, c) {
          return a + b + c;
        };`)).to.eql({
                "type": "Program",
                "body": [{
                    "type": "VariableDeclaration",
                    "declarations": [{
                        "type": "VariableDeclarator",
                        "id": {
                            "type": "Identifier",
                            "name": "a"
                        },
                        "init": {
                            "type": "FunctionExpression",
                            "id": null,
                            "params": [{
                                    "type": "Identifier",
                                    "name": "a"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "b"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "c"
                                }
                            ],
                            "body": {
                                "type": "BlockStatement",
                                "body": [{
                                    "type": "ReturnStatement",
                                    "argument": {
                                        "type": "BinaryExpression",
                                        "operator": "+",
                                        "left": {
                                            "type": "BinaryExpression",
                                            "operator": "+",
                                            "left": {
                                                "type": "Identifier",
                                                "name": "a"
                                            },
                                            "right": {
                                                "type": "Identifier",
                                                "name": "b"
                                            }
                                        },
                                        "right": {
                                            "type": "Identifier",
                                            "name": "c"
                                        }
                                    }
                                }]
                            },
                            "generator": false,
                            "expression": false,
                            "async": false
                        }
                    }],
                    "kind": "var"
                }],
                "sourceType": "script"
            });
        });
    
    
        it('should parse "if (1) 1;"', () => {
            expect(parseScript(`if (1) 1;`, {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "IfStatement",
                    "test": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1"
                    },
                    "consequent": {
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "Literal",
                            "value": 1,
                            "raw": "1"
                        }
                    },
                    "alternate": null
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "if (1) 1; else 2;"', () => {
            expect(parseScript(`if (1) 1; else 2;`, {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "IfStatement",
                    "test": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1"
                    },
                    "consequent": {
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "Literal",
                            "value": 1,
                            "raw": "1"
                        }
                    },
                    "alternate": {
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "Literal",
                            "value": 2,
                            "raw": "2"
                        }
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "let [a, , ] = (1);"', () => {
            expect(parseScript(`'(' + (a === b ? c : d) + ')' + e;`, {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "BinaryExpression",
                        "operator": "+",
                        "left": {
                            "type": "BinaryExpression",
                            "operator": "+",
                            "left": {
                                "type": "BinaryExpression",
                                "operator": "+",
                                "left": {
                                    "type": "Literal",
                                    "value": "(",
                                    "raw": "'('"
                                },
                                "right": {
                                    "type": "ConditionalExpression",
                                    "test": {
                                        "type": "BinaryExpression",
                                        "operator": "===",
                                        "left": {
                                            "type": "Identifier",
                                            "name": "a"
                                        },
                                        "right": {
                                            "type": "Identifier",
                                            "name": "b"
                                        }
                                    },
                                    "consequent": {
                                        "type": "Identifier",
                                        "name": "c"
                                    },
                                    "alternate": {
                                        "type": "Identifier",
                                        "name": "d"
                                    }
                                }
                            },
                            "right": {
                                "type": "Literal",
                                "value": ")",
                                "raw": "')'"
                            }
                        },
                        "right": {
                            "type": "Identifier",
                            "name": "e"
                        }
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "\0"', () => {
            expect(parseScript(`'\0'`, {
                raw: true,
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "Literal",
                        "value": "\u0000",
                        "raw": "'\u0000'"
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "0777"', () => {
            expect(parseScript(`0777`, {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "Literal",
                        "value": 511,
                        "raw": "0777"
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "({ a: 1, b: 2 })"', () => {
            expect(parseScript(`({ a: 1, b: 2 })`, {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "ObjectExpression",
                        "properties": [{
                                "type": "Property",
                                "key": {
                                    "type": "Identifier",
                                    "name": "a"
                                },
                                "computed": false,
                                "value": {
                                    "type": "Literal",
                                    "value": 1,
                                    "raw": "1"
                                },
                                "kind": "init",
                                "method": false,
                                "shorthand": false
                            },
                            {
                                "type": "Property",
                                "key": {
                                    "type": "Identifier",
                                    "name": "b"
                                },
                                "computed": false,
                                "value": {
                                    "type": "Literal",
                                    "value": 2,
                                    "raw": "2"
                                },
                                "kind": "init",
                                "method": false,
                                "shorthand": false
                            }
                        ]
                    }
                }],
                "sourceType": "script"
            });
        });
    
    
        it('should parse "let [a, , ] = (1);"', () => {
            expect(parseScript(`var o = {
          a: function() {
            return 1;
          }
        };`, {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "VariableDeclaration",
                    "declarations": [{
                        "type": "VariableDeclarator",
                        "id": {
                            "type": "Identifier",
                            "name": "o"
                        },
                        "init": {
                            "type": "ObjectExpression",
                            "properties": [{
                                "type": "Property",
                                "key": {
                                    "type": "Identifier",
                                    "name": "a"
                                },
                                "computed": false,
                                "value": {
                                    "type": "FunctionExpression",
                                    "id": null,
                                    "params": [],
                                    "body": {
                                        "type": "BlockStatement",
                                        "body": [{
                                            "type": "ReturnStatement",
                                            "argument": {
                                                "type": "Literal",
                                                "value": 1,
                                                "raw": "1"
                                            }
                                        }]
                                    },
                                    "generator": false,
                                    "expression": false,
                                    "async": false
                                },
                                "kind": "init",
                                "method": false,
                                "shorthand": false
                            }]
                        }
                    }],
                    "kind": "var"
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "let [a, , ] = (1);"', () => {
            expect(parseScript(`var o = {
          get a() {
            return 1;
          }
        };`, {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "VariableDeclaration",
                    "declarations": [{
                        "type": "VariableDeclarator",
                        "id": {
                            "type": "Identifier",
                            "name": "o"
                        },
                        "init": {
                            "type": "ObjectExpression",
                            "properties": [{
                                "type": "Property",
                                "key": {
                                    "type": "Identifier",
                                    "name": "a"
                                },
                                "computed": false,
                                "value": {
                                    "type": "FunctionExpression",
                                    "id": null,
                                    "params": [],
                                    "body": {
                                        "type": "BlockStatement",
                                        "body": [{
                                            "type": "ReturnStatement",
                                            "argument": {
                                                "type": "Literal",
                                                "value": 1,
                                                "raw": "1"
                                            }
                                        }]
                                    },
                                    "generator": false,
                                    "expression": false,
                                    "async": false
                                },
                                "kind": "get",
                                "method": false,
                                "shorthand": false
                            }]
                        }
                    }],
                    "kind": "var"
                }],
                "sourceType": "script"
            });
        });
    
    
    
        it('should parse "let [a, , ] = (1);"', () => {
            expect(parseScript(`var o = {
          set a(a) {
            return 1;
          }
        };`, {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "VariableDeclaration",
                    "declarations": [{
                        "type": "VariableDeclarator",
                        "id": {
                            "type": "Identifier",
                            "name": "o"
                        },
                        "init": {
                            "type": "ObjectExpression",
                            "properties": [{
                                "type": "Property",
                                "key": {
                                    "type": "Identifier",
                                    "name": "a"
                                },
                                "computed": false,
                                "value": {
                                    "type": "FunctionExpression",
                                    "id": null,
                                    "params": [{
                                        "type": "Identifier",
                                        "name": "a"
                                    }],
                                    "body": {
                                        "type": "BlockStatement",
                                        "body": [{
                                            "type": "ReturnStatement",
                                            "argument": {
                                                "type": "Literal",
                                                "value": 1,
                                                "raw": "1"
                                            }
                                        }]
                                    },
                                    "generator": false,
                                    "expression": false,
                                    "async": false
                                },
                                "kind": "set",
                                "method": false,
                                "shorthand": false
                            }]
                        }
                    }],
                    "kind": "var"
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "let [a, , ] = (1);"', () => {
            expect(parseScript(`var o = {
          get: function() {
            return 1;
          }
        };`, {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "VariableDeclaration",
                    "declarations": [{
                        "type": "VariableDeclarator",
                        "id": {
                            "type": "Identifier",
                            "name": "o"
                        },
                        "init": {
                            "type": "ObjectExpression",
                            "properties": [{
                                "type": "Property",
                                "key": {
                                    "type": "Identifier",
                                    "name": "get"
                                },
                                "computed": false,
                                "value": {
                                    "type": "FunctionExpression",
                                    "id": null,
                                    "params": [],
                                    "body": {
                                        "type": "BlockStatement",
                                        "body": [{
                                            "type": "ReturnStatement",
                                            "argument": {
                                                "type": "Literal",
                                                "value": 1,
                                                "raw": "1"
                                            }
                                        }]
                                    },
                                    "generator": false,
                                    "expression": false,
                                    "async": false
                                },
                                "kind": "init",
                                "method": false,
                                "shorthand": false
                            }]
                        }
                    }],
                    "kind": "var"
                }],
                "sourceType": "script"
            });
        });
    
    
    
    
        it('should parse "let [a, , ] = (1);"', () => {
            expect(parseScript(`var o = {
          get() {
            return 1;
          }
        };`, {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "VariableDeclaration",
                    "declarations": [{
                        "type": "VariableDeclarator",
                        "id": {
                            "type": "Identifier",
                            "name": "o"
                        },
                        "init": {
                            "type": "ObjectExpression",
                            "properties": [{
                                "type": "Property",
                                "key": {
                                    "type": "Identifier",
                                    "name": "get"
                                },
                                "computed": false,
                                "value": {
                                    "type": "FunctionExpression",
                                    "id": null,
                                    "params": [],
                                    "body": {
                                        "type": "BlockStatement",
                                        "body": [{
                                            "type": "ReturnStatement",
                                            "argument": {
                                                "type": "Literal",
                                                "value": 1,
                                                "raw": "1"
                                            }
                                        }]
                                    },
                                    "generator": false,
                                    "expression": false,
                                    "async": false
                                },
                                "kind": "init",
                                "method": true,
                                "shorthand": false
                            }]
                        }
                    }],
                    "kind": "var"
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "let [a, , ] = (1);"', () => {
            expect(parseScript(`var o = {
          a: function() {},
          b: function() {},
          c() {},
          d() {},
          get e() {},
          set e(e) {}
        };`, {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "VariableDeclaration",
                    "declarations": [{
                        "type": "VariableDeclarator",
                        "id": {
                            "type": "Identifier",
                            "name": "o"
                        },
                        "init": {
                            "type": "ObjectExpression",
                            "properties": [{
                                    "type": "Property",
                                    "key": {
                                        "type": "Identifier",
                                        "name": "a"
                                    },
                                    "computed": false,
                                    "value": {
                                        "type": "FunctionExpression",
                                        "id": null,
                                        "params": [],
                                        "body": {
                                            "type": "BlockStatement",
                                            "body": []
                                        },
                                        "generator": false,
                                        "expression": false,
                                        "async": false
                                    },
                                    "kind": "init",
                                    "method": false,
                                    "shorthand": false
                                },
                                {
                                    "type": "Property",
                                    "key": {
                                        "type": "Identifier",
                                        "name": "b"
                                    },
                                    "computed": false,
                                    "value": {
                                        "type": "FunctionExpression",
                                        "id": null,
                                        "params": [],
                                        "body": {
                                            "type": "BlockStatement",
                                            "body": []
                                        },
                                        "generator": false,
                                        "expression": false,
                                        "async": false
                                    },
                                    "kind": "init",
                                    "method": false,
                                    "shorthand": false
                                },
                                {
                                    "type": "Property",
                                    "key": {
                                        "type": "Identifier",
                                        "name": "c"
                                    },
                                    "computed": false,
                                    "value": {
                                        "type": "FunctionExpression",
                                        "id": null,
                                        "params": [],
                                        "body": {
                                            "type": "BlockStatement",
                                            "body": []
                                        },
                                        "generator": false,
                                        "expression": false,
                                        "async": false
                                    },
                                    "kind": "init",
                                    "method": true,
                                    "shorthand": false
                                },
                                {
                                    "type": "Property",
                                    "key": {
                                        "type": "Identifier",
                                        "name": "d"
                                    },
                                    "computed": false,
                                    "value": {
                                        "type": "FunctionExpression",
                                        "id": null,
                                        "params": [],
                                        "body": {
                                            "type": "BlockStatement",
                                            "body": []
                                        },
                                        "generator": false,
                                        "expression": false,
                                        "async": false
                                    },
                                    "kind": "init",
                                    "method": true,
                                    "shorthand": false
                                },
                                {
                                    "type": "Property",
                                    "key": {
                                        "type": "Identifier",
                                        "name": "e"
                                    },
                                    "computed": false,
                                    "value": {
                                        "type": "FunctionExpression",
                                        "id": null,
                                        "params": [],
                                        "body": {
                                            "type": "BlockStatement",
                                            "body": []
                                        },
                                        "generator": false,
                                        "expression": false,
                                        "async": false
                                    },
                                    "kind": "get",
                                    "method": false,
                                    "shorthand": false
                                },
                                {
                                    "type": "Property",
                                    "key": {
                                        "type": "Identifier",
                                        "name": "e"
                                    },
                                    "computed": false,
                                    "value": {
                                        "type": "FunctionExpression",
                                        "id": null,
                                        "params": [{
                                            "type": "Identifier",
                                            "name": "e"
                                        }],
                                        "body": {
                                            "type": "BlockStatement",
                                            "body": []
                                        },
                                        "generator": false,
                                        "expression": false,
                                        "async": false
                                    },
                                    "kind": "set",
                                    "method": false,
                                    "shorthand": false
                                }
                            ]
                        }
                    }],
                    "kind": "var"
                }],
                "sourceType": "script"
            });
        });
    
    
        it('should parse "[]"', () => {
            expect(parseScript(`[]`)).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "ArrayExpression",
                        "elements": []
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "[,]"', () => {
            expect(parseScript(`[,]`)).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "ArrayExpression",
                        "elements": [
                            null
                        ]
                    }
                }],
                "sourceType": "script"
            });
        });
    
    
        it('should parse "[,,]"', () => {
            expect(parseScript('[,,]')).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "ArrayExpression",
                        "elements": [
                            null,
                            null
                        ]
                    }
                }],
                "sourceType": "script"
            });
        });
    
    
        it('should parse "[1]"', () => {
            expect(parseScript('[1]', {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "ArrayExpression",
                        "elements": [{
                            "type": "Literal",
                            "value": 1,
                            "raw": "1"
                        }]
                    }
                }],
                "sourceType": "script"
            });
        });
        it('should parse "[1, 2]"', () => {
            expect(parseScript('[1, 2]', {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "ArrayExpression",
                        "elements": [{
                                "type": "Literal",
                                "value": 1,
                                "raw": "1"
                            },
                            {
                                "type": "Literal",
                                "value": 2,
                                "raw": "2"
                            }
                        ]
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "({ a: 1, })"', () => {
            expect(parseScript('({ a: 1, })', {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "ObjectExpression",
                        "properties": [{
                            "type": "Property",
                            "key": {
                                "type": "Identifier",
                                "name": "a"
                            },
                            "computed": false,
                            "value": {
                                "type": "Literal",
                                "value": 1,
                                "raw": "1"
                            },
                            "kind": "init",
                            "method": false,
                            "shorthand": false
                        }]
                    }
                }],
                "sourceType": "script"
            });
        });
        it('should parse "({ a: 1, b: 2, })"', () => {
            expect(parseScript('({ a: 1, b: 2, })', {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "ObjectExpression",
                        "properties": [{
                                "type": "Property",
                                "key": {
                                    "type": "Identifier",
                                    "name": "a"
                                },
                                "computed": false,
                                "value": {
                                    "type": "Literal",
                                    "value": 1,
                                    "raw": "1"
                                },
                                "kind": "init",
                                "method": false,
                                "shorthand": false
                            },
                            {
                                "type": "Property",
                                "key": {
                                    "type": "Identifier",
                                    "name": "b"
                                },
                                "computed": false,
                                "value": {
                                    "type": "Literal",
                                    "value": 2,
                                    "raw": "2"
                                },
                                "kind": "init",
                                "method": false,
                                "shorthand": false
                            }
                        ]
                    }
                }],
                "sourceType": "script"
            });
        });
    
    
        it('should parse "[[1]]"', () => {
            expect(parseScript('[[1]]', {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "ArrayExpression",
                        "elements": [{
                            "type": "ArrayExpression",
                            "elements": [{
                                "type": "Literal",
                                "value": 1,
                                "raw": "1"
                            }]
                        }]
                    }
                }],
                "sourceType": "script"
            });
        });
        it('should parse "let [a, , ] = (1);"', () => {
            expect(parseScript(`var a = 1;
        a * a;
        a / a;
        a % a;
        a + a;
        a - a;
        a << a;
        a >> a;
        a >>> a;
        a < a;
        a > a;
        a <= a;
        a >= a;
        a instanceof a;
        a in a;
        a == a;
        a != a;
        a === a;
        a !== a;
        a & a;
        a ^ a;
        a | a;
        a && a;
        a || a;`, {
                raw: true,
                ranges: true
            })).to.eql({
                "type": "Program",
                "start": 0,
                "end": 379,
                "body": [
                  {
                    "type": "VariableDeclaration",
                    "start": 0,
                    "end": 10,
                    "declarations": [
                      {
                        "type": "VariableDeclarator",
                        "start": 4,
                        "end": 9,
                        "id": {
                          "type": "Identifier",
                          "start": 4,
                          "end": 5,
                          "name": "a"
                        },
                        "init": {
                          "type": "Literal",
                          "start": 8,
                          "end": 9,
                          "value": 1,
                          "raw": "1"
                        }
                      }
                    ],
                    "kind": "var"
                  },
                  {
                    "type": "ExpressionStatement",
                    "start": 19,
                    "end": 25,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 19,
                      "end": 24,
                      "left": {
                        "type": "Identifier",
                        "start": 19,
                        "end": 20,
                        "name": "a"
                      },
                      "operator": "*",
                      "right": {
                        "type": "Identifier",
                        "start": 23,
                        "end": 24,
                        "name": "a"
                      }
                    }
                  },
                  {
                    "type": "ExpressionStatement",
                    "start": 34,
                    "end": 40,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 34,
                      "end": 39,
                      "left": {
                        "type": "Identifier",
                        "start": 34,
                        "end": 35,
                        "name": "a"
                      },
                      "operator": "/",
                      "right": {
                        "type": "Identifier",
                        "start": 38,
                        "end": 39,
                        "name": "a"
                      }
                    }
                  },
                  {
                    "type": "ExpressionStatement",
                    "start": 49,
                    "end": 55,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 49,
                      "end": 54,
                      "left": {
                        "type": "Identifier",
                        "start": 49,
                        "end": 50,
                        "name": "a"
                      },
                      "operator": "%",
                      "right": {
                        "type": "Identifier",
                        "start": 53,
                        "end": 54,
                        "name": "a"
                      }
                    }
                  },
                  {
                    "type": "ExpressionStatement",
                    "start": 64,
                    "end": 70,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 64,
                      "end": 69,
                      "left": {
                        "type": "Identifier",
                        "start": 64,
                        "end": 65,
                        "name": "a"
                      },
                      "operator": "+",
                      "right": {
                        "type": "Identifier",
                        "start": 68,
                        "end": 69,
                        "name": "a"
                      }
                    }
                  },
                  {
                    "type": "ExpressionStatement",
                    "start": 79,
                    "end": 85,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 79,
                      "end": 84,
                      "left": {
                        "type": "Identifier",
                        "start": 79,
                        "end": 80,
                        "name": "a"
                      },
                      "operator": "-",
                      "right": {
                        "type": "Identifier",
                        "start": 83,
                        "end": 84,
                        "name": "a"
                      }
                    }
                  },
                  {
                    "type": "ExpressionStatement",
                    "start": 94,
                    "end": 101,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 94,
                      "end": 100,
                      "left": {
                        "type": "Identifier",
                        "start": 94,
                        "end": 95,
                        "name": "a"
                      },
                      "operator": "<<",
                      "right": {
                        "type": "Identifier",
                        "start": 99,
                        "end": 100,
                        "name": "a"
                      }
                    }
                  },
                  {
                    "type": "ExpressionStatement",
                    "start": 110,
                    "end": 117,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 110,
                      "end": 116,
                      "left": {
                        "type": "Identifier",
                        "start": 110,
                        "end": 111,
                        "name": "a"
                      },
                      "operator": ">>",
                      "right": {
                        "type": "Identifier",
                        "start": 115,
                        "end": 116,
                        "name": "a"
                      }
                    }
                  },
                  {
                    "type": "ExpressionStatement",
                    "start": 126,
                    "end": 134,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 126,
                      "end": 133,
                      "left": {
                        "type": "Identifier",
                        "start": 126,
                        "end": 127,
                        "name": "a"
                      },
                      "operator": ">>>",
                      "right": {
                        "type": "Identifier",
                        "start": 132,
                        "end": 133,
                        "name": "a"
                      }
                    }
                  },
                  {
                    "type": "ExpressionStatement",
                    "start": 143,
                    "end": 149,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 143,
                      "end": 148,
                      "left": {
                        "type": "Identifier",
                        "start": 143,
                        "end": 144,
                        "name": "a"
                      },
                      "operator": "<",
                      "right": {
                        "type": "Identifier",
                        "start": 147,
                        "end": 148,
                        "name": "a"
                      }
                    }
                  },
                  {
                    "type": "ExpressionStatement",
                    "start": 158,
                    "end": 164,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 158,
                      "end": 163,
                      "left": {
                        "type": "Identifier",
                        "start": 158,
                        "end": 159,
                        "name": "a"
                      },
                      "operator": ">",
                      "right": {
                        "type": "Identifier",
                        "start": 162,
                        "end": 163,
                        "name": "a"
                      }
                    }
                  },
                  {
                    "type": "ExpressionStatement",
                    "start": 173,
                    "end": 180,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 173,
                      "end": 179,
                      "left": {
                        "type": "Identifier",
                        "start": 173,
                        "end": 174,
                        "name": "a"
                      },
                      "operator": "<=",
                      "right": {
                        "type": "Identifier",
                        "start": 178,
                        "end": 179,
                        "name": "a"
                      }
                    }
                  },
                  {
                    "type": "ExpressionStatement",
                    "start": 189,
                    "end": 196,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 189,
                      "end": 195,
                      "left": {
                        "type": "Identifier",
                        "start": 189,
                        "end": 190,
                        "name": "a"
                      },
                      "operator": ">=",
                      "right": {
                        "type": "Identifier",
                        "start": 194,
                        "end": 195,
                        "name": "a"
                      }
                    }
                  },
                  {
                    "type": "ExpressionStatement",
                    "start": 205,
                    "end": 220,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 205,
                      "end": 219,
                      "left": {
                        "type": "Identifier",
                        "start": 205,
                        "end": 206,
                        "name": "a"
                      },
                      "operator": "instanceof",
                      "right": {
                        "type": "Identifier",
                        "start": 218,
                        "end": 219,
                        "name": "a"
                      }
                    }
                  },
                  {
                    "type": "ExpressionStatement",
                    "start": 229,
                    "end": 236,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 229,
                      "end": 235,
                      "left": {
                        "type": "Identifier",
                        "start": 229,
                        "end": 230,
                        "name": "a"
                      },
                      "operator": "in",
                      "right": {
                        "type": "Identifier",
                        "start": 234,
                        "end": 235,
                        "name": "a"
                      }
                    }
                  },
                  {
                    "type": "ExpressionStatement",
                    "start": 245,
                    "end": 252,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 245,
                      "end": 251,
                      "left": {
                        "type": "Identifier",
                        "start": 245,
                        "end": 246,
                        "name": "a"
                      },
                      "operator": "==",
                      "right": {
                        "type": "Identifier",
                        "start": 250,
                        "end": 251,
                        "name": "a"
                      }
                    }
                  },
                  {
                    "type": "ExpressionStatement",
                    "start": 261,
                    "end": 268,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 261,
                      "end": 267,
                      "left": {
                        "type": "Identifier",
                        "start": 261,
                        "end": 262,
                        "name": "a"
                      },
                      "operator": "!=",
                      "right": {
                        "type": "Identifier",
                        "start": 266,
                        "end": 267,
                        "name": "a"
                      }
                    }
                  },
                  {
                    "type": "ExpressionStatement",
                    "start": 277,
                    "end": 285,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 277,
                      "end": 284,
                      "left": {
                        "type": "Identifier",
                        "start": 277,
                        "end": 278,
                        "name": "a"
                      },
                      "operator": "===",
                      "right": {
                        "type": "Identifier",
                        "start": 283,
                        "end": 284,
                        "name": "a"
                      }
                    }
                  },
                  {
                    "type": "ExpressionStatement",
                    "start": 294,
                    "end": 302,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 294,
                      "end": 301,
                      "left": {
                        "type": "Identifier",
                        "start": 294,
                        "end": 295,
                        "name": "a"
                      },
                      "operator": "!==",
                      "right": {
                        "type": "Identifier",
                        "start": 300,
                        "end": 301,
                        "name": "a"
                      }
                    }
                  },
                  {
                    "type": "ExpressionStatement",
                    "start": 311,
                    "end": 317,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 311,
                      "end": 316,
                      "left": {
                        "type": "Identifier",
                        "start": 311,
                        "end": 312,
                        "name": "a"
                      },
                      "operator": "&",
                      "right": {
                        "type": "Identifier",
                        "start": 315,
                        "end": 316,
                        "name": "a"
                      }
                    }
                  },
                  {
                    "type": "ExpressionStatement",
                    "start": 326,
                    "end": 332,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 326,
                      "end": 331,
                      "left": {
                        "type": "Identifier",
                        "start": 326,
                        "end": 327,
                        "name": "a"
                      },
                      "operator": "^",
                      "right": {
                        "type": "Identifier",
                        "start": 330,
                        "end": 331,
                        "name": "a"
                      }
                    }
                  },
                  {
                    "type": "ExpressionStatement",
                    "start": 341,
                    "end": 347,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 341,
                      "end": 346,
                      "left": {
                        "type": "Identifier",
                        "start": 341,
                        "end": 342,
                        "name": "a"
                      },
                      "operator": "|",
                      "right": {
                        "type": "Identifier",
                        "start": 345,
                        "end": 346,
                        "name": "a"
                      }
                    }
                  },
                  {
                    "type": "ExpressionStatement",
                    "start": 356,
                    "end": 363,
                    "expression": {
                      "type": "LogicalExpression",
                      "start": 356,
                      "end": 362,
                      "left": {
                        "type": "Identifier",
                        "start": 356,
                        "end": 357,
                        "name": "a"
                      },
                      "operator": "&&",
                      "right": {
                        "type": "Identifier",
                        "start": 361,
                        "end": 362,
                        "name": "a"
                      }
                    }
                  },
                  {
                    "type": "ExpressionStatement",
                    "start": 372,
                    "end": 379,
                    "expression": {
                      "type": "LogicalExpression",
                      "start": 372,
                      "end": 378,
                      "left": {
                        "type": "Identifier",
                        "start": 372,
                        "end": 373,
                        "name": "a"
                      },
                      "operator": "||",
                      "right": {
                        "type": "Identifier",
                        "start": 377,
                        "end": 378,
                        "name": "a"
                      }
                    }
                  }
                ],
                "sourceType": "script"
              });
        });
    
        it('should parse "new new A();"', () => {
            expect(parseScript('new new A();', {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "NewExpression",
                        "callee": {
                            "type": "NewExpression",
                            "callee": {
                                "type": "Identifier",
                                "name": "A"
                            },
                            "arguments": []
                        },
                        "arguments": []
                    }
                }],
                "sourceType": "script"
            });
        });
    
    
        it('should parse "const a = 1 + 1;"', () => {
            expect(parseScript(`const a = 1 + 1;`, {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "VariableDeclaration",
                    "declarations": [{
                        "type": "VariableDeclarator",
                        "id": {
                            "type": "Identifier",
                            "name": "a"
                        },
                        "init": {
                            "type": "BinaryExpression",
                            "operator": "+",
                            "left": {
                                "type": "Literal",
                                "value": 1,
                                "raw": "1"
                            },
                            "right": {
                                "type": "Literal",
                                "value": 1,
                                "raw": "1"
                            }
                        }
                    }],
                    "kind": "const"
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "var {a} = 1;"', () => {
            expect(parseScript('var {a} = 1;', {
                raw: true,
                ranges: true
            })).to.eql({
                "type": "Program",
                "start": 0,
                "end": 12,
                "body": [
                  {
                    "type": "VariableDeclaration",
                    "start": 0,
                    "end": 12,
                    "declarations": [
                      {
                        "type": "VariableDeclarator",
                        "start": 4,
                        "end": 11,
                        "id": {
                          "type": "ObjectPattern",
                          "start": 4,
                          "end": 7,
                          "properties": [
                            {
                              "type": "Property",
                              "start": 5,
                              "end": 6,
                              "method": false,
                              "shorthand": true,
                              "computed": false,
                              "key": {
                                "type": "Identifier",
                                "start": 5,
                                "end": 6,
                                "name": "a"
                              },
                              "kind": "init",
                              "value": {
                                "type": "Identifier",
                                "start": 5,
                                "end": 6,
                                "name": "a"
                              }
                            }
                          ]
                        },
                        "init": {
                          "type": "Literal",
                          "start": 10,
                          "end": 11,
                          "value": 1,
                          "raw": "1"
                        }
                      }
                    ],
                    "kind": "var"
                  }
                ],
                "sourceType": "script"
              });
        });
    
        it('should parse "var [{a = 1}] = 2;"', () => {
            expect(parseScript('var [{a = 1}] = 2;', {
                raw: true,
                ranges: true
            })).to.eql({
                "type": "Program",
                "start": 0,
                "end": 18,
                "body": [
                  {
                    "type": "VariableDeclaration",
                    "start": 0,
                    "end": 18,
                    "declarations": [
                      {
                        "type": "VariableDeclarator",
                        "start": 4,
                        "end": 17,
                        "id": {
                          "type": "ArrayPattern",
                          "start": 4,
                          "end": 13,
                          "elements": [
                            {
                              "type": "ObjectPattern",
                              "start": 5,
                              "end": 12,
                              "properties": [
                                {
                                  "type": "Property",
                                  "start": 6,
                                  "end": 11,
                                  "method": false,
                                  "shorthand": true,
                                  "computed": false,
                                  "key": {
                                    "type": "Identifier",
                                    "start": 6,
                                    "end": 7,
                                    "name": "a"
                                  },
                                  "kind": "init",
                                  "value": {
                                    "type": "AssignmentPattern",
                                    "start": 6,
                                    "end": 11,
                                    "left": {
                                      "type": "Identifier",
                                      "start": 6,
                                      "end": 7,
                                      "name": "a"
                                    },
                                    "right": {
                                      "type": "Literal",
                                      "start": 10,
                                      "end": 11,
                                      "value": 1,
                                      "raw": "1"
                                    }
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        "init": {
                          "type": "Literal",
                          "start": 16,
                          "end": 17,
                          "value": 2,
                          "raw": "2"
                        }
                      }
                    ],
                    "kind": "var"
                  }
                ],
                "sourceType": "script"
              });
        });
    
    
        it('should parse "var [{__proto__:a, __proto__:b}] = 1;"', () => {
            expect(parseScript('var [{__proto__:a, __proto__:b}] = 1;', {
                raw: true,
                locations: true,
                ranges: true
            })).to.eql({
              "type": "Program",
              "body": [
                  {
                      "type": "VariableDeclaration",
                      "declarations": [
                          {
                              "type": "VariableDeclarator",
                              "init": {
                                  "type": "Literal",
                                  "value": 1,
                                  "start": 35,
                                  "end": 36,
                                  "loc": {
                                      "start": {
                                          "line": 1,
                                          "column": 35
                                      },
                                      "end": {
                                          "line": 1,
                                          "column": 36
                                      }
                                  },
                                  "raw": "1"
                              },
                              "id": {
                                  "type": "ArrayPattern",
                                  "elements": [
                                      {
                                          "type": "ObjectPattern",
                                          "properties": [
                                              {
                                                  "type": "Property",
                                                  "kind": "init",
                                                  "key": {
                                                      "type": "Identifier",
                                                      "name": "__proto__",
                                                      "start": 6,
                                                      "end": 15,
                                                      "loc": {
                                                          "start": {
                                                              "line": 1,
                                                              "column": 6
                                                          },
                                                          "end": {
                                                              "line": 1,
                                                              "column": 15
                                                          }
                                                      }
                                                  },
                                                  "computed": false,
                                                  "value": {
                                                      "type": "Identifier",
                                                      "name": "a",
                                                      "start": 16,
                                                      "end": 17,
                                                      "loc": {
                                                          "start": {
                                                              "line": 1,
                                                              "column": 16
                                                          },
                                                          "end": {
                                                              "line": 1,
                                                              "column": 17
                                                          }
                                                      }
                                                  },
                                                  "method": false,
                                                  "shorthand": false,
                                                  "start": 6,
                                                  "end": 17,
                                                  "loc": {
                                                      "start": {
                                                          "line": 1,
                                                          "column": 6
                                                      },
                                                      "end": {
                                                          "line": 1,
                                                          "column": 17
                                                      }
                                                  }
                                              },
                                              {
                                                  "type": "Property",
                                                  "kind": "init",
                                                  "key": {
                                                      "type": "Identifier",
                                                      "name": "__proto__",
                                                      "start": 19,
                                                      "end": 28,
                                                      "loc": {
                                                          "start": {
                                                              "line": 1,
                                                              "column": 19
                                                          },
                                                          "end": {
                                                              "line": 1,
                                                              "column": 28
                                                          }
                                                      }
                                                  },
                                                  "computed": false,
                                                  "value": {
                                                      "type": "Identifier",
                                                      "name": "b",
                                                      "start": 29,
                                                      "end": 30,
                                                      "loc": {
                                                          "start": {
                                                              "line": 1,
                                                              "column": 29
                                                          },
                                                          "end": {
                                                              "line": 1,
                                                              "column": 30
                                                          }
                                                      }
                                                  },
                                                  "method": false,
                                                  "shorthand": false,
                                                  "start": 19,
                                                  "end": 30,
                                                  "loc": {
                                                      "start": {
                                                          "line": 1,
                                                          "column": 19
                                                      },
                                                      "end": {
                                                          "line": 1,
                                                          "column": 30
                                                      }
                                                  }
                                              }
                                          ],
                                          "start": 5,
                                          "end": 31,
                                          "loc": {
                                              "start": {
                                                  "line": 1,
                                                  "column": 5
                                              },
                                              "end": {
                                                  "line": 1,
                                                  "column": 31
                                              }
                                          }
                                      }
                                  ],
                                  "start": 4,
                                  "end": 32,
                                  "loc": {
                                      "start": {
                                          "line": 1,
                                          "column": 4
                                      },
                                      "end": {
                                          "line": 1,
                                          "column": 32
                                      }
                                  }
                              },
                              "start": 4,
                              "end": 36,
                              "loc": {
                                  "start": {
                                      "line": 1,
                                      "column": 4
                                  },
                                  "end": {
                                      "line": 1,
                                      "column": 36
                                  }
                              }
                          }
                      ],
                      "kind": "var",
                      "start": 0,
                      "end": 37,
                      "loc": {
                          "start": {
                              "line": 1,
                              "column": 0
                          },
                          "end": {
                              "line": 1,
                              "column": 37
                          }
                      }
                  }
              ],
              "sourceType": "script",
              "start": 0,
              "end": 37,
              "loc": {
                  "start": {
                      "line": 1,
                      "column": 0
                  },
                  "end": {
                      "line": 1,
                      "column": 37
                  }
              }
          });
        });
    
        it('should parse "var {a, b: {c: a}} = 1;"', () => {
            expect(parseScript('var {a, b: {c: a}} = 1;', {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "VariableDeclaration",
                    "declarations": [{
                        "type": "VariableDeclarator",
                        "id": {
                            "type": "ObjectPattern",
                            "properties": [{
                                    "type": "Property",
                                    "key": {
                                        "type": "Identifier",
                                        "name": "a"
                                    },
                                    "computed": false,
                                    "value": {
                                        "type": "Identifier",
                                        "name": "a"
                                    },
                                    "kind": "init",
                                    "method": false,
                                    "shorthand": true
                                },
                                {
                                    "type": "Property",
                                    "key": {
                                        "type": "Identifier",
                                        "name": "b"
                                    },
                                    "computed": false,
                                    "value": {
                                        "type": "ObjectPattern",
                                        "properties": [{
                                            "type": "Property",
                                            "key": {
                                                "type": "Identifier",
                                                "name": "c"
                                            },
                                            "computed": false,
                                            "value": {
                                                "type": "Identifier",
                                                "name": "a"
                                            },
                                            "kind": "init",
                                            "method": false,
                                            "shorthand": false
                                        }]
                                    },
                                    "kind": "init",
                                    "method": false,
                                    "shorthand": false
                                }
                            ]
                        },
                        "init": {
                            "type": "Literal",
                            "value": 1,
                            "raw": "1"
                        }
                    }],
                    "kind": "var"
                }],
                "sourceType": "script"
            });
        });
    
    
        it('should parse "var a, {b: {c: a}} = 1;"', () => {
            expect(parseScript('var a, {b: {c: a}} = 1;', {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "VariableDeclaration",
                    "declarations": [{
                            "type": "VariableDeclarator",
                            "id": {
                                "type": "Identifier",
                                "name": "a"
                            },
                            "init": null
                        },
                        {
                            "type": "VariableDeclarator",
                            "id": {
                                "type": "ObjectPattern",
                                "properties": [{
                                    "type": "Property",
                                    "key": {
                                        "type": "Identifier",
                                        "name": "b"
                                    },
                                    "computed": false,
                                    "value": {
                                        "type": "ObjectPattern",
                                        "properties": [{
                                            "type": "Property",
                                            "key": {
                                                "type": "Identifier",
                                                "name": "c"
                                            },
                                            "computed": false,
                                            "value": {
                                                "type": "Identifier",
                                                "name": "a"
                                            },
                                            "kind": "init",
                                            "method": false,
                                            "shorthand": false
                                        }]
                                    },
                                    "kind": "init",
                                    "method": false,
                                    "shorthand": false
                                }]
                            },
                            "init": {
                                "type": "Literal",
                                "value": 1,
                                "raw": "1"
                            }
                        }
                    ],
                    "kind": "var"
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "var {let, yield} = 1;"', () => {
            expect(parseScript('(a, b, [c]) => 1', {
                raw: true,
                ranges: true
            })).to.eql({
                "type": "Program",
                "start": 0,
                "end": 16,
                "body": [
                  {
                    "type": "ExpressionStatement",
                    "start": 0,
                    "end": 16,
                    "expression": {
                      "type": "ArrowFunctionExpression",
                      "start": 0,
                      "end": 16,
                      "id": null,
                      "generator": false,
                      "expression": true,
                      "async": false,
                      "params": [
                        {
                          "type": "Identifier",
                          "start": 1,
                          "end": 2,
                          "name": "a"
                        },
                        {
                          "type": "Identifier",
                          "start": 4,
                          "end": 5,
                          "name": "b"
                        },
                        {
                          "type": "ArrayPattern",
                          "start": 7,
                          "end": 10,
                          "elements": [
                            {
                              "type": "Identifier",
                              "start": 8,
                              "end": 9,
                              "name": "c"
                            }
                          ]
                        }
                      ],
                      "body": {
                        "type": "Literal",
                        "start": 15,
                        "end": 16,
                        "value": 1,
                        "raw": "1"
                      }
                    }
                  }
                ],
                "sourceType": "script"
              });
        });
    
    
    
        it('should parse "try {} catch ({a = 1}) {}"', () => {
            expect(parseScript('try {} catch ({a = 1}) {}', {
                raw: true,
                ranges: true,
                locations: true
            })).to.eql({
              "type": "Program",
              "body": [
                  {
                      "type": "TryStatement",
                      "block": {
                          "type": "BlockStatement",
                          "body": [],
                          "start": 4,
                          "end": 6,
                          "loc": {
                              "start": {
                                  "line": 1,
                                  "column": 4
                              },
                              "end": {
                                  "line": 1,
                                  "column": 6
                              }
                          }
                      },
                      "handler": {
                          "type": "CatchClause",
                          "param": {
                              "type": "ObjectPattern",
                              "properties": [
                                  {
                                      "type": "Property",
                                      "kind": "init",
                                      "key": {
                                          "type": "Identifier",
                                          "name": "a",
                                          "start": 15,
                                          "end": 16,
                                          "loc": {
                                              "start": {
                                                  "line": 1,
                                                  "column": 15
                                              },
                                              "end": {
                                                  "line": 1,
                                                  "column": 16
                                              }
                                          }
                                      },
                                      "computed": false,
                                      "value": {
                                          "type": "AssignmentPattern",
                                          "left": {
                                              "type": "Identifier",
                                              "name": "a",
                                              "start": 15,
                                              "end": 16,
                                              "loc": {
                                                  "start": {
                                                      "line": 1,
                                                      "column": 15
                                                  },
                                                  "end": {
                                                      "line": 1,
                                                      "column": 16
                                                  }
                                              }
                                          },
                                          "right": {
                                              "type": "Literal",
                                              "value": 1,
                                              "start": 19,
                                              "end": 20,
                                              "loc": {
                                                  "start": {
                                                      "line": 1,
                                                      "column": 19
                                                  },
                                                  "end": {
                                                      "line": 1,
                                                      "column": 20
                                                  }
                                              },
                                              "raw": "1"
                                          },
                                          "start": 15,
                                          "end": 20,
                                          "loc": {
                                              "start": {
                                                  "line": 1,
                                                  "column": 15
                                              },
                                              "end": {
                                                  "line": 1,
                                                  "column": 20
                                              }
                                          }
                                      },
                                      "method": false,
                                      "shorthand": true,
                                      "start": 15,
                                      "end": 20,
                                      "loc": {
                                          "start": {
                                              "line": 1,
                                              "column": 15
                                          },
                                          "end": {
                                              "line": 1,
                                              "column": 20
                                          }
                                      }
                                  }
                              ],
                              "start": 7,
                              "end": 21,
                              "loc": {
                                  "start": {
                                      "line": 1,
                                      "column": 7
                                  },
                                  "end": {
                                      "line": 1,
                                      "column": 21
                                  }
                              }
                          },
                          "body": {
                              "type": "BlockStatement",
                              "body": [],
                              "start": 23,
                              "end": 25,
                              "loc": {
                                  "start": {
                                      "line": 1,
                                      "column": 23
                                  },
                                  "end": {
                                      "line": 1,
                                      "column": 25
                                  }
                              }
                          },
                          "start": 7,
                          "end": 25,
                          "loc": {
                              "start": {
                                  "line": 1,
                                  "column": 7
                              },
                              "end": {
                                  "line": 1,
                                  "column": 25
                              }
                          }
                      },
                      "finalizer": null,
                      "start": 0,
                      "end": 25,
                      "loc": {
                          "start": {
                              "line": 1,
                              "column": 0
                          },
                          "end": {
                              "line": 1,
                              "column": 25
                          }
                      }
                  }
              ],
              "sourceType": "script",
              "start": 0,
              "end": 25,
              "loc": {
                  "start": {
                      "line": 1,
                      "column": 0
                  },
                  "end": {
                      "line": 1,
                      "column": 25
                  }
              }
          });
        });
    
    
        it('should parse "[ 1, 2, 3, ]"', () => {
            expect(parseScript('[ 1, 2, 3, ]', {
                raw: true,
                ranges: true
            })).to.eql({
                "type": "Program",
                "start": 0,
                "end": 12,
                "body": [
                  {
                    "type": "ExpressionStatement",
                    "start": 0,
                    "end": 12,
                    "expression": {
                      "type": "ArrayExpression",
                      "start": 0,
                      "end": 12,
                      "elements": [
                        {
                          "type": "Literal",
                          "start": 2,
                          "end": 3,
                          "value": 1,
                          "raw": "1"
                        },
                        {
                          "type": "Literal",
                          "start": 5,
                          "end": 6,
                          "value": 2,
                          "raw": "2"
                        },
                        {
                          "type": "Literal",
                          "start": 8,
                          "end": 9,
                          "value": 3,
                          "raw": "3"
                        }
                      ]
                    }
                  }
                ],
                "sourceType": "script"
              });
        });
    
    
        it('should parse "() => 1, 2"', () => {
            expect(parseScript('() => 1, 2', {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "SequenceExpression",
                        "expressions": [{
                                "type": "ArrowFunctionExpression",
                                "id": null,
                                "params": [],
                                "body": {
                                    "type": "Literal",
                                    "value": 1,
                                    "raw": "1"
                                },
                                "generator": false,
                                "expression": true,
                                "async": false
                            },
                            {
                                "type": "Literal",
                                "value": 2,
                                "raw": "2"
                            }
                        ]
                    }
                }],
                "sourceType": "script"
            });
        });
    
    
        it('should parse "() => 1 + 2"', () => {
            expect(parseScript('() => 1 + 2', {
                raw: true,
                ranges: true
            })).to.eql({
                "type": "Program",
                "start": 0,
                "end": 11,
                "body": [
                  {
                    "type": "ExpressionStatement",
                    "start": 0,
                    "end": 11,
                    "expression": {
                      "type": "ArrowFunctionExpression",
                      "start": 0,
                      "end": 11,
                      "id": null,
                      "generator": false,
                      "expression": true,
                      "async": false,
                      "params": [],
                      "body": {
                        "type": "BinaryExpression",
                        "start": 6,
                        "end": 11,
                        "left": {
                          "type": "Literal",
                          "start": 6,
                          "end": 7,
                          "value": 1,
                          "raw": "1"
                        },
                        "operator": "+",
                        "right": {
                          "type": "Literal",
                          "start": 10,
                          "end": 11,
                          "value": 2,
                          "raw": "2"
                        }
                      }
                    }
                  }
                ],
                "sourceType": "script"
              });
        });
        it('should parse "eval => "use strict"', () => {
            expect(parseScript('eval => "use strict"', {
                raw: true,
                ranges: true
            })).to.eql({
                "type": "Program",
                "start": 0,
                "end": 20,
                "body": [
                  {
                    "type": "ExpressionStatement",
                    "start": 0,
                    "end": 20,
                    "expression": {
                      "type": "ArrowFunctionExpression",
                      "start": 0,
                      "end": 20,
                      "id": null,
                      "generator": false,
                      "expression": true,
                      "async": false,
                      "params": [
                        {
                          "type": "Identifier",
                          "start": 0,
                          "end": 4,
                          "name": "eval"
                        }
                      ],
                      "body": {
                        "type": "Literal",
                        "start": 8,
                        "end": 20,
                        "value": "use strict",
                        "raw": "\"use strict\""
                      }
                    }
                  }
                ],
                "sourceType": "script"
              });
        });
    
    
        it('should parse "a.a *= 1"', () => {
            expect(parseScript('a.a *= 1', {
                raw: true,
                ranges: true
            })).to.eql({
                "type": "Program",
                "start": 0,
                "end": 8,
                "body": [
                  {
                    "type": "ExpressionStatement",
                    "start": 0,
                    "end": 8,
                    "expression": {
                      "type": "AssignmentExpression",
                      "start": 0,
                      "end": 8,
                      "operator": "*=",
                      "left": {
                        "type": "MemberExpression",
                        "start": 0,
                        "end": 3,
                        "object": {
                          "type": "Identifier",
                          "start": 0,
                          "end": 1,
                          "name": "a"
                        },
                        "property": {
                          "type": "Identifier",
                          "start": 2,
                          "end": 3,
                          "name": "a"
                        },
                        "computed": false
                      },
                      "right": {
                        "type": "Literal",
                        "start": 7,
                        "end": 8,
                        "value": 1,
                        "raw": "1"
                      }
                    }
                  }
                ],
                "sourceType": "script"
              });
        });
        it('should parse "[1].a = 2"', () => {
            expect(parseScript('[1].a = 2', {
                raw: true,
                ranges: true
            })).to.eql({
                "type": "Program",
                "start": 0,
                "end": 9,
                "body": [
                  {
                    "type": "ExpressionStatement",
                    "start": 0,
                    "end": 9,
                    "expression": {
                      "type": "AssignmentExpression",
                      "start": 0,
                      "end": 9,
                      "operator": "=",
                      "left": {
                        "type": "MemberExpression",
                        "start": 0,
                        "end": 5,
                        "object": {
                          "type": "ArrayExpression",
                          "start": 0,
                          "end": 3,
                          "elements": [
                            {
                              "type": "Literal",
                              "start": 1,
                              "end": 2,
                              "value": 1,
                              "raw": "1"
                            }
                          ]
                        },
                        "property": {
                          "type": "Identifier",
                          "start": 4,
                          "end": 5,
                          "name": "a"
                        },
                        "computed": false
                      },
                      "right": {
                        "type": "Literal",
                        "start": 8,
                        "end": 9,
                        "value": 2,
                        "raw": "2"
                      }
                    }
                  }
                ],
                "sourceType": "script"
              });
        });
    
        it('should parse "(class {get a() {}})"', () => {
            expect(parseScript('(class {get a() {}})', {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "ClassExpression",
                        "id": null,
                        "superClass": null,
                        "body": {
                            "type": "ClassBody",
                            "body": [{
                                "type": "MethodDefinition",
                                "key": {
                                    "type": "Identifier",
                                    "name": "a"
                                },
                                "computed": false,
                                "value": {
                                    "type": "FunctionExpression",
                                    "id": null,
                                    "params": [],
                                    "body": {
                                        "type": "BlockStatement",
                                        "body": []
                                    },
                                    "generator": false,
                                    "expression": false,
                                    "async": false
                                },
                                "kind": "get",
                                "static": false
                            }]
                        }
                    }
                }],
                "sourceType": "script"
            });
        });
    
    
        it('should parse "(class {set a(b) {"use strict";}})"', () => {
            expect(parseScript('(class {set a(b) {"use strict";}})', {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "ClassExpression",
                        "id": null,
                        "superClass": null,
                        "body": {
                            "type": "ClassBody",
                            "body": [{
                                "type": "MethodDefinition",
                                "key": {
                                    "type": "Identifier",
                                    "name": "a"
                                },
                                "computed": false,
                                "value": {
                                    "type": "FunctionExpression",
                                    "id": null,
                                    "params": [{
                                        "type": "Identifier",
                                        "name": "b"
                                    }],
                                    "body": {
                                        "type": "BlockStatement",
                                        "body": [{
                                            "type": "ExpressionStatement",
                                            "expression": {
                                                "type": "Literal",
                                                "value": "use strict",
                                                "raw": "\"use strict\""
                                            }
                                        }]
                                    },
                                    "generator": false,
                                    "expression": false,
                                    "async": false
                                },
                                "kind": "set",
                                "static": false
                            }]
                        }
                    }
                }],
                "sourceType": "script"
            });
        });
        it('should parse "(class {3() {}})"', () => {
            expect(parseScript('(class {3() {}})', {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "ClassExpression",
                        "id": null,
                        "superClass": null,
                        "body": {
                            "type": "ClassBody",
                            "body": [{
                                "type": "MethodDefinition",
                                "key": {
                                    "type": "Literal",
                                    "value": 3,
                                    "raw": "3"
                                },
                                "computed": false,
                                "value": {
                                    "type": "FunctionExpression",
                                    "id": null,
                                    "params": [],
                                    "body": {
                                        "type": "BlockStatement",
                                        "body": []
                                    },
                                    "generator": false,
                                    "expression": false,
                                    "async": false
                                },
                                "kind": "method",
                                "static": false
                            }]
                        }
                    }
                }],
                "sourceType": "script"
            });
        });

        it('should parse "(class{[1+2](){}})"', () => {
            expect(parseScript('(class{[1+2](){}})', {
                raw: true,
                ranges: true
            })).to.eql({
                "type": "Program",
                "start": 0,
                "end": 18,
                "body": [
                  {
                    "type": "ExpressionStatement",
                    "start": 0,
                    "end": 18,
                    "expression": {
                      "type": "ClassExpression",
                      "start": 1,
                      "end": 17,
                      "id": null,
                      "superClass": null,
                      "body": {
                        "type": "ClassBody",
                        "start": 6,
                        "end": 17,
                        "body": [
                          {
                            "type": "MethodDefinition",
                            "start": 7,
                            "end": 16,
                            "computed": true,
                            "key": {
                              "type": "BinaryExpression",
                              "start": 8,
                              "end": 11,
                              "left": {
                                "type": "Literal",
                                "start": 8,
                                "end": 9,
                                "value": 1,
                                "raw": "1"
                              },
                              "operator": "+",
                              "right": {
                                "type": "Literal",
                                "start": 10,
                                "end": 11,
                                "value": 2,
                                "raw": "2"
                              }
                            },
                            "static": false,
                            "kind": "method",
                            "value": {
                              "type": "FunctionExpression",
                              "start": 12,
                              "end": 16,
                              "id": null,
                              "generator": false,
                              "expression": false,
                              "async": false,
                              "params": [],
                              "body": {
                                "type": "BlockStatement",
                                "start": 14,
                                "end": 16,
                                "body": []
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                ],
                "sourceType": "script"
              });
        });
    
        it('should parse "(class extends (a,b) {})"', () => {
            expect(parseScript('(class extends (a,b) {})', {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "ClassExpression",
                        "id": null,
                        "superClass": {
                            "type": "SequenceExpression",
                            "expressions": [{
                                    "type": "Identifier",
                                    "name": "a"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "b"
                                }
                            ]
                        },
                        "body": {
                            "type": "ClassBody",
                            "body": []
                        }
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "a[b] = b"', () => {
            expect(parseScript('a[b] = b')).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                            "type": "MemberExpression",
                            "computed": true,
                            "object": {
                                "type": "Identifier",
                                "name": "a"
                            },
                            "property": {
                                "type": "Identifier",
                                "name": "b"
                            }
                        },
                        "right": {
                            "type": "Identifier",
                            "name": "b"
                        }
                    }
                }],
                "sourceType": "script"
            });
        });
        it('should parse "(function a() { b; c() });"', () => {
            expect(parseScript('(function a() { b; c() });')).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "FunctionExpression",
                        "id": {
                            "type": "Identifier",
                            "name": "a"
                        },
                        "params": [],
                        "body": {
                            "type": "BlockStatement",
                            "body": [{
                                    "type": "ExpressionStatement",
                                    "expression": {
                                        "type": "Identifier",
                                        "name": "b"
                                    }
                                },
                                {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                            "type": "Identifier",
                                            "name": "c"
                                        },
                                        "arguments": []
                                    }
                                }
                            ]
                        },
                        "generator": false,
                        "expression": false,
                        "async": false
                    }
                }],
                "sourceType": "script"
            });
        });
    
    
        it('should parse "(function arguments() { });"', () => {
            expect(parseScript('(function arguments() { });')).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "FunctionExpression",
                        "id": {
                            "type": "Identifier",
                            "name": "arguments"
                        },
                        "params": [],
                        "body": {
                            "type": "BlockStatement",
                            "body": []
                        },
                        "generator": false,
                        "expression": false,
                        "async": false
                    }
                }],
                "sourceType": "script"
            });
        });
        it('should parse "(function a(b, c) { })"', () => {
            expect(parseScript('(function a(b, c) { })')).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "FunctionExpression",
                        "id": {
                            "type": "Identifier",
                            "name": "a"
                        },
                        "params": [{
                                "type": "Identifier",
                                "name": "b"
                            },
                            {
                                "type": "Identifier",
                                "name": "c"
                            }
                        ],
                        "body": {
                            "type": "BlockStatement",
                            "body": []
                        },
                        "generator": false,
                        "expression": false,
                        "async": false
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "(function(a = b){})"', () => {
            expect(parseScript('(function(a = b){})')).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "FunctionExpression",
                        "id": null,
                        "params": [{
                            "type": "AssignmentPattern",
                            "left": {
                                "type": "Identifier",
                                "name": "a"
                            },
                            "right": {
                                "type": "Identifier",
                                "name": "b"
                            }
                        }],
                        "body": {
                            "type": "BlockStatement",
                            "body": []
                        },
                        "generator": false,
                        "expression": false,
                        "async": false
                    }
                }],
                "sourceType": "script"
            });
        });
        it('should parse "(function(a, ...b){})"', () => {
            expect(parseScript('(function(a, ...b){})')).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "FunctionExpression",
                        "id": null,
                        "params": [{
                                "type": "Identifier",
                                "name": "a"
                            },
                            {
                                "type": "RestElement",
                                "argument": {
                                    "type": "Identifier",
                                    "name": "b"
                                }
                            }
                        ],
                        "body": {
                            "type": "BlockStatement",
                            "body": []
                        },
                        "generator": false,
                        "expression": false,
                        "async": false
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "(function({a}){})"', () => {
            expect(parseScript('(function({a}){})')).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "FunctionExpression",
                        "id": null,
                        "params": [{
                            "type": "ObjectPattern",
                            "properties": [{
                                "type": "Property",
                                "key": {
                                    "type": "Identifier",
                                    "name": "a"
                                },
                                "computed": false,
                                "value": {
                                    "type": "Identifier",
                                    "name": "a"
                                },
                                "kind": "init",
                                "method": false,
                                "shorthand": true
                            }]
                        }],
                        "body": {
                            "type": "BlockStatement",
                            "body": []
                        },
                        "generator": false,
                        "expression": false,
                        "async": false
                    }
                }],
                "sourceType": "script"
            });
        });
    
    
        it('should parse "(function({a: b, a: c}){})"', () => {
            expect(parseScript('(function({a: b, a: c}){})')).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "FunctionExpression",
                        "id": null,
                        "params": [{
                            "type": "ObjectPattern",
                            "properties": [{
                                    "type": "Property",
                                    "key": {
                                        "type": "Identifier",
                                        "name": "a"
                                    },
                                    "computed": false,
                                    "value": {
                                        "type": "Identifier",
                                        "name": "b"
                                    },
                                    "kind": "init",
                                    "method": false,
                                    "shorthand": false
                                },
                                {
                                    "type": "Property",
                                    "key": {
                                        "type": "Identifier",
                                        "name": "a"
                                    },
                                    "computed": false,
                                    "value": {
                                        "type": "Identifier",
                                        "name": "c"
                                    },
                                    "kind": "init",
                                    "method": false,
                                    "shorthand": false
                                }
                            ]
                        }],
                        "body": {
                            "type": "BlockStatement",
                            "body": []
                        },
                        "generator": false,
                        "expression": false,
                        "async": false
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "(function([a]){})"', () => {
            expect(parseScript('(function([a]){})')).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "FunctionExpression",
                        "id": null,
                        "params": [{
                            "type": "ArrayPattern",
                            "elements": [{
                                "type": "Identifier",
                                "name": "a"
                            }]
                        }],
                        "body": {
                            "type": "BlockStatement",
                            "body": []
                        },
                        "generator": false,
                        "expression": false,
                        "async": false
                    }
                }],
                "sourceType": "script"
            });
        });
        it('should parse "(function*(){ (function yield(){}); })"', () => {
            expect(parseScript('(function*(){ (function yield(){}); })')).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "FunctionExpression",
                        "id": null,
                        "params": [],
                        "body": {
                            "type": "BlockStatement",
                            "body": [{
                                "type": "ExpressionStatement",
                                "expression": {
                                    "type": "FunctionExpression",
                                    "id": {
                                        "type": "Identifier",
                                        "name": "yield"
                                    },
                                    "params": [],
                                    "body": {
                                        "type": "BlockStatement",
                                        "body": []
                                    },
                                    "generator": false,
                                    "expression": false,
                                    "async": false
                                }
                            }]
                        },
                        "generator": true,
                        "expression": false,
                        "async": false
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "(a)"', () => {
            expect(parseScript('(a)')).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "Identifier",
                        "name": "a"
                    }
                }],
                "sourceType": "script"
            });
        });
    
    
        it('should parse "(a, 1)"', () => {
            expect(parseScript('(a, 1)', {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "SequenceExpression",
                        "expressions": [{
                                "type": "Identifier",
                                "name": "a"
                            },
                            {
                                "type": "Literal",
                                "value": 1,
                                "raw": "1"
                            }
                        ]
                    }
                }],
                "sourceType": "script"
            });
        });
        it('should parse "(a,a)"', () => {
            expect(parseScript('(a,a)')).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "SequenceExpression",
                        "expressions": [{
                                "type": "Identifier",
                                "name": "a"
                            },
                            {
                                "type": "Identifier",
                                "name": "a"
                            }
                        ]
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "((((((((((((((((((((((((((((((((((((((((a))))))))))))))))))))))))))))))))))))))))"', () => {
            expect(parseScript('((((((((((((((((((((((((((((((((((((((((a))))))))))))))))))))))))))))))))))))))))')).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "Identifier",
                        "name": "a"
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "a;"', () => {
            expect(parseScript('a;')).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "Identifier",
                        "name": "a"
                    }
                }],
                "sourceType": "script"
            });
        });
    
    
        it('should parse "(let[let])"', () => {
            expect(parseScript('(let[let])')).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "MemberExpression",
                        "computed": true,
                        "object": {
                            "type": "Identifier",
                            "name": "let"
                        },
                        "property": {
                            "type": "Identifier",
                            "name": "let"
                        }
                    }
                }],
                "sourceType": "script"
            });
        });
        it('should parse "let.let"', () => {
            expect(parseScript('let.let')).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                            "type": "Identifier",
                            "name": "let"
                        },
                        "property": {
                            "type": "Identifier",
                            "name": "let"
                        }
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "/a/i"', () => {
            expect(parseScript('/a/i')).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "Literal",
                        "value": /a/i,
                        "regex": {
                            "pattern": "a",
                            "flags": "i"
                        }
                    }
                }],
                "sourceType": "script"
            });
        });
    
    
        it('should parse "/(?=.)*/;"', () => {
            expect(parseScript('/(?=.)*/;')).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "Literal",
                        "value": /(?=.)*/,
                        "regex": {
                            "pattern": "(?=.)*",
                            "flags": ""
                        }
                    }
                }],
                "sourceType": "script"
            });
        });
        it('should parse ("\\\"")', () => {
            expect(parseScript('("\\\"")', {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "Literal",
                        "value": "\"",
                        "raw": "\"\\\"\""
                    }
                }],
                "sourceType": "script"
            });
        });
    
    
        it('should parse "new a(...b = c)"', () => {
            expect(parseScript('new a(...b = c)')).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "NewExpression",
                        "callee": {
                            "type": "Identifier",
                            "name": "a"
                        },
                        "arguments": [{
                            "type": "SpreadElement",
                            "argument": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                    "type": "Identifier",
                                    "name": "b"
                                },
                                "right": {
                                    "type": "Identifier",
                                    "name": "c"
                                }
                            }
                        }]
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "function a() { new new.target; }"', () => {
            expect(parseScript('function a() { new new.target; }')).to.eql({
                "type": "Program",
                "body": [{
                    "type": "FunctionDeclaration",
                    "id": {
                        "type": "Identifier",
                        "name": "a"
                    },
                    "params": [],
                    "body": {
                        "type": "BlockStatement",
                        "body": [{
                            "type": "ExpressionStatement",
                            "expression": {
                                "type": "NewExpression",
                                "callee": {
                                    "type": "MetaProperty",
                                    "meta": {
                                        "type": "Identifier",
                                        "name": "new"
                                    },
                                    "property": {
                                        "type": "Identifier",
                                        "name": "target"
                                    }
                                },
                                "arguments": []
                            }
                        }]
                    },
                    "generator": false,
                    "expression": false,
                    "async": false
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "function a() { new["b"]; }"', () => {
            expect(parseScript('function a() { new["b"]; }', {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "FunctionDeclaration",
                    "id": {
                        "type": "Identifier",
                        "name": "a"
                    },
                    "params": [],
                    "body": {
                        "type": "BlockStatement",
                        "body": [{
                            "type": "ExpressionStatement",
                            "expression": {
                                "type": "NewExpression",
                                "callee": {
                                    "type": "ArrayExpression",
                                    "elements": [{
                                        "type": "Literal",
                                        "value": "b",
                                        "raw": "\"b\""
                                    }]
                                },
                                "arguments": []
                            }
                        }]
                    },
                    "generator": false,
                    "expression": false,
                    "async": false
                }],
                "sourceType": "script"
            });
        });
        it('should parse "({})', () => {
            expect(parseScript('({})')).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "ObjectExpression",
                        "properties": []
                    }
                }],
                "sourceType": "script"
            });
        });
    
    
        it('should parse "+{ }"', () => {
            expect(parseScript('+{ }')).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "UnaryExpression",
                        "operator": "+",
                        "argument": {
                            "type": "ObjectExpression",
                            "properties": []
                        },
                        "prefix": true
                    }
                }],
                "sourceType": "script"
            });
        });
        it('should parse "({ if: 1 })"', () => {
            expect(parseScript('({ if: 1 })', {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "ObjectExpression",
                        "properties": [{
                            "type": "Property",
                            "key": {
                                "type": "Identifier",
                                "name": "if"
                            },
                            "computed": false,
                            "value": {
                                "type": "Literal",
                                "value": 1,
                                "raw": "1"
                            },
                            "kind": "init",
                            "method": false,
                            "shorthand": false
                        }]
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "({ true: 1 })"', () => {
            expect(parseScript('({ true: 1 })', {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "ObjectExpression",
                        "properties": [{
                            "type": "Property",
                            "key": {
                                "type": "Identifier",
                                "name": "true"
                            },
                            "computed": false,
                            "value": {
                                "type": "Literal",
                                "value": 1,
                                "raw": "1"
                            },
                            "kind": "init",
                            "method": false,
                            "shorthand": false
                        }]
                    }
                }],
                "sourceType": "script"
            });
        });
    
    
        it('should parse "({ a: 1, a: 2 })"', () => {
            expect(parseScript('({ a: 1, a: 2 })', {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "ObjectExpression",
                        "properties": [{
                                "type": "Property",
                                "key": {
                                    "type": "Identifier",
                                    "name": "a"
                                },
                                "computed": false,
                                "value": {
                                    "type": "Literal",
                                    "value": 1,
                                    "raw": "1"
                                },
                                "kind": "init",
                                "method": false,
                                "shorthand": false
                            },
                            {
                                "type": "Property",
                                "key": {
                                    "type": "Identifier",
                                    "name": "a"
                                },
                                "computed": false,
                                "value": {
                                    "type": "Literal",
                                    "value": 2,
                                    "raw": "2"
                                },
                                "kind": "init",
                                "method": false,
                                "shorthand": false
                            }
                        ]
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "({ *a() { yield super.a(); } })"', () => {
            expect(parseScript('({ *a() { yield super.a(); } })')).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "ObjectExpression",
                        "properties": [{
                            "type": "Property",
                            "key": {
                                "type": "Identifier",
                                "name": "a"
                            },
                            "computed": false,
                            "value": {
                                "type": "FunctionExpression",
                                "id": null,
                                "params": [],
                                "body": {
                                    "type": "BlockStatement",
                                    "body": [{
                                        "type": "ExpressionStatement",
                                        "expression": {
                                            "type": "YieldExpression",
                                            "argument": {
                                                "type": "CallExpression",
                                                "callee": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                        "type": "Super"
                                                    },
                                                    "property": {
                                                        "type": "Identifier",
                                                        "name": "a"
                                                    }
                                                },
                                                "arguments": []
                                            },
                                            "delegate": false
                                        }
                                    }]
                                },
                                "generator": true,
                                "expression": false,
                                "async": false
                            },
                            "kind": "init",
                            "method": true,
                            "shorthand": false
                        }]
                    }
                }],
                "sourceType": "script"
            });
        });
    
    
        it('should parse "function *a(){yield 1}"', () => {
            expect(parseScript('function *a(){yield 1}', {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "FunctionDeclaration",
                    "id": {
                        "type": "Identifier",
                        "name": "a"
                    },
                    "params": [],
                    "body": {
                        "type": "BlockStatement",
                        "body": [{
                            "type": "ExpressionStatement",
                            "expression": {
                                "type": "YieldExpression",
                                "argument": {
                                    "type": "Literal",
                                    "value": 1,
                                    "raw": "1"
                                },
                                "delegate": false
                            }
                        }]
                    },
                    "generator": true,
                    "expression": false,
                    "async": false
                }],
                "sourceType": "script"
            });
        });
    
    
        it('should parse "(class extends 1{})"', () => {
            expect(parseScript('(class extends 1{})', {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "ClassExpression",
                        "id": null,
                        "superClass": {
                            "type": "Literal",
                            "value": 1,
                            "raw": "1"
                        },
                        "body": {
                            "type": "ClassBody",
                            "body": []
                        }
                    }
                }],
                "sourceType": "script"
            });
        });
        it('should parse "(function*() { yield 1; })"', () => {
            expect(parseScript('(function*() { yield 1; })', {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "FunctionExpression",
                        "id": null,
                        "params": [],
                        "body": {
                            "type": "BlockStatement",
                            "body": [{
                                "type": "ExpressionStatement",
                                "expression": {
                                    "type": "YieldExpression",
                                    "argument": {
                                        "type": "Literal",
                                        "value": 1,
                                        "raw": "1"
                                    },
                                    "delegate": false
                                }
                            }]
                        },
                        "generator": true,
                        "expression": false,
                        "async": false
                    }
                }],
                "sourceType": "script"
            });
        });
    
    
        it('should parse "var _\u{1EE03}"', () => {
            expect(parseScript('var _\\u{1EE03}')).to.eql({
                "type": "Program",
                "body": [{
                    "type": "VariableDeclaration",
                    "declarations": [{
                        "type": "VariableDeclarator",
                        "id": {
                            "type": "Identifier",
                            "name": "_𞸃"
                        },
                        "init": null
                    }],
                    "kind": "var"
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "let.let = a"', () => {
            expect(parseScript('let.let = a')).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                                "type": "Identifier",
                                "name": "let"
                            },
                            "property": {
                                "type": "Identifier",
                                "name": "let"
                            }
                        },
                        "right": {
                            "type": "Identifier",
                            "name": "a"
                        }
                    }
                }],
                "sourceType": "script"
            });
        });
    
    
    
        it('should parse "let [a, , ] = (1);"', () => {
            expect(parseScript(`a = {
            b(c, d) {
                return a;
            }
        }
        e = {
            b([{c}]) {
                return c;
            },
            f(){}
        }`)).to.eql({
                "type": "Program",
                "body": [{
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "AssignmentExpression",
                            "operator": "=",
                            "left": {
                                "type": "Identifier",
                                "name": "a"
                            },
                            "right": {
                                "type": "ObjectExpression",
                                "properties": [{
                                    "type": "Property",
                                    "key": {
                                        "type": "Identifier",
                                        "name": "b"
                                    },
                                    "computed": false,
                                    "value": {
                                        "type": "FunctionExpression",
                                        "id": null,
                                        "params": [{
                                                "type": "Identifier",
                                                "name": "c"
                                            },
                                            {
                                                "type": "Identifier",
                                                "name": "d"
                                            }
                                        ],
                                        "body": {
                                            "type": "BlockStatement",
                                            "body": [{
                                                "type": "ReturnStatement",
                                                "argument": {
                                                    "type": "Identifier",
                                                    "name": "a"
                                                }
                                            }]
                                        },
                                        "generator": false,
                                        "expression": false,
                                        "async": false
                                    },
                                    "kind": "init",
                                    "method": true,
                                    "shorthand": false
                                }]
                            }
                        }
                    },
                    {
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "AssignmentExpression",
                            "operator": "=",
                            "left": {
                                "type": "Identifier",
                                "name": "e"
                            },
                            "right": {
                                "type": "ObjectExpression",
                                "properties": [{
                                        "type": "Property",
                                        "key": {
                                            "type": "Identifier",
                                            "name": "b"
                                        },
                                        "computed": false,
                                        "value": {
                                            "type": "FunctionExpression",
                                            "id": null,
                                            "params": [{
                                                "type": "ArrayPattern",
                                                "elements": [{
                                                    "type": "ObjectPattern",
                                                    "properties": [{
                                                        "type": "Property",
                                                        "key": {
                                                            "type": "Identifier",
                                                            "name": "c"
                                                        },
                                                        "computed": false,
                                                        "value": {
                                                            "type": "Identifier",
                                                            "name": "c"
                                                        },
                                                        "kind": "init",
                                                        "method": false,
                                                        "shorthand": true
                                                    }]
                                                }]
                                            }],
                                            "body": {
                                                "type": "BlockStatement",
                                                "body": [{
                                                    "type": "ReturnStatement",
                                                    "argument": {
                                                        "type": "Identifier",
                                                        "name": "c"
                                                    }
                                                }]
                                            },
                                            "generator": false,
                                            "expression": false,
                                            "async": false
                                        },
                                        "kind": "init",
                                        "method": true,
                                        "shorthand": false
                                    },
                                    {
                                        "type": "Property",
                                        "key": {
                                            "type": "Identifier",
                                            "name": "f"
                                        },
                                        "computed": false,
                                        "value": {
                                            "type": "FunctionExpression",
                                            "id": null,
                                            "params": [],
                                            "body": {
                                                "type": "BlockStatement",
                                                "body": []
                                            },
                                            "generator": false,
                                            "expression": false,
                                            "async": false
                                        },
                                        "kind": "init",
                                        "method": true,
                                        "shorthand": false
                                    }
                                ]
                            }
                        }
                    }
                ],
                "sourceType": "script"
            });
        });
    
    
        it('should parse "let [a, , ] = (1);"', () => {
            expect(parseScript(`(1, 2, a)();
        (3, 4, b.a)();`, {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "CallExpression",
                            "callee": {
                                "type": "SequenceExpression",
                                "expressions": [{
                                        "type": "Literal",
                                        "value": 1,
                                        "raw": "1"
                                    },
                                    {
                                        "type": "Literal",
                                        "value": 2,
                                        "raw": "2"
                                    },
                                    {
                                        "type": "Identifier",
                                        "name": "a"
                                    }
                                ]
                            },
                            "arguments": []
                        }
                    },
                    {
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "CallExpression",
                            "callee": {
                                "type": "SequenceExpression",
                                "expressions": [{
                                        "type": "Literal",
                                        "value": 3,
                                        "raw": "3"
                                    },
                                    {
                                        "type": "Literal",
                                        "value": 4,
                                        "raw": "4"
                                    },
                                    {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                            "type": "Identifier",
                                            "name": "b"
                                        },
                                        "property": {
                                            "type": "Identifier",
                                            "name": "a"
                                        }
                                    }
                                ]
                            },
                            "arguments": []
                        }
                    }
                ],
                "sourceType": "script"
            });
        });
    
        it('should parse "let [a, , ] = (1);"', () => {
            expect(parseScript(`a(
            b(c, c),
            d(c, c),
            e(c, c)
        );`, {
                raw: true,
                ranges: true
            })).to.eql({
                "type": "Program",
                "start": 0,
                "end": 75,
                "body": [
                  {
                    "type": "ExpressionStatement",
                    "start": 0,
                    "end": 75,
                    "expression": {
                      "type": "CallExpression",
                      "start": 0,
                      "end": 74,
                      "callee": {
                        "type": "Identifier",
                        "start": 0,
                        "end": 1,
                        "name": "a"
                      },
                      "arguments": [
                        {
                          "type": "CallExpression",
                          "start": 15,
                          "end": 22,
                          "callee": {
                            "type": "Identifier",
                            "start": 15,
                            "end": 16,
                            "name": "b"
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "start": 17,
                              "end": 18,
                              "name": "c"
                            },
                            {
                              "type": "Identifier",
                              "start": 20,
                              "end": 21,
                              "name": "c"
                            }
                          ]
                        },
                        {
                          "type": "CallExpression",
                          "start": 36,
                          "end": 43,
                          "callee": {
                            "type": "Identifier",
                            "start": 36,
                            "end": 37,
                            "name": "d"
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "start": 38,
                              "end": 39,
                              "name": "c"
                            },
                            {
                              "type": "Identifier",
                              "start": 41,
                              "end": 42,
                              "name": "c"
                            }
                          ]
                        },
                        {
                          "type": "CallExpression",
                          "start": 57,
                          "end": 64,
                          "callee": {
                            "type": "Identifier",
                            "start": 57,
                            "end": 58,
                            "name": "e"
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "start": 59,
                              "end": 60,
                              "name": "c"
                            },
                            {
                              "type": "Identifier",
                              "start": 62,
                              "end": 63,
                              "name": "c"
                            }
                          ]
                        }
                      ]
                    }
                  }
                ],
                "sourceType": "script"
              });
        });
    
    
        it('should parse "a = false; "', () => {
            expect(parseScript(`a = false; `, {
                raw: false
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                            "type": "Identifier",
                            "name": "a"
                        },
                        "right": {
                            "type": "Literal",
                            "value": false
                        }
                    }
                }],
                "sourceType": "script"
            });
        });
    
    
        it('should parse "a = { get b () {} } "', () => {
            expect(parseScript(`a = { get b () {} } `, {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                            "type": "Identifier",
                            "name": "a"
                        },
                        "right": {
                            "type": "ObjectExpression",
                            "properties": [{
                                "type": "Property",
                                "key": {
                                    "type": "Identifier",
                                    "name": "b"
                                },
                                "computed": false,
                                "value": {
                                    "type": "FunctionExpression",
                                    "id": null,
                                    "params": [],
                                    "body": {
                                        "type": "BlockStatement",
                                        "body": []
                                    },
                                    "generator": false,
                                    "expression": false,
                                    "async": false
                                },
                                "kind": "get",
                                "method": false,
                                "shorthand": false
                            }]
                        }
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "1111"', () => {
            expect(parseScript(`('\u{10FFFF}')`, {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "Literal",
                        "value": "􏿿",
                        "raw": "'􏿿'"
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "new a(b,c)"', () => {
            expect(parseScript(`new a(b,c)`, {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "NewExpression",
                        "callee": {
                            "type": "Identifier",
                            "name": "a"
                        },
                        "arguments": [{
                                "type": "Identifier",
                                "name": "b"
                            },
                            {
                                "type": "Identifier",
                                "name": "c"
                            }
                        ]
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "new a(...b, ...c)"', () => {
            expect(parseScript(`new a(...b, ...c)`)).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "NewExpression",
                        "callee": {
                            "type": "Identifier",
                            "name": "a"
                        },
                        "arguments": [{
                                "type": "SpreadElement",
                                "argument": {
                                    "type": "Identifier",
                                    "name": "b"
                                }
                            },
                            {
                                "type": "SpreadElement",
                                "argument": {
                                    "type": "Identifier",
                                    "name": "c"
                                }
                            }
                        ]
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "new a(b, ...c, d)"', () => {
            expect(parseScript(`new a(b, ...c, d)`)).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "NewExpression",
                        "callee": {
                            "type": "Identifier",
                            "name": "a"
                        },
                        "arguments": [{
                                "type": "Identifier",
                                "name": "b"
                            },
                            {
                                "type": "SpreadElement",
                                "argument": {
                                    "type": "Identifier",
                                    "name": "c"
                                }
                            },
                            {
                                "type": "Identifier",
                                "name": "d"
                            }
                        ]
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "new a(...b, c, ...d)"', () => {
            expect(parseScript(`new a(...b, c, ...d)`)).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "NewExpression",
                        "callee": {
                            "type": "Identifier",
                            "name": "a"
                        },
                        "arguments": [{
                                "type": "SpreadElement",
                                "argument": {
                                    "type": "Identifier",
                                    "name": "b"
                                }
                            },
                            {
                                "type": "Identifier",
                                "name": "c"
                            },
                            {
                                "type": "SpreadElement",
                                "argument": {
                                    "type": "Identifier",
                                    "name": "d"
                                }
                            }
                        ]
                    }
                }],
                "sourceType": "script"
            });
        });
        it('should parse "({a})"', () => {
            expect(parseScript('({a})')).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "ObjectExpression",
                        "properties": [{
                            "type": "Property",
                            "key": {
                                "type": "Identifier",
                                "name": "a"
                            },
                            "computed": false,
                            "value": {
                                "type": "Identifier",
                                "name": "a"
                            },
                            "kind": "init",
                            "method": false,
                            "shorthand": true
                        }]
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "({a, a: 1, c})"', () => {
            expect(parseScript('({a, a: 1, c})', {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "ObjectExpression",
                        "properties": [{
                                "type": "Property",
                                "key": {
                                    "type": "Identifier",
                                    "name": "a"
                                },
                                "computed": false,
                                "value": {
                                    "type": "Identifier",
                                    "name": "a"
                                },
                                "kind": "init",
                                "method": false,
                                "shorthand": true
                            },
                            {
                                "type": "Property",
                                "key": {
                                    "type": "Identifier",
                                    "name": "a"
                                },
                                "computed": false,
                                "value": {
                                    "type": "Literal",
                                    "value": 1,
                                    "raw": "1"
                                },
                                "kind": "init",
                                "method": false,
                                "shorthand": false
                            },
                            {
                                "type": "Property",
                                "key": {
                                    "type": "Identifier",
                                    "name": "c"
                                },
                                "computed": false,
                                "value": {
                                    "type": "Identifier",
                                    "name": "c"
                                },
                                "kind": "init",
                                "method": false,
                                "shorthand": true
                            }
                        ]
                    }
                }],
                "sourceType": "script"
            });
        });
        it('should parse "({a(b,...c){}})"', () => {
            expect(parseScript('({a(b,...c){}})')).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "ObjectExpression",
                        "properties": [{
                            "type": "Property",
                            "key": {
                                "type": "Identifier",
                                "name": "a"
                            },
                            "computed": false,
                            "value": {
                                "type": "FunctionExpression",
                                "id": null,
                                "params": [{
                                        "type": "Identifier",
                                        "name": "b"
                                    },
                                    {
                                        "type": "RestElement",
                                        "argument": {
                                            "type": "Identifier",
                                            "name": "c"
                                        }
                                    }
                                ],
                                "body": {
                                    "type": "BlockStatement",
                                    "body": []
                                },
                                "generator": false,
                                "expression": false,
                                "async": false
                            },
                            "kind": "init",
                            "method": true,
                            "shorthand": false
                        }]
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "({a(b,c){}})"', () => {
            expect(parseScript('({a(b,c){}})', {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "ObjectExpression",
                        "properties": [{
                            "type": "Property",
                            "key": {
                                "type": "Identifier",
                                "name": "a"
                            },
                            "computed": false,
                            "value": {
                                "type": "FunctionExpression",
                                "id": null,
                                "params": [{
                                        "type": "Identifier",
                                        "name": "b"
                                    },
                                    {
                                        "type": "Identifier",
                                        "name": "c"
                                    }
                                ],
                                "body": {
                                    "type": "BlockStatement",
                                    "body": []
                                },
                                "generator": false,
                                "expression": false,
                                "async": false
                            },
                            "kind": "init",
                            "method": true,
                            "shorthand": false
                        }]
                    }
                }],
                "sourceType": "script"
            });
        });
        it('should parse "({a(b,c){let d;}})"', () => {
            expect(parseScript('({a(b,c){let d;}})', {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "ObjectExpression",
                        "properties": [{
                            "type": "Property",
                            "key": {
                                "type": "Identifier",
                                "name": "a"
                            },
                            "computed": false,
                            "value": {
                                "type": "FunctionExpression",
                                "id": null,
                                "params": [{
                                        "type": "Identifier",
                                        "name": "b"
                                    },
                                    {
                                        "type": "Identifier",
                                        "name": "c"
                                    }
                                ],
                                "body": {
                                    "type": "BlockStatement",
                                    "body": [{
                                        "type": "VariableDeclaration",
                                        "declarations": [{
                                            "type": "VariableDeclarator",
                                            "id": {
                                                "type": "Identifier",
                                                "name": "d"
                                            },
                                            "init": null
                                        }],
                                        "kind": "let"
                                    }]
                                },
                                "generator": false,
                                "expression": false,
                                "async": false
                            },
                            "kind": "init",
                            "method": true,
                            "shorthand": false
                        }]
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "({ get a() { super[1] = 2; } });"', () => {
            expect(parseScript('({ get a() { super[1] = 2; } });', {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "ObjectExpression",
                        "properties": [{
                            "type": "Property",
                            "key": {
                                "type": "Identifier",
                                "name": "a"
                            },
                            "computed": false,
                            "value": {
                                "type": "FunctionExpression",
                                "id": null,
                                "params": [],
                                "body": {
                                    "type": "BlockStatement",
                                    "body": [{
                                        "type": "ExpressionStatement",
                                        "expression": {
                                            "type": "AssignmentExpression",
                                            "operator": "=",
                                            "left": {
                                                "type": "MemberExpression",
                                                "computed": true,
                                                "object": {
                                                    "type": "Super"
                                                },
                                                "property": {
                                                    "type": "Literal",
                                                    "value": 1,
                                                    "raw": "1"
                                                }
                                            },
                                            "right": {
                                                "type": "Literal",
                                                "value": 2,
                                                "raw": "2"
                                            }
                                        }
                                    }]
                                },
                                "generator": false,
                                "expression": false,
                                "async": false
                            },
                            "kind": "get",
                            "method": false,
                            "shorthand": false
                        }]
                    }
                }],
                "sourceType": "script"
            });
        });
    
    
    
        it('should parse "({ get a() { super[1] = 2; } });"', () => {
            expect(parseScript('({ get a() { super[1] = 2; } });', {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "ObjectExpression",
                        "properties": [{
                            "type": "Property",
                            "key": {
                                "type": "Identifier",
                                "name": "a"
                            },
                            "computed": false,
                            "value": {
                                "type": "FunctionExpression",
                                "id": null,
                                "params": [],
                                "body": {
                                    "type": "BlockStatement",
                                    "body": [{
                                        "type": "ExpressionStatement",
                                        "expression": {
                                            "type": "AssignmentExpression",
                                            "operator": "=",
                                            "left": {
                                                "type": "MemberExpression",
                                                "computed": true,
                                                "object": {
                                                    "type": "Super"
                                                },
                                                "property": {
                                                    "type": "Literal",
                                                    "value": 1,
                                                    "raw": "1"
                                                }
                                            },
                                            "right": {
                                                "type": "Literal",
                                                "value": 2,
                                                "raw": "2"
                                            }
                                        }
                                    }]
                                },
                                "generator": false,
                                "expression": false,
                                "async": false
                            },
                            "kind": "get",
                            "method": false,
                            "shorthand": false
                        }]
                    }
                }],
                "sourceType": "script"
            });
        });
    
    
        it('should parse "(class { constructor() { super.a } });"', () => {
            expect(parseScript('(class { constructor() { super.a } });')).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "ClassExpression",
                        "id": null,
                        "superClass": null,
                        "body": {
                            "type": "ClassBody",
                            "body": [{
                                "type": "MethodDefinition",
                                "key": {
                                    "type": "Identifier",
                                    "name": "constructor"
                                },
                                "computed": false,
                                "value": {
                                    "type": "FunctionExpression",
                                    "id": null,
                                    "params": [],
                                    "body": {
                                        "type": "BlockStatement",
                                        "body": [{
                                            "type": "ExpressionStatement",
                                            "expression": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                    "type": "Super"
                                                },
                                                "property": {
                                                    "type": "Identifier",
                                                    "name": "a"
                                                }
                                            }
                                        }]
                                    },
                                    "generator": false,
                                    "expression": false,
                                    "async": false
                                },
                                "kind": "constructor",
                                "static": false
                            }]
                        }
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse " /****/"', () => {
            expect(parseScript(' /****/')).to.eql({
                "type": "Program",
                "body": [],
                "sourceType": "script"
            });
        });
        it('should parse "null && (a += null)"', () => {
            expect(parseScript('null && (a += null)', {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "LogicalExpression",
                        "operator": "&&",
                        "left": {
                            "type": "Literal",
                            "value": null,
                            "raw": "null"
                        },
                        "right": {
                            "type": "AssignmentExpression",
                            "operator": "+=",
                            "left": {
                                "type": "Identifier",
                                "name": "a"
                            },
                            "right": {
                                "type": "Literal",
                                "value": null,
                                "raw": "null"
                            }
                        }
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "({a:(b.c)} = 0)"', () => {
            expect(parseScript('({a:(b.c)} = 0)', {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                            "type": "ObjectPattern",
                            "properties": [{
                                "type": "Property",
                                "key": {
                                    "type": "Identifier",
                                    "name": "a"
                                },
                                "computed": false,
                                "value": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                        "type": "Identifier",
                                        "name": "b"
                                    },
                                    "property": {
                                        "type": "Identifier",
                                        "name": "c"
                                    }
                                },
                                "kind": "init",
                                "method": false,
                                "shorthand": false
                            }]
                        },
                        "right": {
                            "type": "Literal",
                            "value": 0,
                            "raw": "0"
                        }
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "function a(...b) { }"', () => {
            expect(parseScript('function a(...b) { }')).to.eql({
                "type": "Program",
                "body": [{
                    "type": "FunctionDeclaration",
                    "id": {
                        "type": "Identifier",
                        "name": "a"
                    },
                    "params": [{
                        "type": "RestElement",
                        "argument": {
                            "type": "Identifier",
                            "name": "b"
                        }
                    }],
                    "body": {
                        "type": "BlockStatement",
                        "body": []
                    },
                    "generator": false,
                    "expression": false,
                    "async": false
                }],
                "sourceType": "script"
            });
        });
        it('should parse "function a(...[]) { }"', () => {
            expect(parseScript('function a(...[]) { }')).to.eql({
                "type": "Program",
                "body": [{
                    "type": "FunctionDeclaration",
                    "id": {
                        "type": "Identifier",
                        "name": "a"
                    },
                    "params": [{
                        "type": "RestElement",
                        "argument": {
                            "type": "ArrayPattern",
                            "elements": []
                        }
                    }],
                    "body": {
                        "type": "BlockStatement",
                        "body": []
                    },
                    "generator": false,
                    "expression": false,
                    "async": false
                }],
                "sourceType": "script"
            });
        });
    
    
        it('should parse "(a, ...[]) => 0', () => {
            expect(parseScript('(a, ...[]) => 0', {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "ArrowFunctionExpression",
                        "id": null,
                        "params": [{
                                "type": "Identifier",
                                "name": "a"
                            },
                            {
                                "type": "RestElement",
                                "argument": {
                                    "type": "ArrayPattern",
                                    "elements": []
                                }
                            }
                        ],
                        "body": {
                            "type": "Literal",
                            "value": 0,
                            "raw": "0"
                        },
                        "generator": false,
                        "expression": true,
                        "async": false
                    }
                }],
                "sourceType": "script"
            });
        });
    
    
        it('should parse "function a(a) {}', () => {
            expect(parseScript('function a(a) {}', {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "FunctionDeclaration",
                    "id": {
                        "type": "Identifier",
                        "name": "a"
                    },
                    "params": [{
                        "type": "Identifier",
                        "name": "a"
                    }],
                    "body": {
                        "type": "BlockStatement",
                        "body": []
                    },
                    "generator": false,
                    "expression": false,
                    "async": false
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "', () => {
            expect(parseScript(`var o = {
                    a: function() {},
                    b: function() {},
                    c() {},
                    d() {},
                    get e() {},
                    set e(e) {}
                  };`, {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "VariableDeclaration",
                    "declarations": [{
                        "type": "VariableDeclarator",
                        "id": {
                            "type": "Identifier",
                            "name": "o"
                        },
                        "init": {
                            "type": "ObjectExpression",
                            "properties": [{
                                    "type": "Property",
                                    "key": {
                                        "type": "Identifier",
                                        "name": "a"
                                    },
                                    "computed": false,
                                    "value": {
                                        "type": "FunctionExpression",
                                        "id": null,
                                        "params": [],
                                        "body": {
                                            "type": "BlockStatement",
                                            "body": []
                                        },
                                        "generator": false,
                                        "expression": false,
                                        "async": false
                                    },
                                    "kind": "init",
                                    "method": false,
                                    "shorthand": false
                                },
                                {
                                    "type": "Property",
                                    "key": {
                                        "type": "Identifier",
                                        "name": "b"
                                    },
                                    "computed": false,
                                    "value": {
                                        "type": "FunctionExpression",
                                        "id": null,
                                        "params": [],
                                        "body": {
                                            "type": "BlockStatement",
                                            "body": []
                                        },
                                        "generator": false,
                                        "expression": false,
                                        "async": false
                                    },
                                    "kind": "init",
                                    "method": false,
                                    "shorthand": false
                                },
                                {
                                    "type": "Property",
                                    "key": {
                                        "type": "Identifier",
                                        "name": "c"
                                    },
                                    "computed": false,
                                    "value": {
                                        "type": "FunctionExpression",
                                        "id": null,
                                        "params": [],
                                        "body": {
                                            "type": "BlockStatement",
                                            "body": []
                                        },
                                        "generator": false,
                                        "expression": false,
                                        "async": false
                                    },
                                    "kind": "init",
                                    "method": true,
                                    "shorthand": false
                                },
                                {
                                    "type": "Property",
                                    "key": {
                                        "type": "Identifier",
                                        "name": "d"
                                    },
                                    "computed": false,
                                    "value": {
                                        "type": "FunctionExpression",
                                        "id": null,
                                        "params": [],
                                        "body": {
                                            "type": "BlockStatement",
                                            "body": []
                                        },
                                        "generator": false,
                                        "expression": false,
                                        "async": false
                                    },
                                    "kind": "init",
                                    "method": true,
                                    "shorthand": false
                                },
                                {
                                    "type": "Property",
                                    "key": {
                                        "type": "Identifier",
                                        "name": "e"
                                    },
                                    "computed": false,
                                    "value": {
                                        "type": "FunctionExpression",
                                        "id": null,
                                        "params": [],
                                        "body": {
                                            "type": "BlockStatement",
                                            "body": []
                                        },
                                        "generator": false,
                                        "expression": false,
                                        "async": false
                                    },
                                    "kind": "get",
                                    "method": false,
                                    "shorthand": false
                                },
                                {
                                    "type": "Property",
                                    "key": {
                                        "type": "Identifier",
                                        "name": "e"
                                    },
                                    "computed": false,
                                    "value": {
                                        "type": "FunctionExpression",
                                        "id": null,
                                        "params": [{
                                            "type": "Identifier",
                                            "name": "e"
                                        }],
                                        "body": {
                                            "type": "BlockStatement",
                                            "body": []
                                        },
                                        "generator": false,
                                        "expression": false,
                                        "async": false
                                    },
                                    "kind": "set",
                                    "method": false,
                                    "shorthand": false
                                }
                            ]
                        }
                    }],
                    "kind": "var"
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "[function(){}]', () => {
            expect(parseScript(`
                [function(){}]`, {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "ArrayExpression",
                        "elements": [{
                            "type": "FunctionExpression",
                            "id": null,
                            "params": [],
                            "body": {
                                "type": "BlockStatement",
                                "body": []
                            },
                            "generator": false,
                            "expression": false,
                            "async": false
                        }]
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "', () => {
            expect(parseScript(`var a = 1;
                a * a;
                a / a;
                a % a;
                a + a;
                a - a;
                a << a;
                a >> a;
                a >>> a;
                a < a;
                a > a;
                a <= a;
                a >= a;
                a instanceof a;
                a in a;
                a == a;
                a != a;
                a === a;
                a !== a;
                a & a;
                a ^ a;
                a | a;
                a && a;
                a || a;`, {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                        "type": "VariableDeclaration",
                        "declarations": [{
                            "type": "VariableDeclarator",
                            "id": {
                                "type": "Identifier",
                                "name": "a"
                            },
                            "init": {
                                "type": "Literal",
                                "value": 1,
                                "raw": "1"
                            }
                        }],
                        "kind": "var"
                    },
                    {
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "BinaryExpression",
                            "operator": "*",
                            "left": {
                                "type": "Identifier",
                                "name": "a"
                            },
                            "right": {
                                "type": "Identifier",
                                "name": "a"
                            }
                        }
                    },
                    {
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "BinaryExpression",
                            "operator": "/",
                            "left": {
                                "type": "Identifier",
                                "name": "a"
                            },
                            "right": {
                                "type": "Identifier",
                                "name": "a"
                            }
                        }
                    },
                    {
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "BinaryExpression",
                            "operator": "%",
                            "left": {
                                "type": "Identifier",
                                "name": "a"
                            },
                            "right": {
                                "type": "Identifier",
                                "name": "a"
                            }
                        }
                    },
                    {
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "BinaryExpression",
                            "operator": "+",
                            "left": {
                                "type": "Identifier",
                                "name": "a"
                            },
                            "right": {
                                "type": "Identifier",
                                "name": "a"
                            }
                        }
                    },
                    {
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "BinaryExpression",
                            "operator": "-",
                            "left": {
                                "type": "Identifier",
                                "name": "a"
                            },
                            "right": {
                                "type": "Identifier",
                                "name": "a"
                            }
                        }
                    },
                    {
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "BinaryExpression",
                            "operator": "<<",
                            "left": {
                                "type": "Identifier",
                                "name": "a"
                            },
                            "right": {
                                "type": "Identifier",
                                "name": "a"
                            }
                        }
                    },
                    {
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "BinaryExpression",
                            "operator": ">>",
                            "left": {
                                "type": "Identifier",
                                "name": "a"
                            },
                            "right": {
                                "type": "Identifier",
                                "name": "a"
                            }
                        }
                    },
                    {
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "BinaryExpression",
                            "operator": ">>>",
                            "left": {
                                "type": "Identifier",
                                "name": "a"
                            },
                            "right": {
                                "type": "Identifier",
                                "name": "a"
                            }
                        }
                    },
                    {
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "BinaryExpression",
                            "operator": "<",
                            "left": {
                                "type": "Identifier",
                                "name": "a"
                            },
                            "right": {
                                "type": "Identifier",
                                "name": "a"
                            }
                        }
                    },
                    {
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "BinaryExpression",
                            "operator": ">",
                            "left": {
                                "type": "Identifier",
                                "name": "a"
                            },
                            "right": {
                                "type": "Identifier",
                                "name": "a"
                            }
                        }
                    },
                    {
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "BinaryExpression",
                            "operator": "<=",
                            "left": {
                                "type": "Identifier",
                                "name": "a"
                            },
                            "right": {
                                "type": "Identifier",
                                "name": "a"
                            }
                        }
                    },
                    {
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "BinaryExpression",
                            "operator": ">=",
                            "left": {
                                "type": "Identifier",
                                "name": "a"
                            },
                            "right": {
                                "type": "Identifier",
                                "name": "a"
                            }
                        }
                    },
                    {
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "BinaryExpression",
                            "operator": "instanceof",
                            "left": {
                                "type": "Identifier",
                                "name": "a"
                            },
                            "right": {
                                "type": "Identifier",
                                "name": "a"
                            }
                        }
                    },
                    {
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "BinaryExpression",
                            "operator": "in",
                            "left": {
                                "type": "Identifier",
                                "name": "a"
                            },
                            "right": {
                                "type": "Identifier",
                                "name": "a"
                            }
                        }
                    },
                    {
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "BinaryExpression",
                            "operator": "==",
                            "left": {
                                "type": "Identifier",
                                "name": "a"
                            },
                            "right": {
                                "type": "Identifier",
                                "name": "a"
                            }
                        }
                    },
                    {
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "BinaryExpression",
                            "operator": "!=",
                            "left": {
                                "type": "Identifier",
                                "name": "a"
                            },
                            "right": {
                                "type": "Identifier",
                                "name": "a"
                            }
                        }
                    },
                    {
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "BinaryExpression",
                            "operator": "===",
                            "left": {
                                "type": "Identifier",
                                "name": "a"
                            },
                            "right": {
                                "type": "Identifier",
                                "name": "a"
                            }
                        }
                    },
                    {
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "BinaryExpression",
                            "operator": "!==",
                            "left": {
                                "type": "Identifier",
                                "name": "a"
                            },
                            "right": {
                                "type": "Identifier",
                                "name": "a"
                            }
                        }
                    },
                    {
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "BinaryExpression",
                            "operator": "&",
                            "left": {
                                "type": "Identifier",
                                "name": "a"
                            },
                            "right": {
                                "type": "Identifier",
                                "name": "a"
                            }
                        }
                    },
                    {
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "BinaryExpression",
                            "operator": "^",
                            "left": {
                                "type": "Identifier",
                                "name": "a"
                            },
                            "right": {
                                "type": "Identifier",
                                "name": "a"
                            }
                        }
                    },
                    {
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "BinaryExpression",
                            "operator": "|",
                            "left": {
                                "type": "Identifier",
                                "name": "a"
                            },
                            "right": {
                                "type": "Identifier",
                                "name": "a"
                            }
                        }
                    },
                    {
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "LogicalExpression",
                            "operator": "&&",
                            "left": {
                                "type": "Identifier",
                                "name": "a"
                            },
                            "right": {
                                "type": "Identifier",
                                "name": "a"
                            }
                        }
                    },
                    {
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "LogicalExpression",
                            "operator": "||",
                            "left": {
                                "type": "Identifier",
                                "name": "a"
                            },
                            "right": {
                                "type": "Identifier",
                                "name": "a"
                            }
                        }
                    }
                ],
                "sourceType": "script"
            });
        });
    
        it('should parse "', () => {
            expect(parseScript(`var a = 1;
                a * a, a / a, a % a, a + a, a - a, a << a, a >> a, a >>> a, a < a, a > a, a <= a, a >= a, a instanceof a, a in a, a == a, a != a, a === a, a !== a, a & a, a ^ a, a | a, a && a, a || a;
                `, {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                        "type": "VariableDeclaration",
                        "declarations": [{
                            "type": "VariableDeclarator",
                            "id": {
                                "type": "Identifier",
                                "name": "a"
                            },
                            "init": {
                                "type": "Literal",
                                "value": 1,
                                "raw": "1"
                            }
                        }],
                        "kind": "var"
                    },
                    {
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "SequenceExpression",
                            "expressions": [{
                                    "type": "BinaryExpression",
                                    "operator": "*",
                                    "left": {
                                        "type": "Identifier",
                                        "name": "a"
                                    },
                                    "right": {
                                        "type": "Identifier",
                                        "name": "a"
                                    }
                                },
                                {
                                    "type": "BinaryExpression",
                                    "operator": "/",
                                    "left": {
                                        "type": "Identifier",
                                        "name": "a"
                                    },
                                    "right": {
                                        "type": "Identifier",
                                        "name": "a"
                                    }
                                },
                                {
                                    "type": "BinaryExpression",
                                    "operator": "%",
                                    "left": {
                                        "type": "Identifier",
                                        "name": "a"
                                    },
                                    "right": {
                                        "type": "Identifier",
                                        "name": "a"
                                    }
                                },
                                {
                                    "type": "BinaryExpression",
                                    "operator": "+",
                                    "left": {
                                        "type": "Identifier",
                                        "name": "a"
                                    },
                                    "right": {
                                        "type": "Identifier",
                                        "name": "a"
                                    }
                                },
                                {
                                    "type": "BinaryExpression",
                                    "operator": "-",
                                    "left": {
                                        "type": "Identifier",
                                        "name": "a"
                                    },
                                    "right": {
                                        "type": "Identifier",
                                        "name": "a"
                                    }
                                },
                                {
                                    "type": "BinaryExpression",
                                    "operator": "<<",
                                    "left": {
                                        "type": "Identifier",
                                        "name": "a"
                                    },
                                    "right": {
                                        "type": "Identifier",
                                        "name": "a"
                                    }
                                },
                                {
                                    "type": "BinaryExpression",
                                    "operator": ">>",
                                    "left": {
                                        "type": "Identifier",
                                        "name": "a"
                                    },
                                    "right": {
                                        "type": "Identifier",
                                        "name": "a"
                                    }
                                },
                                {
                                    "type": "BinaryExpression",
                                    "operator": ">>>",
                                    "left": {
                                        "type": "Identifier",
                                        "name": "a"
                                    },
                                    "right": {
                                        "type": "Identifier",
                                        "name": "a"
                                    }
                                },
                                {
                                    "type": "BinaryExpression",
                                    "operator": "<",
                                    "left": {
                                        "type": "Identifier",
                                        "name": "a"
                                    },
                                    "right": {
                                        "type": "Identifier",
                                        "name": "a"
                                    }
                                },
                                {
                                    "type": "BinaryExpression",
                                    "operator": ">",
                                    "left": {
                                        "type": "Identifier",
                                        "name": "a"
                                    },
                                    "right": {
                                        "type": "Identifier",
                                        "name": "a"
                                    }
                                },
                                {
                                    "type": "BinaryExpression",
                                    "operator": "<=",
                                    "left": {
                                        "type": "Identifier",
                                        "name": "a"
                                    },
                                    "right": {
                                        "type": "Identifier",
                                        "name": "a"
                                    }
                                },
                                {
                                    "type": "BinaryExpression",
                                    "operator": ">=",
                                    "left": {
                                        "type": "Identifier",
                                        "name": "a"
                                    },
                                    "right": {
                                        "type": "Identifier",
                                        "name": "a"
                                    }
                                },
                                {
                                    "type": "BinaryExpression",
                                    "operator": "instanceof",
                                    "left": {
                                        "type": "Identifier",
                                        "name": "a"
                                    },
                                    "right": {
                                        "type": "Identifier",
                                        "name": "a"
                                    }
                                },
                                {
                                    "type": "BinaryExpression",
                                    "operator": "in",
                                    "left": {
                                        "type": "Identifier",
                                        "name": "a"
                                    },
                                    "right": {
                                        "type": "Identifier",
                                        "name": "a"
                                    }
                                },
                                {
                                    "type": "BinaryExpression",
                                    "operator": "==",
                                    "left": {
                                        "type": "Identifier",
                                        "name": "a"
                                    },
                                    "right": {
                                        "type": "Identifier",
                                        "name": "a"
                                    }
                                },
                                {
                                    "type": "BinaryExpression",
                                    "operator": "!=",
                                    "left": {
                                        "type": "Identifier",
                                        "name": "a"
                                    },
                                    "right": {
                                        "type": "Identifier",
                                        "name": "a"
                                    }
                                },
                                {
                                    "type": "BinaryExpression",
                                    "operator": "===",
                                    "left": {
                                        "type": "Identifier",
                                        "name": "a"
                                    },
                                    "right": {
                                        "type": "Identifier",
                                        "name": "a"
                                    }
                                },
                                {
                                    "type": "BinaryExpression",
                                    "operator": "!==",
                                    "left": {
                                        "type": "Identifier",
                                        "name": "a"
                                    },
                                    "right": {
                                        "type": "Identifier",
                                        "name": "a"
                                    }
                                },
                                {
                                    "type": "BinaryExpression",
                                    "operator": "&",
                                    "left": {
                                        "type": "Identifier",
                                        "name": "a"
                                    },
                                    "right": {
                                        "type": "Identifier",
                                        "name": "a"
                                    }
                                },
                                {
                                    "type": "BinaryExpression",
                                    "operator": "^",
                                    "left": {
                                        "type": "Identifier",
                                        "name": "a"
                                    },
                                    "right": {
                                        "type": "Identifier",
                                        "name": "a"
                                    }
                                },
                                {
                                    "type": "BinaryExpression",
                                    "operator": "|",
                                    "left": {
                                        "type": "Identifier",
                                        "name": "a"
                                    },
                                    "right": {
                                        "type": "Identifier",
                                        "name": "a"
                                    }
                                },
                                {
                                    "type": "LogicalExpression",
                                    "operator": "&&",
                                    "left": {
                                        "type": "Identifier",
                                        "name": "a"
                                    },
                                    "right": {
                                        "type": "Identifier",
                                        "name": "a"
                                    }
                                },
                                {
                                    "type": "LogicalExpression",
                                    "operator": "||",
                                    "left": {
                                        "type": "Identifier",
                                        "name": "a"
                                    },
                                    "right": {
                                        "type": "Identifier",
                                        "name": "a"
                                    }
                                }
                            ]
                        }
                    }
                ],
                "sourceType": "script"
            });
        });
    
        it('should parse "', () => {
            expect(parseScript(`var a = 1;
                a = -a;
                a = +a;
                a = !a;
                a = ~a;
                a = ++a;
                a = --a;
                a = a++;
                a = a--;
                a = typeof a;
                a = void a;
                a = delete a;`, {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                        "type": "VariableDeclaration",
                        "declarations": [{
                            "type": "VariableDeclarator",
                            "id": {
                                "type": "Identifier",
                                "name": "a"
                            },
                            "init": {
                                "type": "Literal",
                                "value": 1,
                                "raw": "1"
                            }
                        }],
                        "kind": "var"
                    },
                    {
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "AssignmentExpression",
                            "operator": "=",
                            "left": {
                                "type": "Identifier",
                                "name": "a"
                            },
                            "right": {
                                "type": "UnaryExpression",
                                "operator": "-",
                                "argument": {
                                    "type": "Identifier",
                                    "name": "a"
                                },
                                "prefix": true
                            }
                        }
                    },
                    {
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "AssignmentExpression",
                            "operator": "=",
                            "left": {
                                "type": "Identifier",
                                "name": "a"
                            },
                            "right": {
                                "type": "UnaryExpression",
                                "operator": "+",
                                "argument": {
                                    "type": "Identifier",
                                    "name": "a"
                                },
                                "prefix": true
                            }
                        }
                    },
                    {
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "AssignmentExpression",
                            "operator": "=",
                            "left": {
                                "type": "Identifier",
                                "name": "a"
                            },
                            "right": {
                                "type": "UnaryExpression",
                                "operator": "!",
                                "argument": {
                                    "type": "Identifier",
                                    "name": "a"
                                },
                                "prefix": true
                            }
                        }
                    },
                    {
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "AssignmentExpression",
                            "operator": "=",
                            "left": {
                                "type": "Identifier",
                                "name": "a"
                            },
                            "right": {
                                "type": "UnaryExpression",
                                "operator": "~",
                                "argument": {
                                    "type": "Identifier",
                                    "name": "a"
                                },
                                "prefix": true
                            }
                        }
                    },
                    {
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "AssignmentExpression",
                            "operator": "=",
                            "left": {
                                "type": "Identifier",
                                "name": "a"
                            },
                            "right": {
                                "type": "UpdateExpression",
                                "operator": "++",
                                "argument": {
                                    "type": "Identifier",
                                    "name": "a"
                                },
                                "prefix": true
                            }
                        }
                    },
                    {
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "AssignmentExpression",
                            "operator": "=",
                            "left": {
                                "type": "Identifier",
                                "name": "a"
                            },
                            "right": {
                                "type": "UpdateExpression",
                                "operator": "--",
                                "argument": {
                                    "type": "Identifier",
                                    "name": "a"
                                },
                                "prefix": true
                            }
                        }
                    },
                    {
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "AssignmentExpression",
                            "operator": "=",
                            "left": {
                                "type": "Identifier",
                                "name": "a"
                            },
                            "right": {
                                "type": "UpdateExpression",
                                "operator": "++",
                                "argument": {
                                    "type": "Identifier",
                                    "name": "a"
                                },
                                "prefix": false
                            }
                        }
                    },
                    {
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "AssignmentExpression",
                            "operator": "=",
                            "left": {
                                "type": "Identifier",
                                "name": "a"
                            },
                            "right": {
                                "type": "UpdateExpression",
                                "operator": "--",
                                "argument": {
                                    "type": "Identifier",
                                    "name": "a"
                                },
                                "prefix": false
                            }
                        }
                    },
                    {
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "AssignmentExpression",
                            "operator": "=",
                            "left": {
                                "type": "Identifier",
                                "name": "a"
                            },
                            "right": {
                                "type": "UnaryExpression",
                                "operator": "typeof",
                                "argument": {
                                    "type": "Identifier",
                                    "name": "a"
                                },
                                "prefix": true
                            }
                        }
                    },
                    {
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "AssignmentExpression",
                            "operator": "=",
                            "left": {
                                "type": "Identifier",
                                "name": "a"
                            },
                            "right": {
                                "type": "UnaryExpression",
                                "operator": "void",
                                "argument": {
                                    "type": "Identifier",
                                    "name": "a"
                                },
                                "prefix": true
                            }
                        }
                    },
                    {
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "AssignmentExpression",
                            "operator": "=",
                            "left": {
                                "type": "Identifier",
                                "name": "a"
                            },
                            "right": {
                                "type": "UnaryExpression",
                                "operator": "delete",
                                "argument": {
                                    "type": "Identifier",
                                    "name": "a"
                                },
                                "prefix": true
                            }
                        }
                    }
                ],
                "sourceType": "script"
            });
        });
    
        it('should parse ""', () => {
            expect(parseScript(`var a = 1;
                a = -a -a---a;
                a = +a +a+++a;
                a = !!!a;
                a = ~~~a;
                a = typeof typeof a;
                a = void void a;
                a = delete delete a;`, {
                raw: true,
                ranges: true
            })).to.eql({
                "type": "Program",
                "start": 0,
                "end": 231,
                "body": [
                  {
                    "type": "VariableDeclaration",
                    "start": 0,
                    "end": 10,
                    "declarations": [
                      {
                        "type": "VariableDeclarator",
                        "start": 4,
                        "end": 9,
                        "id": {
                          "type": "Identifier",
                          "start": 4,
                          "end": 5,
                          "name": "a"
                        },
                        "init": {
                          "type": "Literal",
                          "start": 8,
                          "end": 9,
                          "value": 1,
                          "raw": "1"
                        }
                      }
                    ],
                    "kind": "var"
                  },
                  {
                    "type": "ExpressionStatement",
                    "start": 27,
                    "end": 41,
                    "expression": {
                      "type": "AssignmentExpression",
                      "start": 27,
                      "end": 40,
                      "operator": "=",
                      "left": {
                        "type": "Identifier",
                        "start": 27,
                        "end": 28,
                        "name": "a"
                      },
                      "right": {
                        "type": "BinaryExpression",
                        "start": 31,
                        "end": 40,
                        "left": {
                          "type": "BinaryExpression",
                          "start": 31,
                          "end": 38,
                          "left": {
                            "type": "UnaryExpression",
                            "start": 31,
                            "end": 33,
                            "operator": "-",
                            "prefix": true,
                            "argument": {
                              "type": "Identifier",
                              "start": 32,
                              "end": 33,
                              "name": "a"
                            }
                          },
                          "operator": "-",
                          "right": {
                            "type": "UpdateExpression",
                            "start": 35,
                            "end": 38,
                            "operator": "--",
                            "prefix": false,
                            "argument": {
                              "type": "Identifier",
                              "start": 35,
                              "end": 36,
                              "name": "a"
                            }
                          }
                        },
                        "operator": "-",
                        "right": {
                          "type": "Identifier",
                          "start": 39,
                          "end": 40,
                          "name": "a"
                        }
                      }
                    }
                  },
                  {
                    "type": "ExpressionStatement",
                    "start": 58,
                    "end": 72,
                    "expression": {
                      "type": "AssignmentExpression",
                      "start": 58,
                      "end": 71,
                      "operator": "=",
                      "left": {
                        "type": "Identifier",
                        "start": 58,
                        "end": 59,
                        "name": "a"
                      },
                      "right": {
                        "type": "BinaryExpression",
                        "start": 62,
                        "end": 71,
                        "left": {
                          "type": "BinaryExpression",
                          "start": 62,
                          "end": 69,
                          "left": {
                            "type": "UnaryExpression",
                            "start": 62,
                            "end": 64,
                            "operator": "+",
                            "prefix": true,
                            "argument": {
                              "type": "Identifier",
                              "start": 63,
                              "end": 64,
                              "name": "a"
                            }
                          },
                          "operator": "+",
                          "right": {
                            "type": "UpdateExpression",
                            "start": 66,
                            "end": 69,
                            "operator": "++",
                            "prefix": false,
                            "argument": {
                              "type": "Identifier",
                              "start": 66,
                              "end": 67,
                              "name": "a"
                            }
                          }
                        },
                        "operator": "+",
                        "right": {
                          "type": "Identifier",
                          "start": 70,
                          "end": 71,
                          "name": "a"
                        }
                      }
                    }
                  },
                  {
                    "type": "ExpressionStatement",
                    "start": 89,
                    "end": 98,
                    "expression": {
                      "type": "AssignmentExpression",
                      "start": 89,
                      "end": 97,
                      "operator": "=",
                      "left": {
                        "type": "Identifier",
                        "start": 89,
                        "end": 90,
                        "name": "a"
                      },
                      "right": {
                        "type": "UnaryExpression",
                        "start": 93,
                        "end": 97,
                        "operator": "!",
                        "prefix": true,
                        "argument": {
                          "type": "UnaryExpression",
                          "start": 94,
                          "end": 97,
                          "operator": "!",
                          "prefix": true,
                          "argument": {
                            "type": "UnaryExpression",
                            "start": 95,
                            "end": 97,
                            "operator": "!",
                            "prefix": true,
                            "argument": {
                              "type": "Identifier",
                              "start": 96,
                              "end": 97,
                              "name": "a"
                            }
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "ExpressionStatement",
                    "start": 115,
                    "end": 124,
                    "expression": {
                      "type": "AssignmentExpression",
                      "start": 115,
                      "end": 123,
                      "operator": "=",
                      "left": {
                        "type": "Identifier",
                        "start": 115,
                        "end": 116,
                        "name": "a"
                      },
                      "right": {
                        "type": "UnaryExpression",
                        "start": 119,
                        "end": 123,
                        "operator": "~",
                        "prefix": true,
                        "argument": {
                          "type": "UnaryExpression",
                          "start": 120,
                          "end": 123,
                          "operator": "~",
                          "prefix": true,
                          "argument": {
                            "type": "UnaryExpression",
                            "start": 121,
                            "end": 123,
                            "operator": "~",
                            "prefix": true,
                            "argument": {
                              "type": "Identifier",
                              "start": 122,
                              "end": 123,
                              "name": "a"
                            }
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "ExpressionStatement",
                    "start": 141,
                    "end": 161,
                    "expression": {
                      "type": "AssignmentExpression",
                      "start": 141,
                      "end": 160,
                      "operator": "=",
                      "left": {
                        "type": "Identifier",
                        "start": 141,
                        "end": 142,
                        "name": "a"
                      },
                      "right": {
                        "type": "UnaryExpression",
                        "start": 145,
                        "end": 160,
                        "operator": "typeof",
                        "prefix": true,
                        "argument": {
                          "type": "UnaryExpression",
                          "start": 152,
                          "end": 160,
                          "operator": "typeof",
                          "prefix": true,
                          "argument": {
                            "type": "Identifier",
                            "start": 159,
                            "end": 160,
                            "name": "a"
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "ExpressionStatement",
                    "start": 178,
                    "end": 194,
                    "expression": {
                      "type": "AssignmentExpression",
                      "start": 178,
                      "end": 193,
                      "operator": "=",
                      "left": {
                        "type": "Identifier",
                        "start": 178,
                        "end": 179,
                        "name": "a"
                      },
                      "right": {
                        "type": "UnaryExpression",
                        "start": 182,
                        "end": 193,
                        "operator": "void",
                        "prefix": true,
                        "argument": {
                          "type": "UnaryExpression",
                          "start": 187,
                          "end": 193,
                          "operator": "void",
                          "prefix": true,
                          "argument": {
                            "type": "Identifier",
                            "start": 192,
                            "end": 193,
                            "name": "a"
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "ExpressionStatement",
                    "start": 211,
                    "end": 231,
                    "expression": {
                      "type": "AssignmentExpression",
                      "start": 211,
                      "end": 230,
                      "operator": "=",
                      "left": {
                        "type": "Identifier",
                        "start": 211,
                        "end": 212,
                        "name": "a"
                      },
                      "right": {
                        "type": "UnaryExpression",
                        "start": 215,
                        "end": 230,
                        "operator": "delete",
                        "prefix": true,
                        "argument": {
                          "type": "UnaryExpression",
                          "start": 222,
                          "end": 230,
                          "operator": "delete",
                          "prefix": true,
                          "argument": {
                            "type": "Identifier",
                            "start": 229,
                            "end": 230,
                            "name": "a"
                          }
                        }
                      }
                    }
                  }
                ],
                "sourceType": "script"
              });
        });
    
    
        it('should parse ""', () => {
            expect(parseScript(`switch (a) {
                    case 1:
                    case 2:
                      break;
                    default:
                  }`, {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "SwitchStatement",
                    "discriminant": {
                        "type": "Identifier",
                        "name": "a"
                    },
                    "cases": [{
                            "type": "SwitchCase",
                            "test": {
                                "type": "Literal",
                                "value": 1,
                                "raw": "1"
                            },
                            "consequent": []
                        },
                        {
                            "type": "SwitchCase",
                            "test": {
                                "type": "Literal",
                                "value": 2,
                                "raw": "2"
                            },
                            "consequent": [{
                                "type": "BreakStatement",
                                "label": null
                            }]
                        },
                        {
                            "type": "SwitchCase",
                            "test": null,
                            "consequent": []
                        }
                    ]
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse ""', () => {
            expect(parseScript(`switch (a) {
                    default:
                      b++;
                      break;
                  }`, {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "SwitchStatement",
                    "discriminant": {
                        "type": "Identifier",
                        "name": "a"
                    },
                    "cases": [{
                        "type": "SwitchCase",
                        "test": null,
                        "consequent": [{
                                "type": "ExpressionStatement",
                                "expression": {
                                    "type": "UpdateExpression",
                                    "operator": "++",
                                    "argument": {
                                        "type": "Identifier",
                                        "name": "b"
                                    },
                                    "prefix": false
                                }
                            },
                            {
                                "type": "BreakStatement",
                                "label": null
                            }
                        ]
                    }]
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "function a({ a: A = 1 + 1, b: { c: { d: D = 1 + 1, e: { f } } } }) {}"', () => {
            expect(parseScript(`function a({ a: A = 1 + 1, b: { c: { d: D = 1 + 1, e: { f } } } }) {}`, {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "FunctionDeclaration",
                    "id": {
                        "type": "Identifier",
                        "name": "a"
                    },
                    "params": [{
                        "type": "ObjectPattern",
                        "properties": [{
                                "type": "Property",
                                "key": {
                                    "type": "Identifier",
                                    "name": "a"
                                },
                                "computed": false,
                                "value": {
                                    "type": "AssignmentPattern",
                                    "left": {
                                        "type": "Identifier",
                                        "name": "A"
                                    },
                                    "right": {
                                        "type": "BinaryExpression",
                                        "operator": "+",
                                        "left": {
                                            "type": "Literal",
                                            "value": 1,
                                            "raw": "1"
                                        },
                                        "right": {
                                            "type": "Literal",
                                            "value": 1,
                                            "raw": "1"
                                        }
                                    }
                                },
                                "kind": "init",
                                "method": false,
                                "shorthand": false
                            },
                            {
                                "type": "Property",
                                "key": {
                                    "type": "Identifier",
                                    "name": "b"
                                },
                                "computed": false,
                                "value": {
                                    "type": "ObjectPattern",
                                    "properties": [{
                                        "type": "Property",
                                        "key": {
                                            "type": "Identifier",
                                            "name": "c"
                                        },
                                        "computed": false,
                                        "value": {
                                            "type": "ObjectPattern",
                                            "properties": [{
                                                    "type": "Property",
                                                    "key": {
                                                        "type": "Identifier",
                                                        "name": "d"
                                                    },
                                                    "computed": false,
                                                    "value": {
                                                        "type": "AssignmentPattern",
                                                        "left": {
                                                            "type": "Identifier",
                                                            "name": "D"
                                                        },
                                                        "right": {
                                                            "type": "BinaryExpression",
                                                            "operator": "+",
                                                            "left": {
                                                                "type": "Literal",
                                                                "value": 1,
                                                                "raw": "1"
                                                            },
                                                            "right": {
                                                                "type": "Literal",
                                                                "value": 1,
                                                                "raw": "1"
                                                            }
                                                        }
                                                    },
                                                    "kind": "init",
                                                    "method": false,
                                                    "shorthand": false
                                                },
                                                {
                                                    "type": "Property",
                                                    "key": {
                                                        "type": "Identifier",
                                                        "name": "e"
                                                    },
                                                    "computed": false,
                                                    "value": {
                                                        "type": "ObjectPattern",
                                                        "properties": [{
                                                            "type": "Property",
                                                            "key": {
                                                                "type": "Identifier",
                                                                "name": "f"
                                                            },
                                                            "computed": false,
                                                            "value": {
                                                                "type": "Identifier",
                                                                "name": "f"
                                                            },
                                                            "kind": "init",
                                                            "method": false,
                                                            "shorthand": true
                                                        }]
                                                    },
                                                    "kind": "init",
                                                    "method": false,
                                                    "shorthand": false
                                                }
                                            ]
                                        },
                                        "kind": "init",
                                        "method": false,
                                        "shorthand": false
                                    }]
                                },
                                "kind": "init",
                                "method": false,
                                "shorthand": false
                            }
                        ]
                    }],
                    "body": {
                        "type": "BlockStatement",
                        "body": []
                    },
                    "generator": false,
                    "expression": false,
                    "async": false
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "function a(a = 1, b) {}"', () => {
            expect(parseScript(`function a(a = 1, b) {}`, {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "FunctionDeclaration",
                    "id": {
                        "type": "Identifier",
                        "name": "a"
                    },
                    "params": [{
                            "type": "AssignmentPattern",
                            "left": {
                                "type": "Identifier",
                                "name": "a"
                            },
                            "right": {
                                "type": "Literal",
                                "value": 1,
                                "raw": "1"
                            }
                        },
                        {
                            "type": "Identifier",
                            "name": "b"
                        }
                    ],
                    "body": {
                        "type": "BlockStatement",
                        "body": []
                    },
                    "generator": false,
                    "expression": false,
                    "async": false
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse ""', () => {
            expect(parseScript(`function a([ a = [ b = [c]], d,, ...e]) {}`, {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "FunctionDeclaration",
                    "id": {
                        "type": "Identifier",
                        "name": "a"
                    },
                    "params": [{
                        "type": "ArrayPattern",
                        "elements": [{
                                "type": "AssignmentPattern",
                                "left": {
                                    "type": "Identifier",
                                    "name": "a"
                                },
                                "right": {
                                    "type": "ArrayExpression",
                                    "elements": [{
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                            "type": "Identifier",
                                            "name": "b"
                                        },
                                        "right": {
                                            "type": "ArrayExpression",
                                            "elements": [{
                                                "type": "Identifier",
                                                "name": "c"
                                            }]
                                        }
                                    }]
                                }
                            },
                            {
                                "type": "Identifier",
                                "name": "d"
                            },
                            null,
                            {
                                "type": "RestElement",
                                "argument": {
                                    "type": "Identifier",
                                    "name": "e"
                                }
                            }
                        ]
                    }],
                    "body": {
                        "type": "BlockStatement",
                        "body": []
                    },
                    "generator": false,
                    "expression": false,
                    "async": false
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "var {a: A, b: B = 1, c: { d }} = o;"', () => {
            expect(parseScript(`var {a: A, b: B = 1, c: { d }} = o;`, {
                raw: true,
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "VariableDeclaration",
                    "declarations": [{
                        "type": "VariableDeclarator",
                        "id": {
                            "type": "ObjectPattern",
                            "properties": [{
                                    "type": "Property",
                                    "key": {
                                        "type": "Identifier",
                                        "name": "a"
                                    },
                                    "computed": false,
                                    "value": {
                                        "type": "Identifier",
                                        "name": "A"
                                    },
                                    "kind": "init",
                                    "method": false,
                                    "shorthand": false
                                },
                                {
                                    "type": "Property",
                                    "key": {
                                        "type": "Identifier",
                                        "name": "b"
                                    },
                                    "computed": false,
                                    "value": {
                                        "type": "AssignmentPattern",
                                        "left": {
                                            "type": "Identifier",
                                            "name": "B"
                                        },
                                        "right": {
                                            "type": "Literal",
                                            "value": 1,
                                            "raw": "1"
                                        }
                                    },
                                    "kind": "init",
                                    "method": false,
                                    "shorthand": false
                                },
                                {
                                    "type": "Property",
                                    "key": {
                                        "type": "Identifier",
                                        "name": "c"
                                    },
                                    "computed": false,
                                    "value": {
                                        "type": "ObjectPattern",
                                        "properties": [{
                                            "type": "Property",
                                            "key": {
                                                "type": "Identifier",
                                                "name": "d"
                                            },
                                            "computed": false,
                                            "value": {
                                                "type": "Identifier",
                                                "name": "d"
                                            },
                                            "kind": "init",
                                            "method": false,
                                            "shorthand": true
                                        }]
                                    },
                                    "kind": "init",
                                    "method": false,
                                    "shorthand": false
                                }
                            ]
                        },
                        "init": {
                            "type": "Identifier",
                            "name": "o"
                        }
                    }],
                    "kind": "var"
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse ""', () => {
            expect(parseScript(`function* a() {
                    yield* yield* 1;
                  }`, {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "FunctionDeclaration",
                    "id": {
                        "type": "Identifier",
                        "name": "a"
                    },
                    "params": [],
                    "body": {
                        "type": "BlockStatement",
                        "body": [{
                            "type": "ExpressionStatement",
                            "expression": {
                                "type": "YieldExpression",
                                "argument": {
                                    "type": "YieldExpression",
                                    "argument": {
                                        "type": "Literal",
                                        "value": 1,
                                        "raw": "1"
                                    },
                                    "delegate": true
                                },
                                "delegate": true
                            }
                        }]
                    },
                    "generator": true,
                    "expression": false,
                    "async": false
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "({ a: { b: { c = "it worked" } } } = { a: { b: {} } });"', () => {
            expect(parseScript(`({ a: { b: { c = "it worked" } } } = { a: { b: {} } });`, {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                            "type": "ObjectPattern",
                            "properties": [{
                                "type": "Property",
                                "key": {
                                    "type": "Identifier",
                                    "name": "a"
                                },
                                "computed": false,
                                "value": {
                                    "type": "ObjectPattern",
                                    "properties": [{
                                        "type": "Property",
                                        "key": {
                                            "type": "Identifier",
                                            "name": "b"
                                        },
                                        "computed": false,
                                        "value": {
                                            "type": "ObjectPattern",
                                            "properties": [{
                                                "type": "Property",
                                                "key": {
                                                    "type": "Identifier",
                                                    "name": "c"
                                                },
                                                "computed": false,
                                                "value": {
                                                    "type": "AssignmentPattern",
                                                    "left": {
                                                        "type": "Identifier",
                                                        "name": "c"
                                                    },
                                                    "right": {
                                                        "type": "Literal",
                                                        "value": "it worked",
                                                        "raw": "\"it worked\""
                                                    }
                                                },
                                                "kind": "init",
                                                "method": false,
                                                "shorthand": true
                                            }]
                                        },
                                        "kind": "init",
                                        "method": false,
                                        "shorthand": false
                                    }]
                                },
                                "kind": "init",
                                "method": false,
                                "shorthand": false
                            }]
                        },
                        "right": {
                            "type": "ObjectExpression",
                            "properties": [{
                                "type": "Property",
                                "key": {
                                    "type": "Identifier",
                                    "name": "a"
                                },
                                "computed": false,
                                "value": {
                                    "type": "ObjectExpression",
                                    "properties": [{
                                        "type": "Property",
                                        "key": {
                                            "type": "Identifier",
                                            "name": "b"
                                        },
                                        "computed": false,
                                        "value": {
                                            "type": "ObjectExpression",
                                            "properties": []
                                        },
                                        "kind": "init",
                                        "method": false,
                                        "shorthand": false
                                    }]
                                },
                                "kind": "init",
                                "method": false,
                                "shorthand": false
                            }]
                        }
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse ""', () => {
            expect(parseScript(`if (options != null) {
                    if (options.next) context |= Context.OptionsNext;
                    if (options.jsx) context |= Context.OptionsJSX;
                    if (options.ranges) context |= Context.OptionsRanges;
                    if (options.raw) context |= Context.OptionsRaw;
                    if (options.onComment != null) onComment = options.onComment;
                }
            `, {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "IfStatement",
                    "test": {
                        "type": "BinaryExpression",
                        "operator": "!=",
                        "left": {
                            "type": "Identifier",
                            "name": "options"
                        },
                        "right": {
                            "type": "Literal",
                            "value": null,
                            "raw": "null"
                        }
                    },
                    "consequent": {
                        "type": "BlockStatement",
                        "body": [{
                                "type": "IfStatement",
                                "test": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                        "type": "Identifier",
                                        "name": "options"
                                    },
                                    "property": {
                                        "type": "Identifier",
                                        "name": "next"
                                    }
                                },
                                "consequent": {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "|=",
                                        "left": {
                                            "type": "Identifier",
                                            "name": "context"
                                        },
                                        "right": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                                "type": "Identifier",
                                                "name": "Context"
                                            },
                                            "property": {
                                                "type": "Identifier",
                                                "name": "OptionsNext"
                                            }
                                        }
                                    }
                                },
                                "alternate": null
                            },
                            {
                                "type": "IfStatement",
                                "test": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                        "type": "Identifier",
                                        "name": "options"
                                    },
                                    "property": {
                                        "type": "Identifier",
                                        "name": "jsx"
                                    }
                                },
                                "consequent": {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "|=",
                                        "left": {
                                            "type": "Identifier",
                                            "name": "context"
                                        },
                                        "right": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                                "type": "Identifier",
                                                "name": "Context"
                                            },
                                            "property": {
                                                "type": "Identifier",
                                                "name": "OptionsJSX"
                                            }
                                        }
                                    }
                                },
                                "alternate": null
                            },
                            {
                                "type": "IfStatement",
                                "test": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                        "type": "Identifier",
                                        "name": "options"
                                    },
                                    "property": {
                                        "type": "Identifier",
                                        "name": "ranges"
                                    }
                                },
                                "consequent": {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "|=",
                                        "left": {
                                            "type": "Identifier",
                                            "name": "context"
                                        },
                                        "right": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                                "type": "Identifier",
                                                "name": "Context"
                                            },
                                            "property": {
                                                "type": "Identifier",
                                                "name": "OptionsRanges"
                                            }
                                        }
                                    }
                                },
                                "alternate": null
                            },
                            {
                                "type": "IfStatement",
                                "test": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                        "type": "Identifier",
                                        "name": "options"
                                    },
                                    "property": {
                                        "type": "Identifier",
                                        "name": "raw"
                                    }
                                },
                                "consequent": {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "|=",
                                        "left": {
                                            "type": "Identifier",
                                            "name": "context"
                                        },
                                        "right": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                                "type": "Identifier",
                                                "name": "Context"
                                            },
                                            "property": {
                                                "type": "Identifier",
                                                "name": "OptionsRaw"
                                            }
                                        }
                                    }
                                },
                                "alternate": null
                            },
                            {
                                "type": "IfStatement",
                                "test": {
                                    "type": "BinaryExpression",
                                    "operator": "!=",
                                    "left": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                            "type": "Identifier",
                                            "name": "options"
                                        },
                                        "property": {
                                            "type": "Identifier",
                                            "name": "onComment"
                                        }
                                    },
                                    "right": {
                                        "type": "Literal",
                                        "value": null,
                                        "raw": "null"
                                    }
                                },
                                "consequent": {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                            "type": "Identifier",
                                            "name": "onComment"
                                        },
                                        "right": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                                "type": "Identifier",
                                                "name": "options"
                                            },
                                            "property": {
                                                "type": "Identifier",
                                                "name": "onComment"
                                            }
                                        }
                                    }
                                },
                                "alternate": null
                            }
                        ]
                    },
                    "alternate": null
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse ""', () => {
            expect(parseScript(` parser.index++;
                if (!lastIsCR) {
                    parser.column = 0;
                    parser.line++;
                }`, {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "UpdateExpression",
                            "operator": "++",
                            "argument": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                    "type": "Identifier",
                                    "name": "parser"
                                },
                                "property": {
                                    "type": "Identifier",
                                    "name": "index"
                                }
                            },
                            "prefix": false
                        }
                    },
                    {
                        "type": "IfStatement",
                        "test": {
                            "type": "UnaryExpression",
                            "operator": "!",
                            "argument": {
                                "type": "Identifier",
                                "name": "lastIsCR"
                            },
                            "prefix": true
                        },
                        "consequent": {
                            "type": "BlockStatement",
                            "body": [{
                                    "type": "ExpressionStatement",
                                    "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                                "type": "Identifier",
                                                "name": "parser"
                                            },
                                            "property": {
                                                "type": "Identifier",
                                                "name": "column"
                                            }
                                        },
                                        "right": {
                                            "type": "Literal",
                                            "value": 0,
                                            "raw": "0"
                                        }
                                    }
                                },
                                {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                        "type": "UpdateExpression",
                                        "operator": "++",
                                        "argument": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                                "type": "Identifier",
                                                "name": "parser"
                                            },
                                            "property": {
                                                "type": "Identifier",
                                                "name": "line"
                                            }
                                        },
                                        "prefix": false
                                    }
                                }
                            ]
                        },
                        "alternate": null
                    }
                ],
                "sourceType": "script"
            });
        });
    
        it('should parse ""', () => {
            expect(parseScript(`function toHex(code) {
                    if (code < Chars.Zero) return -1;
                    if (code <= Chars.Nine) return code - Chars.Zero;
                    if (code < Chars.UpperA) return -1;
                    if (code <= Chars.UpperF) return code - Chars.UpperA + 10;
                    if (code < Chars.LowerA) return -1;
                    if (code <= Chars.LowerF) return code - Chars.LowerA + 10;
                    return -1;
                }`, {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "FunctionDeclaration",
                    "id": {
                        "type": "Identifier",
                        "name": "toHex"
                    },
                    "params": [{
                        "type": "Identifier",
                        "name": "code"
                    }],
                    "body": {
                        "type": "BlockStatement",
                        "body": [{
                                "type": "IfStatement",
                                "test": {
                                    "type": "BinaryExpression",
                                    "operator": "<",
                                    "left": {
                                        "type": "Identifier",
                                        "name": "code"
                                    },
                                    "right": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                            "type": "Identifier",
                                            "name": "Chars"
                                        },
                                        "property": {
                                            "type": "Identifier",
                                            "name": "Zero"
                                        }
                                    }
                                },
                                "consequent": {
                                    "type": "ReturnStatement",
                                    "argument": {
                                        "type": "UnaryExpression",
                                        "operator": "-",
                                        "argument": {
                                            "type": "Literal",
                                            "value": 1,
                                            "raw": "1"
                                        },
                                        "prefix": true
                                    }
                                },
                                "alternate": null
                            },
                            {
                                "type": "IfStatement",
                                "test": {
                                    "type": "BinaryExpression",
                                    "operator": "<=",
                                    "left": {
                                        "type": "Identifier",
                                        "name": "code"
                                    },
                                    "right": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                            "type": "Identifier",
                                            "name": "Chars"
                                        },
                                        "property": {
                                            "type": "Identifier",
                                            "name": "Nine"
                                        }
                                    }
                                },
                                "consequent": {
                                    "type": "ReturnStatement",
                                    "argument": {
                                        "type": "BinaryExpression",
                                        "operator": "-",
                                        "left": {
                                            "type": "Identifier",
                                            "name": "code"
                                        },
                                        "right": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                                "type": "Identifier",
                                                "name": "Chars"
                                            },
                                            "property": {
                                                "type": "Identifier",
                                                "name": "Zero"
                                            }
                                        }
                                    }
                                },
                                "alternate": null
                            },
                            {
                                "type": "IfStatement",
                                "test": {
                                    "type": "BinaryExpression",
                                    "operator": "<",
                                    "left": {
                                        "type": "Identifier",
                                        "name": "code"
                                    },
                                    "right": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                            "type": "Identifier",
                                            "name": "Chars"
                                        },
                                        "property": {
                                            "type": "Identifier",
                                            "name": "UpperA"
                                        }
                                    }
                                },
                                "consequent": {
                                    "type": "ReturnStatement",
                                    "argument": {
                                        "type": "UnaryExpression",
                                        "operator": "-",
                                        "argument": {
                                            "type": "Literal",
                                            "value": 1,
                                            "raw": "1"
                                        },
                                        "prefix": true
                                    }
                                },
                                "alternate": null
                            },
                            {
                                "type": "IfStatement",
                                "test": {
                                    "type": "BinaryExpression",
                                    "operator": "<=",
                                    "left": {
                                        "type": "Identifier",
                                        "name": "code"
                                    },
                                    "right": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                            "type": "Identifier",
                                            "name": "Chars"
                                        },
                                        "property": {
                                            "type": "Identifier",
                                            "name": "UpperF"
                                        }
                                    }
                                },
                                "consequent": {
                                    "type": "ReturnStatement",
                                    "argument": {
                                        "type": "BinaryExpression",
                                        "operator": "+",
                                        "left": {
                                            "type": "BinaryExpression",
                                            "operator": "-",
                                            "left": {
                                                "type": "Identifier",
                                                "name": "code"
                                            },
                                            "right": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                    "type": "Identifier",
                                                    "name": "Chars"
                                                },
                                                "property": {
                                                    "type": "Identifier",
                                                    "name": "UpperA"
                                                }
                                            }
                                        },
                                        "right": {
                                            "type": "Literal",
                                            "value": 10,
                                            "raw": "10"
                                        }
                                    }
                                },
                                "alternate": null
                            },
                            {
                                "type": "IfStatement",
                                "test": {
                                    "type": "BinaryExpression",
                                    "operator": "<",
                                    "left": {
                                        "type": "Identifier",
                                        "name": "code"
                                    },
                                    "right": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                            "type": "Identifier",
                                            "name": "Chars"
                                        },
                                        "property": {
                                            "type": "Identifier",
                                            "name": "LowerA"
                                        }
                                    }
                                },
                                "consequent": {
                                    "type": "ReturnStatement",
                                    "argument": {
                                        "type": "UnaryExpression",
                                        "operator": "-",
                                        "argument": {
                                            "type": "Literal",
                                            "value": 1,
                                            "raw": "1"
                                        },
                                        "prefix": true
                                    }
                                },
                                "alternate": null
                            },
                            {
                                "type": "IfStatement",
                                "test": {
                                    "type": "BinaryExpression",
                                    "operator": "<=",
                                    "left": {
                                        "type": "Identifier",
                                        "name": "code"
                                    },
                                    "right": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                            "type": "Identifier",
                                            "name": "Chars"
                                        },
                                        "property": {
                                            "type": "Identifier",
                                            "name": "LowerF"
                                        }
                                    }
                                },
                                "consequent": {
                                    "type": "ReturnStatement",
                                    "argument": {
                                        "type": "BinaryExpression",
                                        "operator": "+",
                                        "left": {
                                            "type": "BinaryExpression",
                                            "operator": "-",
                                            "left": {
                                                "type": "Identifier",
                                                "name": "code"
                                            },
                                            "right": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                    "type": "Identifier",
                                                    "name": "Chars"
                                                },
                                                "property": {
                                                    "type": "Identifier",
                                                    "name": "LowerA"
                                                }
                                            }
                                        },
                                        "right": {
                                            "type": "Literal",
                                            "value": 10,
                                            "raw": "10"
                                        }
                                    }
                                },
                                "alternate": null
                            },
                            {
                                "type": "ReturnStatement",
                                "argument": {
                                    "type": "UnaryExpression",
                                    "operator": "-",
                                    "argument": {
                                        "type": "Literal",
                                        "value": 1,
                                        "raw": "1"
                                    },
                                    "prefix": true
                                }
                            }
                        ]
                    },
                    "generator": false,
                    "expression": false,
                    "async": false
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse ""', () => {
            expect(parseScript(`function consumeDirectiveSemicolon(parser, context) {
                    const result = seek(parser, context);
                
                    if (!hasNext(parser)) return false;
                    switch (nextChar(parser)) {
                        case Chars.Semicolon:
                            advanceOne(parser);
                            return true;
                
                        case Chars.SingleQuote: case Chars.DoubleQuote:
                            return result === Seek.NewLine;
                
                        default:
                            return false;
                    }
                }`, {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "FunctionDeclaration",
                    "id": {
                        "type": "Identifier",
                        "name": "consumeDirectiveSemicolon"
                    },
                    "params": [{
                            "type": "Identifier",
                            "name": "parser"
                        },
                        {
                            "type": "Identifier",
                            "name": "context"
                        }
                    ],
                    "body": {
                        "type": "BlockStatement",
                        "body": [{
                                "type": "VariableDeclaration",
                                "declarations": [{
                                    "type": "VariableDeclarator",
                                    "id": {
                                        "type": "Identifier",
                                        "name": "result"
                                    },
                                    "init": {
                                        "type": "CallExpression",
                                        "callee": {
                                            "type": "Identifier",
                                            "name": "seek"
                                        },
                                        "arguments": [{
                                                "type": "Identifier",
                                                "name": "parser"
                                            },
                                            {
                                                "type": "Identifier",
                                                "name": "context"
                                            }
                                        ]
                                    }
                                }],
                                "kind": "const"
                            },
                            {
                                "type": "IfStatement",
                                "test": {
                                    "type": "UnaryExpression",
                                    "operator": "!",
                                    "argument": {
                                        "type": "CallExpression",
                                        "callee": {
                                            "type": "Identifier",
                                            "name": "hasNext"
                                        },
                                        "arguments": [{
                                            "type": "Identifier",
                                            "name": "parser"
                                        }]
                                    },
                                    "prefix": true
                                },
                                "consequent": {
                                    "type": "ReturnStatement",
                                    "argument": {
                                        "type": "Literal",
                                        "value": false,
                                        "raw": "false"
                                    }
                                },
                                "alternate": null
                            },
                            {
                                "type": "SwitchStatement",
                                "discriminant": {
                                    "type": "CallExpression",
                                    "callee": {
                                        "type": "Identifier",
                                        "name": "nextChar"
                                    },
                                    "arguments": [{
                                        "type": "Identifier",
                                        "name": "parser"
                                    }]
                                },
                                "cases": [{
                                        "type": "SwitchCase",
                                        "test": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                                "type": "Identifier",
                                                "name": "Chars"
                                            },
                                            "property": {
                                                "type": "Identifier",
                                                "name": "Semicolon"
                                            }
                                        },
                                        "consequent": [{
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                        "type": "Identifier",
                                                        "name": "advanceOne"
                                                    },
                                                    "arguments": [{
                                                        "type": "Identifier",
                                                        "name": "parser"
                                                    }]
                                                }
                                            },
                                            {
                                                "type": "ReturnStatement",
                                                "argument": {
                                                    "type": "Literal",
                                                    "value": true,
                                                    "raw": "true"
                                                }
                                            }
                                        ]
                                    },
                                    {
                                        "type": "SwitchCase",
                                        "test": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                                "type": "Identifier",
                                                "name": "Chars"
                                            },
                                            "property": {
                                                "type": "Identifier",
                                                "name": "SingleQuote"
                                            }
                                        },
                                        "consequent": []
                                    },
                                    {
                                        "type": "SwitchCase",
                                        "test": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                                "type": "Identifier",
                                                "name": "Chars"
                                            },
                                            "property": {
                                                "type": "Identifier",
                                                "name": "DoubleQuote"
                                            }
                                        },
                                        "consequent": [{
                                            "type": "ReturnStatement",
                                            "argument": {
                                                "type": "BinaryExpression",
                                                "operator": "===",
                                                "left": {
                                                    "type": "Identifier",
                                                    "name": "result"
                                                },
                                                "right": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                        "type": "Identifier",
                                                        "name": "Seek"
                                                    },
                                                    "property": {
                                                        "type": "Identifier",
                                                        "name": "NewLine"
                                                    }
                                                }
                                            }
                                        }]
                                    },
                                    {
                                        "type": "SwitchCase",
                                        "test": null,
                                        "consequent": [{
                                            "type": "ReturnStatement",
                                            "argument": {
                                                "type": "Literal",
                                                "value": false,
                                                "raw": "false"
                                            }
                                        }]
                                    }
                                ]
                            }
                        ]
                    },
                    "generator": false,
                    "expression": false,
                    "async": false
                }],
                "sourceType": "script"
            });
        });
    
    
        it('should parse ""', () => {
            expect(parseScript(`if (!hasNext(parser));
                switch (nextChar(parser)) {
                    case Chars.Semicolon: advanceOne(parser); break;
                    case Chars.RightBrace: break;
                    default:
                        if (result === Seek.NewLine) 
                        Errors.report(
                            parser.index, parser.line, parser.column,
                            Errors.unexpectedToken(tokenDesc(scan(parser, context))),
                        );
                }`, {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                        "type": "IfStatement",
                        "test": {
                            "type": "UnaryExpression",
                            "operator": "!",
                            "argument": {
                                "type": "CallExpression",
                                "callee": {
                                    "type": "Identifier",
                                    "name": "hasNext"
                                },
                                "arguments": [{
                                    "type": "Identifier",
                                    "name": "parser"
                                }]
                            },
                            "prefix": true
                        },
                        "consequent": {
                            "type": "EmptyStatement"
                        },
                        "alternate": null
                    },
                    {
                        "type": "SwitchStatement",
                        "discriminant": {
                            "type": "CallExpression",
                            "callee": {
                                "type": "Identifier",
                                "name": "nextChar"
                            },
                            "arguments": [{
                                "type": "Identifier",
                                "name": "parser"
                            }]
                        },
                        "cases": [{
                                "type": "SwitchCase",
                                "test": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                        "type": "Identifier",
                                        "name": "Chars"
                                    },
                                    "property": {
                                        "type": "Identifier",
                                        "name": "Semicolon"
                                    }
                                },
                                "consequent": [{
                                        "type": "ExpressionStatement",
                                        "expression": {
                                            "type": "CallExpression",
                                            "callee": {
                                                "type": "Identifier",
                                                "name": "advanceOne"
                                            },
                                            "arguments": [{
                                                "type": "Identifier",
                                                "name": "parser"
                                            }]
                                        }
                                    },
                                    {
                                        "type": "BreakStatement",
                                        "label": null
                                    }
                                ]
                            },
                            {
                                "type": "SwitchCase",
                                "test": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                        "type": "Identifier",
                                        "name": "Chars"
                                    },
                                    "property": {
                                        "type": "Identifier",
                                        "name": "RightBrace"
                                    }
                                },
                                "consequent": [{
                                    "type": "BreakStatement",
                                    "label": null
                                }]
                            },
                            {
                                "type": "SwitchCase",
                                "test": null,
                                "consequent": [{
                                    "type": "IfStatement",
                                    "test": {
                                        "type": "BinaryExpression",
                                        "operator": "===",
                                        "left": {
                                            "type": "Identifier",
                                            "name": "result"
                                        },
                                        "right": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                                "type": "Identifier",
                                                "name": "Seek"
                                            },
                                            "property": {
                                                "type": "Identifier",
                                                "name": "NewLine"
                                            }
                                        }
                                    },
                                    "consequent": {
                                        "type": "ExpressionStatement",
                                        "expression": {
                                            "type": "CallExpression",
                                            "callee": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                    "type": "Identifier",
                                                    "name": "Errors"
                                                },
                                                "property": {
                                                    "type": "Identifier",
                                                    "name": "report"
                                                }
                                            },
                                            "arguments": [{
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                        "type": "Identifier",
                                                        "name": "parser"
                                                    },
                                                    "property": {
                                                        "type": "Identifier",
                                                        "name": "index"
                                                    }
                                                },
                                                {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                        "type": "Identifier",
                                                        "name": "parser"
                                                    },
                                                    "property": {
                                                        "type": "Identifier",
                                                        "name": "line"
                                                    }
                                                },
                                                {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                        "type": "Identifier",
                                                        "name": "parser"
                                                    },
                                                    "property": {
                                                        "type": "Identifier",
                                                        "name": "column"
                                                    }
                                                },
                                                {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                            "type": "Identifier",
                                                            "name": "Errors"
                                                        },
                                                        "property": {
                                                            "type": "Identifier",
                                                            "name": "unexpectedToken"
                                                        }
                                                    },
                                                    "arguments": [{
                                                        "type": "CallExpression",
                                                        "callee": {
                                                            "type": "Identifier",
                                                            "name": "tokenDesc"
                                                        },
                                                        "arguments": [{
                                                            "type": "CallExpression",
                                                            "callee": {
                                                                "type": "Identifier",
                                                                "name": "scan"
                                                            },
                                                            "arguments": [{
                                                                    "type": "Identifier",
                                                                    "name": "parser"
                                                                },
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "context"
                                                                }
                                                            ]
                                                        }]
                                                    }]
                                                }
                                            ]
                                        }
                                    },
                                    "alternate": null
                                }]
                            }
                        ]
                    }
                ],
                "sourceType": "script"
            });
        });
        it('should parse "Backspace      = 0x08,"', () => {
            expect(parseScript(`Backspace      = 0x08`, {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                            "type": "Identifier",
                            "name": "Backspace"
                        },
                        "right": {
                            "type": "Literal",
                            "value": 8,
                            "raw": "0x08"
                        }
                    }
                }],
                "sourceType": "script"
            });
        });
        it('should parse ""', () => {
            expect(parseScript(`var a, b, c, d;
                a = !(b(), c(), d());`, {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                        "type": "VariableDeclaration",
                        "declarations": [{
                                "type": "VariableDeclarator",
                                "id": {
                                    "type": "Identifier",
                                    "name": "a"
                                },
                                "init": null
                            },
                            {
                                "type": "VariableDeclarator",
                                "id": {
                                    "type": "Identifier",
                                    "name": "b"
                                },
                                "init": null
                            },
                            {
                                "type": "VariableDeclarator",
                                "id": {
                                    "type": "Identifier",
                                    "name": "c"
                                },
                                "init": null
                            },
                            {
                                "type": "VariableDeclarator",
                                "id": {
                                    "type": "Identifier",
                                    "name": "d"
                                },
                                "init": null
                            }
                        ],
                        "kind": "var"
                    },
                    {
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "AssignmentExpression",
                            "operator": "=",
                            "left": {
                                "type": "Identifier",
                                "name": "a"
                            },
                            "right": {
                                "type": "UnaryExpression",
                                "operator": "!",
                                "argument": {
                                    "type": "SequenceExpression",
                                    "expressions": [{
                                            "type": "CallExpression",
                                            "callee": {
                                                "type": "Identifier",
                                                "name": "b"
                                            },
                                            "arguments": []
                                        },
                                        {
                                            "type": "CallExpression",
                                            "callee": {
                                                "type": "Identifier",
                                                "name": "c"
                                            },
                                            "arguments": []
                                        },
                                        {
                                            "type": "CallExpression",
                                            "callee": {
                                                "type": "Identifier",
                                                "name": "d"
                                            },
                                            "arguments": []
                                        }
                                    ]
                                },
                                "prefix": true
                            }
                        }
                    }
                ],
                "sourceType": "script"
            });
        });
    
        it('should parse ""', () => {
            expect(parseScript(`var a, b, c, d;
                a = (!(((b()), (c())), (d())));`, {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                        "type": "VariableDeclaration",
                        "declarations": [{
                                "type": "VariableDeclarator",
                                "id": {
                                    "type": "Identifier",
                                    "name": "a"
                                },
                                "init": null
                            },
                            {
                                "type": "VariableDeclarator",
                                "id": {
                                    "type": "Identifier",
                                    "name": "b"
                                },
                                "init": null
                            },
                            {
                                "type": "VariableDeclarator",
                                "id": {
                                    "type": "Identifier",
                                    "name": "c"
                                },
                                "init": null
                            },
                            {
                                "type": "VariableDeclarator",
                                "id": {
                                    "type": "Identifier",
                                    "name": "d"
                                },
                                "init": null
                            }
                        ],
                        "kind": "var"
                    },
                    {
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "AssignmentExpression",
                            "operator": "=",
                            "left": {
                                "type": "Identifier",
                                "name": "a"
                            },
                            "right": {
                                "type": "UnaryExpression",
                                "operator": "!",
                                "argument": {
                                    "type": "SequenceExpression",
                                    "expressions": [{
                                            "type": "SequenceExpression",
                                            "expressions": [{
                                                    "type": "CallExpression",
                                                    "callee": {
                                                        "type": "Identifier",
                                                        "name": "b"
                                                    },
                                                    "arguments": []
                                                },
                                                {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                        "type": "Identifier",
                                                        "name": "c"
                                                    },
                                                    "arguments": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "CallExpression",
                                            "callee": {
                                                "type": "Identifier",
                                                "name": "d"
                                            },
                                            "arguments": []
                                        }
                                    ]
                                },
                                "prefix": true
                            }
                        }
                    }
                ],
                "sourceType": "script"
            });
        });
    
        it('should parse "({set a ([{b = 1}]) {}});"', () => {
            expect(parseScript(`({set a ([{b = 1}]) {}});`, {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "ObjectExpression",
                        "properties": [{
                            "type": "Property",
                            "key": {
                                "type": "Identifier",
                                "name": "a"
                            },
                            "computed": false,
                            "value": {
                                "type": "FunctionExpression",
                                "id": null,
                                "params": [{
                                    "type": "ArrayPattern",
                                    "elements": [{
                                        "type": "ObjectPattern",
                                        "properties": [{
                                            "type": "Property",
                                            "key": {
                                                "type": "Identifier",
                                                "name": "b"
                                            },
                                            "computed": false,
                                            "value": {
                                                "type": "AssignmentPattern",
                                                "left": {
                                                    "type": "Identifier",
                                                    "name": "b"
                                                },
                                                "right": {
                                                    "type": "Literal",
                                                    "value": 1,
                                                    "raw": "1"
                                                }
                                            },
                                            "kind": "init",
                                            "method": false,
                                            "shorthand": true
                                        }]
                                    }]
                                }],
                                "body": {
                                    "type": "BlockStatement",
                                    "body": []
                                },
                                "generator": false,
                                "expression": false,
                                "async": false
                            },
                            "kind": "set",
                            "method": false,
                            "shorthand": false
                        }]
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse ""', () => {
            expect(parseScript(`var a = (((((((((("b") + ("c")) + (d())) + ("e")) + ("b")) + (f())) + ("d")) + ("f")) + ("g")) + (h()));
                var i = ((((("b") + (1)) + (d())) + (2)) + ("j"));
                var k = ((((3) + (d())) + (4)) + ("j"));
                var l = (((((5) + (d())) + (6)) + (7)) + ("j"));
                var m = ((((((8) + (d())) + (9)) + ("n")) + (10)) + ("j"));`, {
                raw: true, 
                ranges: true
            })).to.eql({
                "type": "Program",
                "start": 0,
                "end": 369,
                "body": [
                  {
                    "type": "VariableDeclaration",
                    "start": 0,
                    "end": 104,
                    "declarations": [
                      {
                        "type": "VariableDeclarator",
                        "start": 4,
                        "end": 103,
                        "id": {
                          "type": "Identifier",
                          "start": 4,
                          "end": 5,
                          "name": "a"
                        },
                        "init": {
                          "type": "BinaryExpression",
                          "start": 9,
                          "end": 102,
                          "left": {
                            "type": "BinaryExpression",
                            "start": 10,
                            "end": 93,
                            "left": {
                              "type": "BinaryExpression",
                              "start": 11,
                              "end": 84,
                              "left": {
                                "type": "BinaryExpression",
                                "start": 12,
                                "end": 75,
                                "left": {
                                  "type": "BinaryExpression",
                                  "start": 13,
                                  "end": 66,
                                  "left": {
                                    "type": "BinaryExpression",
                                    "start": 14,
                                    "end": 57,
                                    "left": {
                                      "type": "BinaryExpression",
                                      "start": 15,
                                      "end": 48,
                                      "left": {
                                        "type": "BinaryExpression",
                                        "start": 16,
                                        "end": 39,
                                        "left": {
                                          "type": "BinaryExpression",
                                          "start": 17,
                                          "end": 30,
                                          "left": {
                                            "type": "Literal",
                                            "start": 18,
                                            "end": 21,
                                            "value": "b",
                                            "raw": "\"b\""
                                          },
                                          "operator": "+",
                                          "right": {
                                            "type": "Literal",
                                            "start": 26,
                                            "end": 29,
                                            "value": "c",
                                            "raw": "\"c\""
                                          }
                                        },
                                        "operator": "+",
                                        "right": {
                                          "type": "CallExpression",
                                          "start": 35,
                                          "end": 38,
                                          "callee": {
                                            "type": "Identifier",
                                            "start": 35,
                                            "end": 36,
                                            "name": "d"
                                          },
                                          "arguments": []
                                        }
                                      },
                                      "operator": "+",
                                      "right": {
                                        "type": "Literal",
                                        "start": 44,
                                        "end": 47,
                                        "value": "e",
                                        "raw": "\"e\""
                                      }
                                    },
                                    "operator": "+",
                                    "right": {
                                      "type": "Literal",
                                      "start": 53,
                                      "end": 56,
                                      "value": "b",
                                      "raw": "\"b\""
                                    }
                                  },
                                  "operator": "+",
                                  "right": {
                                    "type": "CallExpression",
                                    "start": 62,
                                    "end": 65,
                                    "callee": {
                                      "type": "Identifier",
                                      "start": 62,
                                      "end": 63,
                                      "name": "f"
                                    },
                                    "arguments": []
                                  }
                                },
                                "operator": "+",
                                "right": {
                                  "type": "Literal",
                                  "start": 71,
                                  "end": 74,
                                  "value": "d",
                                  "raw": "\"d\""
                                }
                              },
                              "operator": "+",
                              "right": {
                                "type": "Literal",
                                "start": 80,
                                "end": 83,
                                "value": "f",
                                "raw": "\"f\""
                              }
                            },
                            "operator": "+",
                            "right": {
                              "type": "Literal",
                              "start": 89,
                              "end": 92,
                              "value": "g",
                              "raw": "\"g\""
                            }
                          },
                          "operator": "+",
                          "right": {
                            "type": "CallExpression",
                            "start": 98,
                            "end": 101,
                            "callee": {
                              "type": "Identifier",
                              "start": 98,
                              "end": 99,
                              "name": "h"
                            },
                            "arguments": []
                          }
                        }
                      }
                    ],
                    "kind": "var"
                  },
                  {
                    "type": "VariableDeclaration",
                    "start": 121,
                    "end": 171,
                    "declarations": [
                      {
                        "type": "VariableDeclarator",
                        "start": 125,
                        "end": 170,
                        "id": {
                          "type": "Identifier",
                          "start": 125,
                          "end": 126,
                          "name": "i"
                        },
                        "init": {
                          "type": "BinaryExpression",
                          "start": 130,
                          "end": 169,
                          "left": {
                            "type": "BinaryExpression",
                            "start": 131,
                            "end": 160,
                            "left": {
                              "type": "BinaryExpression",
                              "start": 132,
                              "end": 153,
                              "left": {
                                "type": "BinaryExpression",
                                "start": 133,
                                "end": 144,
                                "left": {
                                  "type": "Literal",
                                  "start": 134,
                                  "end": 137,
                                  "value": "b",
                                  "raw": "\"b\""
                                },
                                "operator": "+",
                                "right": {
                                  "type": "Literal",
                                  "start": 142,
                                  "end": 143,
                                  "value": 1,
                                  "raw": "1"
                                }
                              },
                              "operator": "+",
                              "right": {
                                "type": "CallExpression",
                                "start": 149,
                                "end": 152,
                                "callee": {
                                  "type": "Identifier",
                                  "start": 149,
                                  "end": 150,
                                  "name": "d"
                                },
                                "arguments": []
                              }
                            },
                            "operator": "+",
                            "right": {
                              "type": "Literal",
                              "start": 158,
                              "end": 159,
                              "value": 2,
                              "raw": "2"
                            }
                          },
                          "operator": "+",
                          "right": {
                            "type": "Literal",
                            "start": 165,
                            "end": 168,
                            "value": "j",
                            "raw": "\"j\""
                          }
                        }
                      }
                    ],
                    "kind": "var"
                  },
                  {
                    "type": "VariableDeclaration",
                    "start": 188,
                    "end": 228,
                    "declarations": [
                      {
                        "type": "VariableDeclarator",
                        "start": 192,
                        "end": 227,
                        "id": {
                          "type": "Identifier",
                          "start": 192,
                          "end": 193,
                          "name": "k"
                        },
                        "init": {
                          "type": "BinaryExpression",
                          "start": 197,
                          "end": 226,
                          "left": {
                            "type": "BinaryExpression",
                            "start": 198,
                            "end": 217,
                            "left": {
                              "type": "BinaryExpression",
                              "start": 199,
                              "end": 210,
                              "left": {
                                "type": "Literal",
                                "start": 200,
                                "end": 201,
                                "value": 3,
                                "raw": "3"
                              },
                              "operator": "+",
                              "right": {
                                "type": "CallExpression",
                                "start": 206,
                                "end": 209,
                                "callee": {
                                  "type": "Identifier",
                                  "start": 206,
                                  "end": 207,
                                  "name": "d"
                                },
                                "arguments": []
                              }
                            },
                            "operator": "+",
                            "right": {
                              "type": "Literal",
                              "start": 215,
                              "end": 216,
                              "value": 4,
                              "raw": "4"
                            }
                          },
                          "operator": "+",
                          "right": {
                            "type": "Literal",
                            "start": 222,
                            "end": 225,
                            "value": "j",
                            "raw": "\"j\""
                          }
                        }
                      }
                    ],
                    "kind": "var"
                  },
                  {
                    "type": "VariableDeclaration",
                    "start": 245,
                    "end": 293,
                    "declarations": [
                      {
                        "type": "VariableDeclarator",
                        "start": 249,
                        "end": 292,
                        "id": {
                          "type": "Identifier",
                          "start": 249,
                          "end": 250,
                          "name": "l"
                        },
                        "init": {
                          "type": "BinaryExpression",
                          "start": 254,
                          "end": 291,
                          "left": {
                            "type": "BinaryExpression",
                            "start": 255,
                            "end": 282,
                            "left": {
                              "type": "BinaryExpression",
                              "start": 256,
                              "end": 275,
                              "left": {
                                "type": "BinaryExpression",
                                "start": 257,
                                "end": 268,
                                "left": {
                                  "type": "Literal",
                                  "start": 258,
                                  "end": 259,
                                  "value": 5,
                                  "raw": "5"
                                },
                                "operator": "+",
                                "right": {
                                  "type": "CallExpression",
                                  "start": 264,
                                  "end": 267,
                                  "callee": {
                                    "type": "Identifier",
                                    "start": 264,
                                    "end": 265,
                                    "name": "d"
                                  },
                                  "arguments": []
                                }
                              },
                              "operator": "+",
                              "right": {
                                "type": "Literal",
                                "start": 273,
                                "end": 274,
                                "value": 6,
                                "raw": "6"
                              }
                            },
                            "operator": "+",
                            "right": {
                              "type": "Literal",
                              "start": 280,
                              "end": 281,
                              "value": 7,
                              "raw": "7"
                            }
                          },
                          "operator": "+",
                          "right": {
                            "type": "Literal",
                            "start": 287,
                            "end": 290,
                            "value": "j",
                            "raw": "\"j\""
                          }
                        }
                      }
                    ],
                    "kind": "var"
                  },
                  {
                    "type": "VariableDeclaration",
                    "start": 310,
                    "end": 369,
                    "declarations": [
                      {
                        "type": "VariableDeclarator",
                        "start": 314,
                        "end": 368,
                        "id": {
                          "type": "Identifier",
                          "start": 314,
                          "end": 315,
                          "name": "m"
                        },
                        "init": {
                          "type": "BinaryExpression",
                          "start": 319,
                          "end": 367,
                          "left": {
                            "type": "BinaryExpression",
                            "start": 320,
                            "end": 358,
                            "left": {
                              "type": "BinaryExpression",
                              "start": 321,
                              "end": 350,
                              "left": {
                                "type": "BinaryExpression",
                                "start": 322,
                                "end": 341,
                                "left": {
                                  "type": "BinaryExpression",
                                  "start": 323,
                                  "end": 334,
                                  "left": {
                                    "type": "Literal",
                                    "start": 324,
                                    "end": 325,
                                    "value": 8,
                                    "raw": "8"
                                  },
                                  "operator": "+",
                                  "right": {
                                    "type": "CallExpression",
                                    "start": 330,
                                    "end": 333,
                                    "callee": {
                                      "type": "Identifier",
                                      "start": 330,
                                      "end": 331,
                                      "name": "d"
                                    },
                                    "arguments": []
                                  }
                                },
                                "operator": "+",
                                "right": {
                                  "type": "Literal",
                                  "start": 339,
                                  "end": 340,
                                  "value": 9,
                                  "raw": "9"
                                }
                              },
                              "operator": "+",
                              "right": {
                                "type": "Literal",
                                "start": 346,
                                "end": 349,
                                "value": "n",
                                "raw": "\"n\""
                              }
                            },
                            "operator": "+",
                            "right": {
                              "type": "Literal",
                              "start": 355,
                              "end": 357,
                              "value": 10,
                              "raw": "10"
                            }
                          },
                          "operator": "+",
                          "right": {
                            "type": "Literal",
                            "start": 363,
                            "end": 366,
                            "value": "j",
                            "raw": "\"j\""
                          }
                        }
                      }
                    ],
                    "kind": "var"
                  }
                ],
                "sourceType": "script"
              });
        });
    
        it('should parse ""', () => {
            expect(parseScript(`function* a() {
                    yield a;
                  }`, {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "FunctionDeclaration",
                    "id": {
                        "type": "Identifier",
                        "name": "a"
                    },
                    "params": [],
                    "body": {
                        "type": "BlockStatement",
                        "body": [{
                            "type": "ExpressionStatement",
                            "expression": {
                                "type": "YieldExpression",
                                "argument": {
                                    "type": "Identifier",
                                    "name": "a"
                                },
                                "delegate": false
                            }
                        }]
                    },
                    "generator": true,
                    "expression": false,
                    "async": false
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse ""', () => {
            expect(parseScript(`var a;
                if (b) {
                  a = ((1) + (2));
                } else {
                  a = (3);
                }`, {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                        "type": "VariableDeclaration",
                        "declarations": [{
                            "type": "VariableDeclarator",
                            "id": {
                                "type": "Identifier",
                                "name": "a"
                            },
                            "init": null
                        }],
                        "kind": "var"
                    },
                    {
                        "type": "IfStatement",
                        "test": {
                            "type": "Identifier",
                            "name": "b"
                        },
                        "consequent": {
                            "type": "BlockStatement",
                            "body": [{
                                "type": "ExpressionStatement",
                                "expression": {
                                    "type": "AssignmentExpression",
                                    "operator": "=",
                                    "left": {
                                        "type": "Identifier",
                                        "name": "a"
                                    },
                                    "right": {
                                        "type": "BinaryExpression",
                                        "operator": "+",
                                        "left": {
                                            "type": "Literal",
                                            "value": 1,
                                            "raw": "1"
                                        },
                                        "right": {
                                            "type": "Literal",
                                            "value": 2,
                                            "raw": "2"
                                        }
                                    }
                                }
                            }]
                        },
                        "alternate": {
                            "type": "BlockStatement",
                            "body": [{
                                "type": "ExpressionStatement",
                                "expression": {
                                    "type": "AssignmentExpression",
                                    "operator": "=",
                                    "left": {
                                        "type": "Identifier",
                                        "name": "a"
                                    },
                                    "right": {
                                        "type": "Literal",
                                        "value": 3,
                                        "raw": "3"
                                    }
                                }
                            }]
                        }
                    }
                ],
                "sourceType": "script"
            });
        });
    
        it('should parse ""', () => {
            expect(parseScript(`((function () {
                    (a ? (1) : (2)) != (null);
                  })());`, {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "CallExpression",
                        "callee": {
                            "type": "FunctionExpression",
                            "id": null,
                            "params": [],
                            "body": {
                                "type": "BlockStatement",
                                "body": [{
                                    "type": "ExpressionStatement",
                                    "expression": {
                                        "type": "BinaryExpression",
                                        "operator": "!=",
                                        "left": {
                                            "type": "ConditionalExpression",
                                            "test": {
                                                "type": "Identifier",
                                                "name": "a"
                                            },
                                            "consequent": {
                                                "type": "Literal",
                                                "value": 1,
                                                "raw": "1"
                                            },
                                            "alternate": {
                                                "type": "Literal",
                                                "value": 2,
                                                "raw": "2"
                                            }
                                        },
                                        "right": {
                                            "type": "Literal",
                                            "value": null,
                                            "raw": "null"
                                        }
                                    }
                                }]
                            },
                            "generator": false,
                            "expression": false,
                            "async": false
                        },
                        "arguments": []
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse ""', () => {
            expect(parseScript(`while (a) {
                    try {} catch (b) {}
                    ((function () {
                      c("d");
                    })());
                  }`, {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "WhileStatement",
                    "test": {
                        "type": "Identifier",
                        "name": "a"
                    },
                    "body": {
                        "type": "BlockStatement",
                        "body": [{
                                "type": "TryStatement",
                                "block": {
                                    "type": "BlockStatement",
                                    "body": []
                                },
                                "handler": {
                                    "type": "CatchClause",
                                    "param": {
                                        "type": "Identifier",
                                        "name": "b"
                                    },
                                    "body": {
                                        "type": "BlockStatement",
                                        "body": []
                                    }
                                },
                                "finalizer": null
                            },
                            {
                                "type": "ExpressionStatement",
                                "expression": {
                                    "type": "CallExpression",
                                    "callee": {
                                        "type": "FunctionExpression",
                                        "id": null,
                                        "params": [],
                                        "body": {
                                            "type": "BlockStatement",
                                            "body": [{
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                        "type": "Identifier",
                                                        "name": "c"
                                                    },
                                                    "arguments": [{
                                                        "type": "Literal",
                                                        "value": "d",
                                                        "raw": "\"d\""
                                                    }]
                                                }
                                            }]
                                        },
                                        "generator": false,
                                        "expression": false,
                                        "async": false
                                    },
                                    "arguments": []
                                }
                            }
                        ]
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse ""', () => {
            expect(parseScript(`d: {
                    b: {
                      if (a) break b;
                      if (a) break b;
                      if (a) break b;
                    }
                    if (c) break d;
                  }`, {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "LabeledStatement",
                    "label": {
                        "type": "Identifier",
                        "name": "d"
                    },
                    "body": {
                        "type": "BlockStatement",
                        "body": [{
                                "type": "LabeledStatement",
                                "label": {
                                    "type": "Identifier",
                                    "name": "b"
                                },
                                "body": {
                                    "type": "BlockStatement",
                                    "body": [{
                                            "type": "IfStatement",
                                            "test": {
                                                "type": "Identifier",
                                                "name": "a"
                                            },
                                            "consequent": {
                                                "type": "BreakStatement",
                                                "label": {
                                                    "type": "Identifier",
                                                    "name": "b"
                                                }
                                            },
                                            "alternate": null
                                        },
                                        {
                                            "type": "IfStatement",
                                            "test": {
                                                "type": "Identifier",
                                                "name": "a"
                                            },
                                            "consequent": {
                                                "type": "BreakStatement",
                                                "label": {
                                                    "type": "Identifier",
                                                    "name": "b"
                                                }
                                            },
                                            "alternate": null
                                        },
                                        {
                                            "type": "IfStatement",
                                            "test": {
                                                "type": "Identifier",
                                                "name": "a"
                                            },
                                            "consequent": {
                                                "type": "BreakStatement",
                                                "label": {
                                                    "type": "Identifier",
                                                    "name": "b"
                                                }
                                            },
                                            "alternate": null
                                        }
                                    ]
                                }
                            },
                            {
                                "type": "IfStatement",
                                "test": {
                                    "type": "Identifier",
                                    "name": "c"
                                },
                                "consequent": {
                                    "type": "BreakStatement",
                                    "label": {
                                        "type": "Identifier",
                                        "name": "d"
                                    }
                                },
                                "alternate": null
                            }
                        ]
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "[, , ] = (1);"', () => {
            expect(parseScript(`[, , ] = (1);`, {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                            "type": "ArrayPattern",
                            "elements": [
                                null,
                                null
                            ]
                        },
                        "right": {
                            "type": "Literal",
                            "value": 1,
                            "raw": "1"
                        }
                    }
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse ""', () => {
            expect(parseScript(`{
                    const a = (1);
                  }`, {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "BlockStatement",
                    "body": [{
                        "type": "VariableDeclaration",
                        "declarations": [{
                            "type": "VariableDeclarator",
                            "id": {
                                "type": "Identifier",
                                "name": "a"
                            },
                            "init": {
                                "type": "Literal",
                                "value": 1,
                                "raw": "1"
                            }
                        }],
                        "kind": "const"
                    }]
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse ""', () => {
            expect(parseScript(`function a() {}
                var b = ("is a valid variable name");
                b = ({b: "is ok"});
                c.b;
                b: d();`, {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                        "type": "FunctionDeclaration",
                        "id": {
                            "type": "Identifier",
                            "name": "a"
                        },
                        "params": [],
                        "body": {
                            "type": "BlockStatement",
                            "body": []
                        },
                        "generator": false,
                        "expression": false,
                        "async": false
                    },
                    {
                        "type": "VariableDeclaration",
                        "declarations": [{
                            "type": "VariableDeclarator",
                            "id": {
                                "type": "Identifier",
                                "name": "b"
                            },
                            "init": {
                                "type": "Literal",
                                "value": "is a valid variable name",
                                "raw": "\"is a valid variable name\""
                            }
                        }],
                        "kind": "var"
                    },
                    {
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "AssignmentExpression",
                            "operator": "=",
                            "left": {
                                "type": "Identifier",
                                "name": "b"
                            },
                            "right": {
                                "type": "ObjectExpression",
                                "properties": [{
                                    "type": "Property",
                                    "key": {
                                        "type": "Identifier",
                                        "name": "b"
                                    },
                                    "computed": false,
                                    "value": {
                                        "type": "Literal",
                                        "value": "is ok",
                                        "raw": "\"is ok\""
                                    },
                                    "kind": "init",
                                    "method": false,
                                    "shorthand": false
                                }]
                            }
                        }
                    },
                    {
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                                "type": "Identifier",
                                "name": "c"
                            },
                            "property": {
                                "type": "Identifier",
                                "name": "b"
                            }
                        }
                    },
                    {
                        "type": "LabeledStatement",
                        "label": {
                            "type": "Identifier",
                            "name": "b"
                        },
                        "body": {
                            "type": "ExpressionStatement",
                            "expression": {
                                "type": "CallExpression",
                                "callee": {
                                    "type": "Identifier",
                                    "name": "d"
                                },
                                "arguments": []
                            }
                        }
                    }
                ],
                "sourceType": "script"
            });
        });
    
        it('should parse ""', () => {
            expect(parseScript(`((function () {
                    var a, b, c = (1), d, e, f = (2);
                    ((a, b), c) + ((d, e), f);
                  })());`, {
                raw: true,
                ranges: true
            })).to.eql({
                "type": "Program",
                "start": 0,
                "end": 141,
                "body": [
                  {
                    "type": "ExpressionStatement",
                    "start": 0,
                    "end": 141,
                    "expression": {
                      "type": "CallExpression",
                      "start": 1,
                      "end": 139,
                      "callee": {
                        "type": "FunctionExpression",
                        "start": 2,
                        "end": 136,
                        "id": null,
                        "generator": false,
                        "expression": false,
                        "async": false,
                        "params": [],
                        "body": {
                          "type": "BlockStatement",
                          "start": 14,
                          "end": 136,
                          "body": [
                            {
                              "type": "VariableDeclaration",
                              "start": 36,
                              "end": 69,
                              "declarations": [
                                {
                                  "type": "VariableDeclarator",
                                  "start": 40,
                                  "end": 41,
                                  "id": {
                                    "type": "Identifier",
                                    "start": 40,
                                    "end": 41,
                                    "name": "a"
                                  },
                                  "init": null
                                },
                                {
                                  "type": "VariableDeclarator",
                                  "start": 43,
                                  "end": 44,
                                  "id": {
                                    "type": "Identifier",
                                    "start": 43,
                                    "end": 44,
                                    "name": "b"
                                  },
                                  "init": null
                                },
                                {
                                  "type": "VariableDeclarator",
                                  "start": 46,
                                  "end": 53,
                                  "id": {
                                    "type": "Identifier",
                                    "start": 46,
                                    "end": 47,
                                    "name": "c"
                                  },
                                  "init": {
                                    "type": "Literal",
                                    "start": 51,
                                    "end": 52,
                                    "value": 1,
                                    "raw": "1"
                                  }
                                },
                                {
                                  "type": "VariableDeclarator",
                                  "start": 55,
                                  "end": 56,
                                  "id": {
                                    "type": "Identifier",
                                    "start": 55,
                                    "end": 56,
                                    "name": "d"
                                  },
                                  "init": null
                                },
                                {
                                  "type": "VariableDeclarator",
                                  "start": 58,
                                  "end": 59,
                                  "id": {
                                    "type": "Identifier",
                                    "start": 58,
                                    "end": 59,
                                    "name": "e"
                                  },
                                  "init": null
                                },
                                {
                                  "type": "VariableDeclarator",
                                  "start": 61,
                                  "end": 68,
                                  "id": {
                                    "type": "Identifier",
                                    "start": 61,
                                    "end": 62,
                                    "name": "f"
                                  },
                                  "init": {
                                    "type": "Literal",
                                    "start": 66,
                                    "end": 67,
                                    "value": 2,
                                    "raw": "2"
                                  }
                                }
                              ],
                              "kind": "var"
                            },
                            {
                              "type": "ExpressionStatement",
                              "start": 90,
                              "end": 116,
                              "expression": {
                                "type": "BinaryExpression",
                                "start": 90,
                                "end": 115,
                                "left": {
                                  "type": "SequenceExpression",
                                  "start": 91,
                                  "end": 100,
                                  "expressions": [
                                    {
                                      "type": "SequenceExpression",
                                      "start": 92,
                                      "end": 96,
                                      "expressions": [
                                        {
                                          "type": "Identifier",
                                          "start": 92,
                                          "end": 93,
                                          "name": "a"
                                        },
                                        {
                                          "type": "Identifier",
                                          "start": 95,
                                          "end": 96,
                                          "name": "b"
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "start": 99,
                                      "end": 100,
                                      "name": "c"
                                    }
                                  ]
                                },
                                "operator": "+",
                                "right": {
                                  "type": "SequenceExpression",
                                  "start": 105,
                                  "end": 114,
                                  "expressions": [
                                    {
                                      "type": "SequenceExpression",
                                      "start": 106,
                                      "end": 110,
                                      "expressions": [
                                        {
                                          "type": "Identifier",
                                          "start": 106,
                                          "end": 107,
                                          "name": "d"
                                        },
                                        {
                                          "type": "Identifier",
                                          "start": 109,
                                          "end": 110,
                                          "name": "e"
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "start": 113,
                                      "end": 114,
                                      "name": "f"
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      },
                      "arguments": []
                    }
                  }
                ],
                "sourceType": "script"
              });
        });
    
        it('should parse ""', () => {
            expect(parseScript(`function* a() {
                    (b.yield)();
                  }`, {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "FunctionDeclaration",
                    "id": {
                        "type": "Identifier",
                        "name": "a"
                    },
                    "params": [],
                    "body": {
                        "type": "BlockStatement",
                        "body": [{
                            "type": "ExpressionStatement",
                            "expression": {
                                "type": "CallExpression",
                                "callee": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                        "type": "Identifier",
                                        "name": "b"
                                    },
                                    "property": {
                                        "type": "Identifier",
                                        "name": "yield"
                                    }
                                },
                                "arguments": []
                            }
                        }]
                    },
                    "generator": true,
                    "expression": false,
                    "async": false
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "if ((!a) || (b())) ;"', () => {
            expect(parseScript(`if ((!a) || (b())) ;`, {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "IfStatement",
                    "test": {
                        "type": "LogicalExpression",
                        "operator": "||",
                        "left": {
                            "type": "UnaryExpression",
                            "operator": "!",
                            "argument": {
                                "type": "Identifier",
                                "name": "a"
                            },
                            "prefix": true
                        },
                        "right": {
                            "type": "CallExpression",
                            "callee": {
                                "type": "Identifier",
                                "name": "b"
                            },
                            "arguments": []
                        }
                    },
                    "consequent": {
                        "type": "EmptyStatement"
                    },
                    "alternate": null
                }],
                "sourceType": "script"
            });
        });
    
        it('should parse "a = ({b: 1});"', () => {
            expect(parseScript(`a = ({b: 1});`, {
                raw: true
            })).to.eql({
                "type": "Program",
                "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                            "type": "Identifier",
                            "name": "a"
                        },
                        "right": {
                            "type": "ObjectExpression",
                            "properties": [{
                                "type": "Property",
                                "key": {
                                    "type": "Identifier",
                                    "name": "b"
                                },
                                "computed": false,
                                "value": {
                                    "type": "Literal",
                                    "value": 1,
                                    "raw": "1"
                                },
                                "kind": "init",
                                "method": false,
                                "shorthand": false
                            }]
                        }
                    }
                }],
                "sourceType": "script"
            });
        });
    
    
        it('should parse array rest spread with object', () => {
            expect(parseScript('"use strict"; let foo = function foo() {}', {
                ranges: true,
                raw: true
            })).to.eql({
                "type": "Program",
                "start": 0,
                "end": 41,
                "body": [
                  {
                    "type": "ExpressionStatement",
                    "start": 0,
                    "end": 13,
                    "expression": {
                      "type": "Literal",
                      "start": 0,
                      "end": 12,
                      "value": "use strict",
                      "raw": "\"use strict\""
                    }
                  },
                  {
                    "type": "VariableDeclaration",
                    "start": 14,
                    "end": 41,
                    "declarations": [
                      {
                        "type": "VariableDeclarator",
                        "start": 18,
                        "end": 41,
                        "id": {
                          "type": "Identifier",
                          "start": 18,
                          "end": 21,
                          "name": "foo"
                        },
                        "init": {
                          "type": "FunctionExpression",
                          "start": 24,
                          "end": 41,
                          "id": {
                            "type": "Identifier",
                            "start": 33,
                            "end": 36,
                            "name": "foo"
                          },
                          "generator": false,
                          "expression": false,
                          "async": false,
                          "params": [],
                          "body": {
                            "type": "BlockStatement",
                            "start": 39,
                            "end": 41,
                            "body": []
                          }
                        }
                      }
                    ],
                    "kind": "let"
                  }
                ],
                "sourceType": "script"
              });
        });

        it('should parse assignment wrapped in parenthesis - in keyword', () => {
            expect(parseScript(`a = b(c in d)`, {
                ranges: true,
                raw: true
            })).to.eql({
                "type": "Program",
                "start": 0,
                "end": 13,
                "body": [
                  {
                    "type": "ExpressionStatement",
                    "start": 0,
                    "end": 13,
                    "expression": {
                      "type": "AssignmentExpression",
                      "start": 0,
                      "end": 13,
                      "operator": "=",
                      "left": {
                        "type": "Identifier",
                        "start": 0,
                        "end": 1,
                        "name": "a"
                      },
                      "right": {
                        "type": "CallExpression",
                        "start": 4,
                        "end": 13,
                        "callee": {
                          "type": "Identifier",
                          "start": 4,
                          "end": 5,
                          "name": "b"
                        },
                        "arguments": [
                          {
                            "type": "BinaryExpression",
                            "start": 6,
                            "end": 12,
                            "left": {
                              "type": "Identifier",
                              "start": 6,
                              "end": 7,
                              "name": "c"
                            },
                            "operator": "in",
                            "right": {
                              "type": "Identifier",
                              "start": 11,
                              "end": 12,
                              "name": "d"
                            }
                          }
                        ]
                      }
                    }
                  }
                ],
                "sourceType": "script"
              });
        });

        it('should parse "a: for (;;) break a"', () => {
        expect(parseScript('a: for (;;) break a', {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 19,
          "body": [
            {
              "type": "LabeledStatement",
              "start": 0,
              "end": 19,
              "body": {
                "type": "ForStatement",
                "start": 3,
                "end": 19,
                "init": null,
                "test": null,
                "update": null,
                "body": {
                  "type": "BreakStatement",
                  "start": 12,
                  "end": 19,
                  "label": {
                    "type": "Identifier",
                    "start": 18,
                    "end": 19,
                    "name": "a"
                  }
                }
              },
              "label": {
                "type": "Identifier",
                "start": 0,
                "end": 1,
                "name": "a"
              }
            }
          ],
          "sourceType": "script"
        });
      });
      
      it('should parse "({a: b = c = 1} = 2)"', () => {
        expect(parseScript('({a: b = c = 1} = 2)', {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 20,
          "body": [
            {
              "type": "ExpressionStatement",
              "start": 0,
              "end": 20,
              "expression": {
                "type": "AssignmentExpression",
                "start": 1,
                "end": 19,
                "operator": "=",
                "left": {
                  "type": "ObjectPattern",
                  "start": 1,
                  "end": 15,
                  "properties": [
                    {
                      "type": "Property",
                      "start": 2,
                      "end": 14,
                      "method": false,
                      "shorthand": false,
                      "computed": false,
                      "key": {
                        "type": "Identifier",
                        "start": 2,
                        "end": 3,
                        "name": "a"
                      },
                      "value": {
                        "type": "AssignmentPattern",
                        "start": 5,
                        "end": 14,
                        "left": {
                          "type": "Identifier",
                          "start": 5,
                          "end": 6,
                          "name": "b"
                        },
                        "right": {
                          "type": "AssignmentExpression",
                          "start": 9,
                          "end": 14,
                          "operator": "=",
                          "left": {
                            "type": "Identifier",
                            "start": 9,
                            "end": 10,
                            "name": "c"
                          },
                          "right": {
                            "type": "Literal",
                            "start": 13,
                            "end": 14,
                            "value": 1,
                            "raw": "1"
                          }
                        }
                      },
                      "kind": "init"
                    }
                  ]
                },
                "right": {
                  "type": "Literal",
                  "start": 18,
                  "end": 19,
                  "value": 2,
                  "raw": "2"
                }
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "export const a = 1;"', () => {
        expect(parseModule('export const a = 1;', {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 19,
          "body": [
            {
              "type": "ExportNamedDeclaration",
              "start": 0,
              "end": 19,
              "declaration": {
                "type": "VariableDeclaration",
                "start": 7,
                "end": 19,
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "start": 13,
                    "end": 18,
                    "id": {
                      "type": "Identifier",
                      "start": 13,
                      "end": 14,
                      "name": "a"
                    },
                    "init": {
                      "type": "Literal",
                      "start": 17,
                      "end": 18,
                      "value": 1,
                      "raw": "1"
                    }
                  }
                ],
                "kind": "const"
              },
              "specifiers": [],
              "source": null
            }
          ],
          "sourceType": "module"
        });
      });

      it('should parse "[...a[1]] = 2;"', () => {
        expect(parseScript('[...a[1]] = 2;', {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 14,
          "body": [
            {
              "type": "ExpressionStatement",
              "start": 0,
              "end": 14,
              "expression": {
                "type": "AssignmentExpression",
                "start": 0,
                "end": 13,
                "operator": "=",
                "left": {
                  "type": "ArrayPattern",
                  "start": 0,
                  "end": 9,
                  "elements": [
                    {
                      "type": "RestElement",
                      "start": 1,
                      "end": 8,
                      "argument": {
                        "type": "MemberExpression",
                        "start": 4,
                        "end": 8,
                        "object": {
                          "type": "Identifier",
                          "start": 4,
                          "end": 5,
                          "name": "a"
                        },
                        "property": {
                          "type": "Literal",
                          "start": 6,
                          "end": 7,
                          "value": 1,
                          "raw": "1"
                        },
                        "computed": true
                      }
                    }
                  ]
                },
                "right": {
                  "type": "Literal",
                  "start": 12,
                  "end": 13,
                  "value": 2,
                  "raw": "2"
                }
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "function eval() { function a() { "use strict" } }"', () => {
        expect(parseScript('function eval() { function a() { "use strict" } }', {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 49,
          "body": [
            {
              "type": "FunctionDeclaration",
              "start": 0,
              "end": 49,
              "id": {
                "type": "Identifier",
                "start": 9,
                "end": 13,
                "name": "eval"
              },
              "generator": false,
              "expression": false,
              "async": false,
              "params": [],
              "body": {
                "type": "BlockStatement",
                "start": 16,
                "end": 49,
                "body": [
                  {
                    "type": "FunctionDeclaration",
                    "start": 18,
                    "end": 47,
                    "id": {
                      "type": "Identifier",
                      "start": 27,
                      "end": 28,
                      "name": "a"
                    },
                    "generator": false,
                    "expression": false,
                    "async": false,
                    "params": [],
                    "body": {
                      "type": "BlockStatement",
                      "start": 31,
                      "end": 47,
                      "body": [
                        {
                          "type": "ExpressionStatement",
                          "start": 33,
                          "end": 45,
                          "expression": {
                            "type": "Literal",
                            "start": 33,
                            "end": 45,
                            "value": "use strict",
                            "raw": "\"use strict\""
                          }
                        }
                      ]
                    }
                  }
                ]
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "class a {b(){};c(){};}"', () => {
        expect(parseScript('class a {b(){};c(){};}', {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 22,
          "body": [
            {
              "type": "ClassDeclaration",
              "start": 0,
              "end": 22,
              "id": {
                "type": "Identifier",
                "start": 6,
                "end": 7,
                "name": "a"
              },
              "superClass": null,
              "body": {
                "type": "ClassBody",
                "start": 8,
                "end": 22,
                "body": [
                  {
                    "type": "MethodDefinition",
                    "start": 9,
                    "end": 14,
                    "computed": false,
                    "key": {
                      "type": "Identifier",
                      "start": 9,
                      "end": 10,
                      "name": "b"
                    },
                    "static": false,
                    "kind": "method",
                    "value": {
                      "type": "FunctionExpression",
                      "start": 10,
                      "end": 14,
                      "id": null,
                      "generator": false,
                      "expression": false,
                      "async": false,
                      "params": [],
                      "body": {
                        "type": "BlockStatement",
                        "start": 12,
                        "end": 14,
                        "body": []
                      }
                    }
                  },
                  {
                    "type": "MethodDefinition",
                    "start": 15,
                    "end": 20,
                    "computed": false,
                    "key": {
                      "type": "Identifier",
                      "start": 15,
                      "end": 16,
                      "name": "c"
                    },
                    "static": false,
                    "kind": "method",
                    "value": {
                      "type": "FunctionExpression",
                      "start": 16,
                      "end": 20,
                      "id": null,
                      "generator": false,
                      "expression": false,
                      "async": false,
                      "params": [],
                      "body": {
                        "type": "BlockStatement",
                        "start": 18,
                        "end": 20,
                        "body": []
                      }
                    }
                  }
                ]
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "var _፩፪፫፬፭፮፯፰፱"', () => {
        expect(parseScript('var _፩፪፫፬፭፮፯፰፱', {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 14,
          "body": [
            {
              "type": "VariableDeclaration",
              "start": 0,
              "end": 14,
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "start": 4,
                  "end": 14,
                  "id": {
                    "type": "Identifier",
                    "start": 4,
                    "end": 14,
                    "name": "_፩፪፫፬፭፮፯፰፱"
                  },
                  "init": null
                }
              ],
              "kind": "var"
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "class a { set b(c) {} get b() {} }"', () => {
        expect(parseScript('class a { set b(c) {} get b() {} }', {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 34,
          "body": [
            {
              "type": "ClassDeclaration",
              "start": 0,
              "end": 34,
              "id": {
                "type": "Identifier",
                "start": 6,
                "end": 7,
                "name": "a"
              },
              "superClass": null,
              "body": {
                "type": "ClassBody",
                "start": 8,
                "end": 34,
                "body": [
                  {
                    "type": "MethodDefinition",
                    "start": 10,
                    "end": 21,
                    "computed": false,
                    "key": {
                      "type": "Identifier",
                      "start": 14,
                      "end": 15,
                      "name": "b"
                    },
                    "static": false,
                    "kind": "set",
                    "value": {
                      "type": "FunctionExpression",
                      "start": 15,
                      "end": 21,
                      "id": null,
                      "generator": false,
                      "expression": false,
                      "async": false,
                      "params": [
                        {
                          "type": "Identifier",
                          "start": 16,
                          "end": 17,
                          "name": "c"
                        }
                      ],
                      "body": {
                        "type": "BlockStatement",
                        "start": 19,
                        "end": 21,
                        "body": []
                      }
                    }
                  },
                  {
                    "type": "MethodDefinition",
                    "start": 22,
                    "end": 32,
                    "computed": false,
                    "key": {
                      "type": "Identifier",
                      "start": 26,
                      "end": 27,
                      "name": "b"
                    },
                    "static": false,
                    "kind": "get",
                    "value": {
                      "type": "FunctionExpression",
                      "start": 27,
                      "end": 32,
                      "id": null,
                      "generator": false,
                      "expression": false,
                      "async": false,
                      "params": [],
                      "body": {
                        "type": "BlockStatement",
                        "start": 30,
                        "end": 32,
                        "body": []
                      }
                    }
                  }
                ]
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "function *a(){yield/=3/}"', () => {
        expect(parseScript('function *a(){yield/=3/}', {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "body": [
              {
                  "type": "FunctionDeclaration",
                  "params": [],
                  "body": {
                      "type": "BlockStatement",
                      "body": [
                          {
                              "type": "ExpressionStatement",
                              "expression": {
                                  "type": "YieldExpression",
                                  "argument": {
                                      "type": "Literal",
                                      "value": /=3/,
                                      "regex": {
                                          "pattern": "=3",
                                          "flags": ""
                                      },
                                      "start": 19,
                                      "end": 23,
                                      "raw": "/=3/"
                                  },
                                  "delegate": false,
                                  "start": 14,
                                  "end": 23
                              },
                              "start": 14,
                              "end": 23
                          }
                      ],
                      "start": 13,
                      "end": 24
                  },
                  "async": false,
                  "generator": true,
                  "expression": false,
                  "id": {
                      "type": "Identifier",
                      "name": "a",
                      "start": 10,
                      "end": 11
                  },
                  "start": 0,
                  "end": 24
              }
          ],
          "sourceType": "script",
          "start": 0,
          "end": 24
      });
      });
      
      it('should parse "(function(){ a() })();"', () => {
        expect(parseScript('(function(){ a() })();', {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 22,
          "body": [
            {
              "type": "ExpressionStatement",
              "start": 0,
              "end": 22,
              "expression": {
                "type": "CallExpression",
                "start": 0,
                "end": 21,
                "callee": {
                  "type": "FunctionExpression",
                  "start": 1,
                  "end": 18,
                  "id": null,
                  "generator": false,
                  "expression": false,
                  "async": false,
                  "params": [],
                  "body": {
                    "type": "BlockStatement",
                    "start": 11,
                    "end": 18,
                    "body": [
                      {
                        "type": "ExpressionStatement",
                        "start": 13,
                        "end": 16,
                        "expression": {
                          "type": "CallExpression",
                          "start": 13,
                          "end": 16,
                          "callee": {
                            "type": "Identifier",
                            "start": 13,
                            "end": 14,
                            "name": "a"
                          },
                          "arguments": []
                        }
                      }
                    ]
                  }
                },
                "arguments": []
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "var a = class extends b {}"', () => {
        expect(parseScript('var a = class extends b {}', {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 26,
          "body": [
            {
              "type": "VariableDeclaration",
              "start": 0,
              "end": 26,
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "start": 4,
                  "end": 26,
                  "id": {
                    "type": "Identifier",
                    "start": 4,
                    "end": 5,
                    "name": "a"
                  },
                  "init": {
                    "type": "ClassExpression",
                    "start": 8,
                    "end": 26,
                    "id": null,
                    "superClass": {
                      "type": "Identifier",
                      "start": 22,
                      "end": 23,
                      "name": "b"
                    },
                    "body": {
                      "type": "ClassBody",
                      "start": 24,
                      "end": 26,
                      "body": []
                    }
                  }
                }
              ],
              "kind": "var"
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "(class {get a() {}})"', () => {
        expect(parseScript('(class {get a() {}})', {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 20,
          "body": [
            {
              "type": "ExpressionStatement",
              "start": 0,
              "end": 20,
              "expression": {
                "type": "ClassExpression",
                "start": 1,
                "end": 19,
                "id": null,
                "superClass": null,
                "body": {
                  "type": "ClassBody",
                  "start": 7,
                  "end": 19,
                  "body": [
                    {
                      "type": "MethodDefinition",
                      "start": 8,
                      "end": 18,
                      "computed": false,
                      "key": {
                        "type": "Identifier",
                        "start": 12,
                        "end": 13,
                        "name": "a"
                      },
                      "static": false,
                      "kind": "get",
                      "value": {
                        "type": "FunctionExpression",
                        "start": 13,
                        "end": 18,
                        "id": null,
                        "generator": false,
                        "expression": false,
                        "async": false,
                        "params": [],
                        "body": {
                          "type": "BlockStatement",
                          "start": 16,
                          "end": 18,
                          "body": []
                        }
                      }
                    }
                  ]
                }
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "((a,a),(a,a))"', () => {
        expect(parseScript('((a,a),(a,a))', {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 13,
          "body": [
            {
              "type": "ExpressionStatement",
              "start": 0,
              "end": 13,
              "expression": {
                "type": "SequenceExpression",
                "start": 1,
                "end": 12,
                "expressions": [
                  {
                    "type": "SequenceExpression",
                    "start": 2,
                    "end": 5,
                    "expressions": [
                      {
                        "type": "Identifier",
                        "start": 2,
                        "end": 3,
                        "name": "a"
                      },
                      {
                        "type": "Identifier",
                        "start": 4,
                        "end": 5,
                        "name": "a"
                      }
                    ]
                  },
                  {
                    "type": "SequenceExpression",
                    "start": 8,
                    "end": 11,
                    "expressions": [
                      {
                        "type": "Identifier",
                        "start": 8,
                        "end": 9,
                        "name": "a"
                      },
                      {
                        "type": "Identifier",
                        "start": 10,
                        "end": 11,
                        "name": "a"
                      }
                    ]
                  }
                ]
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "[a, ...{0: b}] = 1"', () => {
        expect(parseScript('[a, ...{0: b}] = 1', {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "body": [
              {
                  "type": "ExpressionStatement",
                  "expression": {
                      "type": "AssignmentExpression",
                      "left": {
                          "type": "ArrayPattern",
                          "elements": [
                              {
                                  "type": "Identifier",
                                  "name": "a",
                                  "start": 1,
                                  "end": 2
                              },
                              {
                                  "type": "RestElement",
                                  "argument": {
                                      "type": "ObjectPattern",
                                      "properties": [
                                          {
                                              "type": "Property",
                                              "computed": false,
                                              "key": {
                                                  "type": "Literal",
                                                  "value": 0,
                                                  "start": 8,
                                                  "end": 9,
                                                  "raw": "0"
                                              },
                                              "kind": "init",
                                              "method": false,
                                              "shorthand": false,
                                              "value": {
                                                  "type": "Identifier",
                                                  "name": "b",
                                                  "start": 11,
                                                  "end": 12
                                              },
                                              "start": 8,
                                              "end": 12
                                          }
                                      ],
                                      "start": 7,
                                      "end": 13
                                  },
                                  "start": 4,
                                  "end": 13
                              }
                          ],
                          "start": 0,
                          "end": 14
                      },
                      "operator": "=",
                      "right": {
                          "type": "Literal",
                          "value": 1,
                          "start": 17,
                          "end": 18,
                          "raw": "1"
                      },
                      "start": 0,
                      "end": 18
                  },
                  "start": 0,
                  "end": 18
              }
          ],
          "sourceType": "script",
          "start": 0,
          "end": 18
      });
      });

      it('should parse "({set a(yield){}})"', () => {
        expect(parseScript('({set a(yield){}})', {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 18,
          "body": [
            {
              "type": "ExpressionStatement",
              "start": 0,
              "end": 18,
              "expression": {
                "type": "ObjectExpression",
                "start": 1,
                "end": 17,
                "properties": [
                  {
                    "type": "Property",
                    "start": 2,
                    "end": 16,
                    "method": false,
                    "shorthand": false,
                    "computed": false,
                    "key": {
                      "type": "Identifier",
                      "start": 6,
                      "end": 7,
                      "name": "a"
                    },
                    "kind": "set",
                    "value": {
                      "type": "FunctionExpression",
                      "start": 7,
                      "end": 16,
                      "id": null,
                      "generator": false,
                      "expression": false,
                      "async": false,
                      "params": [
                        {
                          "type": "Identifier",
                          "start": 8,
                          "end": 13,
                          "name": "yield"
                        }
                      ],
                      "body": {
                        "type": "BlockStatement",
                        "start": 14,
                        "end": 16,
                        "body": []
                      }
                    }
                  }
                ]
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "class a extends b { constructor() { () => { super(); } } }"', () => {
        expect(parseScript('class a extends b { constructor() { () => { super(); } } }', {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 58,
          "body": [
            {
              "type": "ClassDeclaration",
              "start": 0,
              "end": 58,
              "id": {
                "type": "Identifier",
                "start": 6,
                "end": 7,
                "name": "a"
              },
              "superClass": {
                "type": "Identifier",
                "start": 16,
                "end": 17,
                "name": "b"
              },
              "body": {
                "type": "ClassBody",
                "start": 18,
                "end": 58,
                "body": [
                  {
                    "type": "MethodDefinition",
                    "start": 20,
                    "end": 56,
                    "computed": false,
                    "key": {
                      "type": "Identifier",
                      "start": 20,
                      "end": 31,
                      "name": "constructor"
                    },
                    "static": false,
                    "kind": "constructor",
                    "value": {
                      "type": "FunctionExpression",
                      "start": 31,
                      "end": 56,
                      "id": null,
                      "generator": false,
                      "expression": false,
                      "async": false,
                      "params": [],
                      "body": {
                        "type": "BlockStatement",
                        "start": 34,
                        "end": 56,
                        "body": [
                          {
                            "type": "ExpressionStatement",
                            "start": 36,
                            "end": 54,
                            "expression": {
                              "type": "ArrowFunctionExpression",
                              "start": 36,
                              "end": 54,
                              "id": null,
                              "generator": false,
                              "expression": false,
                              "async": false,
                              "params": [],
                              "body": {
                                "type": "BlockStatement",
                                "start": 42,
                                "end": 54,
                                "body": [
                                  {
                                    "type": "ExpressionStatement",
                                    "start": 44,
                                    "end": 52,
                                    "expression": {
                                      "type": "CallExpression",
                                      "start": 44,
                                      "end": 51,
                                      "callee": {
                                        "type": "Super",
                                        "start": 44,
                                        "end": 49
                                      },
                                      "arguments": []
                                    }
                                  }
                                ]
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                ]
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "0008"', () => {
        expect(parseScript('0008', {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "body": [
              {
                  "type": "ExpressionStatement",
                  "expression": {
                      "type": "Literal",
                      "value": 8,
                      "start": 0,
                      "end": 4,
                      "raw": "0008"
                  },
                  "start": 0,
                  "end": 4
              }
          ],
          "sourceType": "script",
          "start": 0,
          "end": 4
      });
      });
      
      it('should parse "a = { b(...c) { } }"', () => {
        expect(parseScript('a = { b(...c) { } }', {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 19,
          "body": [
            {
              "type": "ExpressionStatement",
              "start": 0,
              "end": 19,
              "expression": {
                "type": "AssignmentExpression",
                "start": 0,
                "end": 19,
                "operator": "=",
                "left": {
                  "type": "Identifier",
                  "start": 0,
                  "end": 1,
                  "name": "a"
                },
                "right": {
                  "type": "ObjectExpression",
                  "start": 4,
                  "end": 19,
                  "properties": [
                    {
                      "type": "Property",
                      "start": 6,
                      "end": 17,
                      "method": true,
                      "shorthand": false,
                      "computed": false,
                      "key": {
                        "type": "Identifier",
                        "start": 6,
                        "end": 7,
                        "name": "b"
                      },
                      "kind": "init",
                      "value": {
                        "type": "FunctionExpression",
                        "start": 7,
                        "end": 17,
                        "id": null,
                        "generator": false,
                        "expression": false,
                        "async": false,
                        "params": [
                          {
                            "type": "RestElement",
                            "start": 8,
                            "end": 12,
                            "argument": {
                              "type": "Identifier",
                              "start": 11,
                              "end": 12,
                              "name": "c"
                            }
                          }
                        ],
                        "body": {
                          "type": "BlockStatement",
                          "start": 14,
                          "end": 17,
                          "body": []
                        }
                      }
                    }
                  ]
                }
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "let {a:{}} = 1"', () => {
        expect(parseScript('let {a:{}} = 1', {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 14,
          "body": [
            {
              "type": "VariableDeclaration",
              "start": 0,
              "end": 14,
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "start": 4,
                  "end": 14,
                  "id": {
                    "type": "ObjectPattern",
                    "start": 4,
                    "end": 10,
                    "properties": [
                      {
                        "type": "Property",
                        "start": 5,
                        "end": 9,
                        "method": false,
                        "shorthand": false,
                        "computed": false,
                        "key": {
                          "type": "Identifier",
                          "start": 5,
                          "end": 6,
                          "name": "a"
                        },
                        "value": {
                          "type": "ObjectPattern",
                          "start": 7,
                          "end": 9,
                          "properties": []
                        },
                        "kind": "init"
                      }
                    ]
                  },
                  "init": {
                    "type": "Literal",
                    "start": 13,
                    "end": 14,
                    "value": 1,
                    "raw": "1"
                  }
                }
              ],
              "kind": "let"
            }
          ],
          "sourceType": "script"
        });
      });

    
      it('should parse "({ *a() {} })"', () => {
        expect(parseScript('({ *a() {} })', {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 13,
          "body": [
            {
              "type": "ExpressionStatement",
              "start": 0,
              "end": 13,
              "expression": {
                "type": "ObjectExpression",
                "start": 1,
                "end": 12,
                "properties": [
                  {
                    "type": "Property",
                    "start": 3,
                    "end": 10,
                    "method": true,
                    "shorthand": false,
                    "computed": false,
                    "key": {
                      "type": "Identifier",
                      "start": 4,
                      "end": 5,
                      "name": "a"
                    },
                    "kind": "init",
                    "value": {
                      "type": "FunctionExpression",
                      "start": 5,
                      "end": 10,
                      "id": null,
                      "generator": true,
                      "expression": false,
                      "async": false,
                      "params": [],
                      "body": {
                        "type": "BlockStatement",
                        "start": 8,
                        "end": 10,
                        "body": []
                      }
                    }
                  }
                ]
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse complex', () => {
        expect(parseScript(`c: {
          a();
          switch (1) {
            case 2:
              b();
              if (a) break c;
              for (var b = 3; b < 4; b++) {
                  if (b > 5) break; // this break refers to the for, not to the switch; thus it
                                    // shouldn't ruin our optimization
                  d.e(b);
              }
              f();
            case 6+7:
              g();
              break;
            default:
              h();
          }
      }`, {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "body": [
              {
                  "type": "LabeledStatement",
                  "label": {
                      "type": "Identifier",
                      "name": "c",
                      "start": 0,
                      "end": 1
                  },
                  "body": {
                      "type": "BlockStatement",
                      "body": [
                          {
                              "type": "ExpressionStatement",
                              "expression": {
                                  "type": "CallExpression",
                                  "arguments": [],
                                  "callee": {
                                      "type": "Identifier",
                                      "name": "a",
                                      "start": 15,
                                      "end": 16
                                  },
                                  "start": 15,
                                  "end": 18
                              },
                              "start": 15,
                              "end": 19
                          },
                          {
                              "type": "SwitchStatement",
                              "discriminant": {
                                  "type": "Literal",
                                  "value": 1,
                                  "start": 38,
                                  "end": 39,
                                  "raw": "1"
                              },
                              "cases": [
                                  {
                                      "type": "SwitchCase",
                                      "test": {
                                          "type": "Literal",
                                          "value": 2,
                                          "start": 60,
                                          "end": 61,
                                          "raw": "2"
                                      },
                                      "consequent": [
                                          {
                                              "type": "ExpressionStatement",
                                              "expression": {
                                                  "type": "CallExpression",
                                                  "arguments": [],
                                                  "callee": {
                                                      "type": "Identifier",
                                                      "name": "b",
                                                      "start": 77,
                                                      "end": 78
                                                  },
                                                  "start": 77,
                                                  "end": 80
                                              },
                                              "start": 77,
                                              "end": 81
                                          },
                                          {
                                              "type": "IfStatement",
                                              "test": {
                                                  "type": "Identifier",
                                                  "name": "a",
                                                  "start": 100,
                                                  "end": 101
                                              },
                                              "alternate": null,
                                              "consequent": {
                                                  "type": "BreakStatement",
                                                  "label": {
                                                      "type": "Identifier",
                                                      "name": "c",
                                                      "start": 109,
                                                      "end": 110
                                                  },
                                                  "start": 103,
                                                  "end": 111
                                              },
                                              "start": 96,
                                              "end": 111
                                          },
                                          {
                                              "type": "ForStatement",
                                              "body": {
                                                  "type": "BlockStatement",
                                                  "body": [
                                                      {
                                                          "type": "IfStatement",
                                                          "test": {
                                                              "type": "BinaryExpression",
                                                              "left": {
                                                                  "type": "Identifier",
                                                                  "name": "b",
                                                                  "start": 178,
                                                                  "end": 179
                                                              },
                                                              "right": {
                                                                  "type": "Literal",
                                                                  "value": 5,
                                                                  "start": 182,
                                                                  "end": 183,
                                                                  "raw": "5"
                                                              },
                                                              "operator": ">",
                                                              "start": 178,
                                                              "end": 183
                                                          },
                                                          "alternate": null,
                                                          "consequent": {
                                                              "type": "BreakStatement",
                                                              "label": null,
                                                              "start": 185,
                                                              "end": 191
                                                          },
                                                          "start": 174,
                                                          "end": 191
                                                      },
                                                      {
                                                          "type": "ExpressionStatement",
                                                          "expression": {
                                                              "type": "CallExpression",
                                                              "arguments": [
                                                                  {
                                                                      "type": "Identifier",
                                                                      "name": "b",
                                                                      "start": 345,
                                                                      "end": 346
                                                                  }
                                                              ],
                                                              "callee": {
                                                                  "type": "MemberExpression",
                                                                  "object": {
                                                                      "type": "Identifier",
                                                                      "name": "d",
                                                                      "start": 341,
                                                                      "end": 342
                                                                  },
                                                                  "computed": false,
                                                                  "property": {
                                                                      "type": "Identifier",
                                                                      "name": "e",
                                                                      "start": 343,
                                                                      "end": 344
                                                                  },
                                                                  "start": 341,
                                                                  "end": 344
                                                              },
                                                              "start": 341,
                                                              "end": 347
                                                          },
                                                          "start": 341,
                                                          "end": 348
                                                      }
                                                  ],
                                                  "start": 154,
                                                  "end": 364
                                              },
                                              "init": {
                                                  "type": "VariableDeclaration",
                                                  "declarations": [
                                                      {
                                                          "type": "VariableDeclarator",
                                                          "init": {
                                                              "type": "Literal",
                                                              "value": 3,
                                                              "start": 139,
                                                              "end": 140,
                                                              "raw": "3"
                                                          },
                                                          "id": {
                                                              "type": "Identifier",
                                                              "name": "b",
                                                              "start": 135,
                                                              "end": 136
                                                          },
                                                          "start": 135,
                                                          "end": 140
                                                      }
                                                  ],
                                                  "kind": "var",
                                                  "start": 131,
                                                  "end": 140
                                              },
                                              "test": {
                                                  "type": "BinaryExpression",
                                                  "left": {
                                                      "type": "Identifier",
                                                      "name": "b",
                                                      "start": 142,
                                                      "end": 143
                                                  },
                                                  "right": {
                                                      "type": "Literal",
                                                      "value": 4,
                                                      "start": 146,
                                                      "end": 147,
                                                      "raw": "4"
                                                  },
                                                  "operator": "<",
                                                  "start": 142,
                                                  "end": 147
                                              },
                                              "update": {
                                                  "type": "UpdateExpression",
                                                  "argument": {
                                                      "type": "Identifier",
                                                      "name": "b",
                                                      "start": 149,
                                                      "end": 150
                                                  },
                                                  "operator": "++",
                                                  "prefix": false,
                                                  "start": 149,
                                                  "end": 152
                                              },
                                              "start": 126,
                                              "end": 364
                                          },
                                          {
                                              "type": "ExpressionStatement",
                                              "expression": {
                                                  "type": "CallExpression",
                                                  "arguments": [],
                                                  "callee": {
                                                      "type": "Identifier",
                                                      "name": "f",
                                                      "start": 379,
                                                      "end": 380
                                                  },
                                                  "start": 379,
                                                  "end": 382
                                              },
                                              "start": 379,
                                              "end": 383
                                          }
                                      ],
                                      "start": 55,
                                      "end": 383
                                  },
                                  {
                                      "type": "SwitchCase",
                                      "test": {
                                          "type": "BinaryExpression",
                                          "left": {
                                              "type": "Literal",
                                              "value": 6,
                                              "start": 401,
                                              "end": 402,
                                              "raw": "6"
                                          },
                                          "right": {
                                              "type": "Literal",
                                              "value": 7,
                                              "start": 403,
                                              "end": 404,
                                              "raw": "7"
                                          },
                                          "operator": "+",
                                          "start": 401,
                                          "end": 404
                                      },
                                      "consequent": [
                                          {
                                              "type": "ExpressionStatement",
                                              "expression": {
                                                  "type": "CallExpression",
                                                  "arguments": [],
                                                  "callee": {
                                                      "type": "Identifier",
                                                      "name": "g",
                                                      "start": 420,
                                                      "end": 421
                                                  },
                                                  "start": 420,
                                                  "end": 423
                                              },
                                              "start": 420,
                                              "end": 424
                                          },
                                          {
                                              "type": "BreakStatement",
                                              "label": null,
                                              "start": 439,
                                              "end": 445
                                          }
                                      ],
                                      "start": 396,
                                      "end": 445
                                  },
                                  {
                                      "type": "SwitchCase",
                                      "test": null,
                                      "consequent": [
                                          {
                                              "type": "ExpressionStatement",
                                              "expression": {
                                                  "type": "CallExpression",
                                                  "arguments": [],
                                                  "callee": {
                                                      "type": "Identifier",
                                                      "name": "h",
                                                      "start": 481,
                                                      "end": 482
                                                  },
                                                  "start": 481,
                                                  "end": 484
                                              },
                                              "start": 481,
                                              "end": 485
                                          }
                                      ],
                                      "start": 458,
                                      "end": 485
                                  }
                              ],
                              "start": 30,
                              "end": 497
                          }
                      ],
                      "start": 3,
                      "end": 505
                  },
                  "start": 0,
                  "end": 505
              }
          ],
          "sourceType": "script",
          "start": 0,
          "end": 505
      });
      });

      it('should parse "(0o0)"', () => {
        expect(parseScript('(0o0)', {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 5,
          "body": [
            {
              "type": "ExpressionStatement",
              "start": 0,
              "end": 5,
              "expression": {
                "type": "Literal",
                "start": 1,
                "end": 4,
                "value": 0,
                "raw": "0o0"
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "[(a.b)] = 0"', () => {
        expect(parseScript('[(a.b)] = 0', {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 11,
          "body": [
            {
              "type": "ExpressionStatement",
              "start": 0,
              "end": 11,
              "expression": {
                "type": "AssignmentExpression",
                "start": 0,
                "end": 11,
                "operator": "=",
                "left": {
                  "type": "ArrayPattern",
                  "start": 0,
                  "end": 7,
                  "elements": [
                    {
                      "type": "MemberExpression",
                      "start": 2,
                      "end": 5,
                      "object": {
                        "type": "Identifier",
                        "start": 2,
                        "end": 3,
                        "name": "a"
                      },
                      "property": {
                        "type": "Identifier",
                        "start": 4,
                        "end": 5,
                        "name": "b"
                      },
                      "computed": false
                    }
                  ]
                },
                "right": {
                  "type": "Literal",
                  "start": 10,
                  "end": 11,
                  "value": 0,
                  "raw": "0"
                }
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "!function(){a()}(),!function(){b()}(),c()+1"', () => {
        expect(parseScript('!function(){a()}(),!function(){b()}(),c()+1', {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 43,
          "body": [
            {
              "type": "ExpressionStatement",
              "start": 0,
              "end": 43,
              "expression": {
                "type": "SequenceExpression",
                "start": 0,
                "end": 43,
                "expressions": [
                  {
                    "type": "UnaryExpression",
                    "start": 0,
                    "end": 18,
                    "operator": "!",
                    "prefix": true,
                    "argument": {
                      "type": "CallExpression",
                      "start": 1,
                      "end": 18,
                      "callee": {
                        "type": "FunctionExpression",
                        "start": 1,
                        "end": 16,
                        "id": null,
                        "generator": false,
                        "expression": false,
                        "async": false,
                        "params": [],
                        "body": {
                          "type": "BlockStatement",
                          "start": 11,
                          "end": 16,
                          "body": [
                            {
                              "type": "ExpressionStatement",
                              "start": 12,
                              "end": 15,
                              "expression": {
                                "type": "CallExpression",
                                "start": 12,
                                "end": 15,
                                "callee": {
                                  "type": "Identifier",
                                  "start": 12,
                                  "end": 13,
                                  "name": "a"
                                },
                                "arguments": []
                              }
                            }
                          ]
                        }
                      },
                      "arguments": []
                    }
                  },
                  {
                    "type": "UnaryExpression",
                    "start": 19,
                    "end": 37,
                    "operator": "!",
                    "prefix": true,
                    "argument": {
                      "type": "CallExpression",
                      "start": 20,
                      "end": 37,
                      "callee": {
                        "type": "FunctionExpression",
                        "start": 20,
                        "end": 35,
                        "id": null,
                        "generator": false,
                        "expression": false,
                        "async": false,
                        "params": [],
                        "body": {
                          "type": "BlockStatement",
                          "start": 30,
                          "end": 35,
                          "body": [
                            {
                              "type": "ExpressionStatement",
                              "start": 31,
                              "end": 34,
                              "expression": {
                                "type": "CallExpression",
                                "start": 31,
                                "end": 34,
                                "callee": {
                                  "type": "Identifier",
                                  "start": 31,
                                  "end": 32,
                                  "name": "b"
                                },
                                "arguments": []
                              }
                            }
                          ]
                        }
                      },
                      "arguments": []
                    }
                  },
                  {
                    "type": "BinaryExpression",
                    "start": 38,
                    "end": 43,
                    "left": {
                      "type": "CallExpression",
                      "start": 38,
                      "end": 41,
                      "callee": {
                        "type": "Identifier",
                        "start": 38,
                        "end": 39,
                        "name": "c"
                      },
                      "arguments": []
                    },
                    "operator": "+",
                    "right": {
                      "type": "Literal",
                      "start": 42,
                      "end": 43,
                      "value": 1,
                      "raw": "1"
                    }
                  }
                ]
              }
            }
          ],
          "sourceType": "script"
        });
      });
      
      it('should parse "a = {"__proto__": 1 }"', () => {
        expect(parseScript('a = {"__proto__": 1 }', {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 21,
          "body": [
            {
              "type": "ExpressionStatement",
              "start": 0,
              "end": 21,
              "expression": {
                "type": "AssignmentExpression",
                "start": 0,
                "end": 21,
                "operator": "=",
                "left": {
                  "type": "Identifier",
                  "start": 0,
                  "end": 1,
                  "name": "a"
                },
                "right": {
                  "type": "ObjectExpression",
                  "start": 4,
                  "end": 21,
                  "properties": [
                    {
                      "type": "Property",
                      "start": 5,
                      "end": 19,
                      "method": false,
                      "shorthand": false,
                      "computed": false,
                      "key": {
                        "type": "Literal",
                        "start": 5,
                        "end": 16,
                        "value": "__proto__",
                        "raw": "\"__proto__\""
                      },
                      "value": {
                        "type": "Literal",
                        "start": 18,
                        "end": 19,
                        "value": 1,
                        "raw": "1"
                      },
                      "kind": "init"
                    }
                  ]
                }
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "[a, b] = [b, a]"', () => {
        expect(parseScript('[a, b] = [b, a]', {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 15,
          "body": [
            {
              "type": "ExpressionStatement",
              "start": 0,
              "end": 15,
              "expression": {
                "type": "AssignmentExpression",
                "start": 0,
                "end": 15,
                "operator": "=",
                "left": {
                  "type": "ArrayPattern",
                  "start": 0,
                  "end": 6,
                  "elements": [
                    {
                      "type": "Identifier",
                      "start": 1,
                      "end": 2,
                      "name": "a"
                    },
                    {
                      "type": "Identifier",
                      "start": 4,
                      "end": 5,
                      "name": "b"
                    }
                  ]
                },
                "right": {
                  "type": "ArrayExpression",
                  "start": 9,
                  "end": 15,
                  "elements": [
                    {
                      "type": "Identifier",
                      "start": 10,
                      "end": 11,
                      "name": "b"
                    },
                    {
                      "type": "Identifier",
                      "start": 13,
                      "end": 14,
                      "name": "a"
                    }
                  ]
                }
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse complex 2', () => {
        expect(parseScript(`// adapted from http://asmjs.org/spec/latest/
        function a(b, c, d) {
          "use asm";
          var e = b.f.e;
          var g = b.f.g;
          var h = new b.i(d);
          function j(k, l) {
            k = k|1;
            l = l|2;
            var m = 0.0, n = 3, o = 4;
            // asm.js forces byte addressing of the heap by requiring shifting by 3
            for (n = k << 5, o = l << 6; (n|7) < (o|8); n = (n + 9)|10) {
              m = m + +g(h[n>>11]);
            }
            return +m;
          }
          function p(k, l) {
            k = k|12;
            l = l|13;
            return +e(+j(k, l) / +((l - k)|14));
          }
          return { p: p };
        }
        function q(b, c, d) {
          var e = b.f.e;
          var g = b.f.g;
          var h = new b.i(d);
          function j(k, l) {
            k = k|15;
            l = l|16;
            var m = 0.0, n = 17, o = 18;
            // asm.js forces byte addressing of the heap by requiring shifting by 3
            for (n = k << 19, o = l << 20; (n|21) < (o|22); n = (n + 23)|24) {
              m = m + +g(h[n>>25]);
            }
            return +m;
          }
          function p(k, l) {
            k = k|26;
            l = l|27;
            return +e(+j(k, l) / +((l - k)|28));
          }
          return { p: p };
        }`, {
            ranges: true,
            raw: true,
            locations: true
        })).to.eql({
          "type": "Program",
          "body": [
              {
                  "type": "FunctionDeclaration",
                  "params": [
                      {
                          "type": "Identifier",
                          "name": "b",
                          "start": 65,
                          "end": 66,
                          "loc": {
                              "start": {
                                  "line": 2,
                                  "column": 19
                              },
                              "end": {
                                  "line": 2,
                                  "column": 20
                              }
                          }
                      },
                      {
                          "type": "Identifier",
                          "name": "c",
                          "start": 68,
                          "end": 69,
                          "loc": {
                              "start": {
                                  "line": 2,
                                  "column": 22
                              },
                              "end": {
                                  "line": 2,
                                  "column": 23
                              }
                          }
                      },
                      {
                          "type": "Identifier",
                          "name": "d",
                          "start": 71,
                          "end": 72,
                          "loc": {
                              "start": {
                                  "line": 2,
                                  "column": 25
                              },
                              "end": {
                                  "line": 2,
                                  "column": 26
                              }
                          }
                      }
                  ],
                  "body": {
                      "type": "BlockStatement",
                      "body": [
                          {
                              "type": "ExpressionStatement",
                              "expression": {
                                  "type": "Literal",
                                  "value": "use asm",
                                  "start": 86,
                                  "end": 95,
                                  "loc": {
                                      "start": {
                                          "line": 3,
                                          "column": 10
                                      },
                                      "end": {
                                          "line": 3,
                                          "column": 19
                                      }
                                  },
                                  "raw": "\"use asm\""
                              },
                              "start": 86,
                              "end": 96,
                              "loc": {
                                  "start": {
                                      "line": 3,
                                      "column": 10
                                  },
                                  "end": {
                                      "line": 3,
                                      "column": 20
                                  }
                              }
                          },
                          {
                              "type": "VariableDeclaration",
                              "declarations": [
                                  {
                                      "type": "VariableDeclarator",
                                      "init": {
                                          "type": "MemberExpression",
                                          "object": {
                                              "type": "MemberExpression",
                                              "object": {
                                                  "type": "Identifier",
                                                  "name": "b",
                                                  "start": 115,
                                                  "end": 116,
                                                  "loc": {
                                                      "start": {
                                                          "line": 4,
                                                          "column": 18
                                                      },
                                                      "end": {
                                                          "line": 4,
                                                          "column": 19
                                                      }
                                                  }
                                              },
                                              "computed": false,
                                              "property": {
                                                  "type": "Identifier",
                                                  "name": "f",
                                                  "start": 117,
                                                  "end": 118,
                                                  "loc": {
                                                      "start": {
                                                          "line": 4,
                                                          "column": 20
                                                      },
                                                      "end": {
                                                          "line": 4,
                                                          "column": 21
                                                      }
                                                  }
                                              },
                                              "start": 115,
                                              "end": 118,
                                              "loc": {
                                                  "start": {
                                                      "line": 4,
                                                      "column": 18
                                                  },
                                                  "end": {
                                                      "line": 4,
                                                      "column": 21
                                                  }
                                              }
                                          },
                                          "computed": false,
                                          "property": {
                                              "type": "Identifier",
                                              "name": "e",
                                              "start": 119,
                                              "end": 120,
                                              "loc": {
                                                  "start": {
                                                      "line": 4,
                                                      "column": 22
                                                  },
                                                  "end": {
                                                      "line": 4,
                                                      "column": 23
                                                  }
                                              }
                                          },
                                          "start": 115,
                                          "end": 120,
                                          "loc": {
                                              "start": {
                                                  "line": 4,
                                                  "column": 18
                                              },
                                              "end": {
                                                  "line": 4,
                                                  "column": 23
                                              }
                                          }
                                      },
                                      "id": {
                                          "type": "Identifier",
                                          "name": "e",
                                          "start": 111,
                                          "end": 112,
                                          "loc": {
                                              "start": {
                                                  "line": 4,
                                                  "column": 14
                                              },
                                              "end": {
                                                  "line": 4,
                                                  "column": 15
                                              }
                                          }
                                      },
                                      "start": 111,
                                      "end": 120,
                                      "loc": {
                                          "start": {
                                              "line": 4,
                                              "column": 14
                                          },
                                          "end": {
                                              "line": 4,
                                              "column": 23
                                          }
                                      }
                                  }
                              ],
                              "kind": "var",
                              "start": 107,
                              "end": 121,
                              "loc": {
                                  "start": {
                                      "line": 4,
                                      "column": 10
                                  },
                                  "end": {
                                      "line": 4,
                                      "column": 24
                                  }
                              }
                          },
                          {
                              "type": "VariableDeclaration",
                              "declarations": [
                                  {
                                      "type": "VariableDeclarator",
                                      "init": {
                                          "type": "MemberExpression",
                                          "object": {
                                              "type": "MemberExpression",
                                              "object": {
                                                  "type": "Identifier",
                                                  "name": "b",
                                                  "start": 140,
                                                  "end": 141,
                                                  "loc": {
                                                      "start": {
                                                          "line": 5,
                                                          "column": 18
                                                      },
                                                      "end": {
                                                          "line": 5,
                                                          "column": 19
                                                      }
                                                  }
                                              },
                                              "computed": false,
                                              "property": {
                                                  "type": "Identifier",
                                                  "name": "f",
                                                  "start": 142,
                                                  "end": 143,
                                                  "loc": {
                                                      "start": {
                                                          "line": 5,
                                                          "column": 20
                                                      },
                                                      "end": {
                                                          "line": 5,
                                                          "column": 21
                                                      }
                                                  }
                                              },
                                              "start": 140,
                                              "end": 143,
                                              "loc": {
                                                  "start": {
                                                      "line": 5,
                                                      "column": 18
                                                  },
                                                  "end": {
                                                      "line": 5,
                                                      "column": 21
                                                  }
                                              }
                                          },
                                          "computed": false,
                                          "property": {
                                              "type": "Identifier",
                                              "name": "g",
                                              "start": 144,
                                              "end": 145,
                                              "loc": {
                                                  "start": {
                                                      "line": 5,
                                                      "column": 22
                                                  },
                                                  "end": {
                                                      "line": 5,
                                                      "column": 23
                                                  }
                                              }
                                          },
                                          "start": 140,
                                          "end": 145,
                                          "loc": {
                                              "start": {
                                                  "line": 5,
                                                  "column": 18
                                              },
                                              "end": {
                                                  "line": 5,
                                                  "column": 23
                                              }
                                          }
                                      },
                                      "id": {
                                          "type": "Identifier",
                                          "name": "g",
                                          "start": 136,
                                          "end": 137,
                                          "loc": {
                                              "start": {
                                                  "line": 5,
                                                  "column": 14
                                              },
                                              "end": {
                                                  "line": 5,
                                                  "column": 15
                                              }
                                          }
                                      },
                                      "start": 136,
                                      "end": 145,
                                      "loc": {
                                          "start": {
                                              "line": 5,
                                              "column": 14
                                          },
                                          "end": {
                                              "line": 5,
                                              "column": 23
                                          }
                                      }
                                  }
                              ],
                              "kind": "var",
                              "start": 132,
                              "end": 146,
                              "loc": {
                                  "start": {
                                      "line": 5,
                                      "column": 10
                                  },
                                  "end": {
                                      "line": 5,
                                      "column": 24
                                  }
                              }
                          },
                          {
                              "type": "VariableDeclaration",
                              "declarations": [
                                  {
                                      "type": "VariableDeclarator",
                                      "init": {
                                          "type": "NewExpression",
                                          "callee": {
                                              "type": "MemberExpression",
                                              "object": {
                                                  "type": "Identifier",
                                                  "name": "b",
                                                  "start": 169,
                                                  "end": 170,
                                                  "loc": {
                                                      "start": {
                                                          "line": 6,
                                                          "column": 22
                                                      },
                                                      "end": {
                                                          "line": 6,
                                                          "column": 23
                                                      }
                                                  }
                                              },
                                              "computed": false,
                                              "property": {
                                                  "type": "Identifier",
                                                  "name": "i",
                                                  "start": 171,
                                                  "end": 172,
                                                  "loc": {
                                                      "start": {
                                                          "line": 6,
                                                          "column": 24
                                                      },
                                                      "end": {
                                                          "line": 6,
                                                          "column": 25
                                                      }
                                                  }
                                              },
                                              "start": 165,
                                              "end": 172,
                                              "loc": {
                                                  "start": {
                                                      "line": 6,
                                                      "column": 18
                                                  },
                                                  "end": {
                                                      "line": 6,
                                                      "column": 25
                                                  }
                                              }
                                          },
                                          "arguments": [
                                              {
                                                  "type": "Identifier",
                                                  "name": "d",
                                                  "start": 173,
                                                  "end": 174,
                                                  "loc": {
                                                      "start": {
                                                          "line": 6,
                                                          "column": 26
                                                      },
                                                      "end": {
                                                          "line": 6,
                                                          "column": 27
                                                      }
                                                  }
                                              }
                                          ],
                                          "start": 165,
                                          "end": 175,
                                          "loc": {
                                              "start": {
                                                  "line": 6,
                                                  "column": 18
                                              },
                                              "end": {
                                                  "line": 6,
                                                  "column": 28
                                              }
                                          }
                                      },
                                      "id": {
                                          "type": "Identifier",
                                          "name": "h",
                                          "start": 161,
                                          "end": 162,
                                          "loc": {
                                              "start": {
                                                  "line": 6,
                                                  "column": 14
                                              },
                                              "end": {
                                                  "line": 6,
                                                  "column": 15
                                              }
                                          }
                                      },
                                      "start": 161,
                                      "end": 175,
                                      "loc": {
                                          "start": {
                                              "line": 6,
                                              "column": 14
                                          },
                                          "end": {
                                              "line": 6,
                                              "column": 28
                                          }
                                      }
                                  }
                              ],
                              "kind": "var",
                              "start": 157,
                              "end": 176,
                              "loc": {
                                  "start": {
                                      "line": 6,
                                      "column": 10
                                  },
                                  "end": {
                                      "line": 6,
                                      "column": 29
                                  }
                              }
                          },
                          {
                              "type": "FunctionDeclaration",
                              "params": [
                                  {
                                      "type": "Identifier",
                                      "name": "k",
                                      "start": 198,
                                      "end": 199,
                                      "loc": {
                                          "start": {
                                              "line": 7,
                                              "column": 21
                                          },
                                          "end": {
                                              "line": 7,
                                              "column": 22
                                          }
                                      }
                                  },
                                  {
                                      "type": "Identifier",
                                      "name": "l",
                                      "start": 201,
                                      "end": 202,
                                      "loc": {
                                          "start": {
                                              "line": 7,
                                              "column": 24
                                          },
                                          "end": {
                                              "line": 7,
                                              "column": 25
                                          }
                                      }
                                  }
                              ],
                              "body": {
                                  "type": "BlockStatement",
                                  "body": [
                                      {
                                          "type": "ExpressionStatement",
                                          "expression": {
                                              "type": "AssignmentExpression",
                                              "left": {
                                                  "type": "Identifier",
                                                  "name": "k",
                                                  "start": 218,
                                                  "end": 219,
                                                  "loc": {
                                                      "start": {
                                                          "line": 8,
                                                          "column": 12
                                                      },
                                                      "end": {
                                                          "line": 8,
                                                          "column": 13
                                                      }
                                                  }
                                              },
                                              "operator": "=",
                                              "right": {
                                                  "type": "BinaryExpression",
                                                  "left": {
                                                      "type": "Identifier",
                                                      "name": "k",
                                                      "start": 222,
                                                      "end": 223,
                                                      "loc": {
                                                          "start": {
                                                              "line": 8,
                                                              "column": 16
                                                          },
                                                          "end": {
                                                              "line": 8,
                                                              "column": 17
                                                          }
                                                      }
                                                  },
                                                  "right": {
                                                      "type": "Literal",
                                                      "value": 1,
                                                      "start": 224,
                                                      "end": 225,
                                                      "loc": {
                                                          "start": {
                                                              "line": 8,
                                                              "column": 18
                                                          },
                                                          "end": {
                                                              "line": 8,
                                                              "column": 19
                                                          }
                                                      },
                                                      "raw": "1"
                                                  },
                                                  "operator": "|",
                                                  "start": 222,
                                                  "end": 225,
                                                  "loc": {
                                                      "start": {
                                                          "line": 8,
                                                          "column": 16
                                                      },
                                                      "end": {
                                                          "line": 8,
                                                          "column": 19
                                                      }
                                                  }
                                              },
                                              "start": 218,
                                              "end": 225,
                                              "loc": {
                                                  "start": {
                                                      "line": 8,
                                                      "column": 12
                                                  },
                                                  "end": {
                                                      "line": 8,
                                                      "column": 19
                                                  }
                                              }
                                          },
                                          "start": 218,
                                          "end": 226,
                                          "loc": {
                                              "start": {
                                                  "line": 8,
                                                  "column": 12
                                              },
                                              "end": {
                                                  "line": 8,
                                                  "column": 20
                                              }
                                          }
                                      },
                                      {
                                          "type": "ExpressionStatement",
                                          "expression": {
                                              "type": "AssignmentExpression",
                                              "left": {
                                                  "type": "Identifier",
                                                  "name": "l",
                                                  "start": 239,
                                                  "end": 240,
                                                  "loc": {
                                                      "start": {
                                                          "line": 9,
                                                          "column": 12
                                                      },
                                                      "end": {
                                                          "line": 9,
                                                          "column": 13
                                                      }
                                                  }
                                              },
                                              "operator": "=",
                                              "right": {
                                                  "type": "BinaryExpression",
                                                  "left": {
                                                      "type": "Identifier",
                                                      "name": "l",
                                                      "start": 243,
                                                      "end": 244,
                                                      "loc": {
                                                          "start": {
                                                              "line": 9,
                                                              "column": 16
                                                          },
                                                          "end": {
                                                              "line": 9,
                                                              "column": 17
                                                          }
                                                      }
                                                  },
                                                  "right": {
                                                      "type": "Literal",
                                                      "value": 2,
                                                      "start": 245,
                                                      "end": 246,
                                                      "loc": {
                                                          "start": {
                                                              "line": 9,
                                                              "column": 18
                                                          },
                                                          "end": {
                                                              "line": 9,
                                                              "column": 19
                                                          }
                                                      },
                                                      "raw": "2"
                                                  },
                                                  "operator": "|",
                                                  "start": 243,
                                                  "end": 246,
                                                  "loc": {
                                                      "start": {
                                                          "line": 9,
                                                          "column": 16
                                                      },
                                                      "end": {
                                                          "line": 9,
                                                          "column": 19
                                                      }
                                                  }
                                              },
                                              "start": 239,
                                              "end": 246,
                                              "loc": {
                                                  "start": {
                                                      "line": 9,
                                                      "column": 12
                                                  },
                                                  "end": {
                                                      "line": 9,
                                                      "column": 19
                                                  }
                                              }
                                          },
                                          "start": 239,
                                          "end": 247,
                                          "loc": {
                                              "start": {
                                                  "line": 9,
                                                  "column": 12
                                              },
                                              "end": {
                                                  "line": 9,
                                                  "column": 20
                                              }
                                          }
                                      },
                                      {
                                          "type": "VariableDeclaration",
                                          "declarations": [
                                              {
                                                  "type": "VariableDeclarator",
                                                  "init": {
                                                      "type": "Literal",
                                                      "value": 0,
                                                      "start": 268,
                                                      "end": 271,
                                                      "loc": {
                                                          "start": {
                                                              "line": 10,
                                                              "column": 20
                                                          },
                                                          "end": {
                                                              "line": 10,
                                                              "column": 23
                                                          }
                                                      },
                                                      "raw": "0.0"
                                                  },
                                                  "id": {
                                                      "type": "Identifier",
                                                      "name": "m",
                                                      "start": 264,
                                                      "end": 265,
                                                      "loc": {
                                                          "start": {
                                                              "line": 10,
                                                              "column": 16
                                                          },
                                                          "end": {
                                                              "line": 10,
                                                              "column": 17
                                                          }
                                                      }
                                                  },
                                                  "start": 264,
                                                  "end": 271,
                                                  "loc": {
                                                      "start": {
                                                          "line": 10,
                                                          "column": 16
                                                      },
                                                      "end": {
                                                          "line": 10,
                                                          "column": 23
                                                      }
                                                  }
                                              },
                                              {
                                                  "type": "VariableDeclarator",
                                                  "init": {
                                                      "type": "Literal",
                                                      "value": 3,
                                                      "start": 277,
                                                      "end": 278,
                                                      "loc": {
                                                          "start": {
                                                              "line": 10,
                                                              "column": 29
                                                          },
                                                          "end": {
                                                              "line": 10,
                                                              "column": 30
                                                          }
                                                      },
                                                      "raw": "3"
                                                  },
                                                  "id": {
                                                      "type": "Identifier",
                                                      "name": "n",
                                                      "start": 273,
                                                      "end": 274,
                                                      "loc": {
                                                          "start": {
                                                              "line": 10,
                                                              "column": 25
                                                          },
                                                          "end": {
                                                              "line": 10,
                                                              "column": 26
                                                          }
                                                      }
                                                  },
                                                  "start": 273,
                                                  "end": 278,
                                                  "loc": {
                                                      "start": {
                                                          "line": 10,
                                                          "column": 25
                                                      },
                                                      "end": {
                                                          "line": 10,
                                                          "column": 30
                                                      }
                                                  }
                                              },
                                              {
                                                  "type": "VariableDeclarator",
                                                  "init": {
                                                      "type": "Literal",
                                                      "value": 4,
                                                      "start": 284,
                                                      "end": 285,
                                                      "loc": {
                                                          "start": {
                                                              "line": 10,
                                                              "column": 36
                                                          },
                                                          "end": {
                                                              "line": 10,
                                                              "column": 37
                                                          }
                                                      },
                                                      "raw": "4"
                                                  },
                                                  "id": {
                                                      "type": "Identifier",
                                                      "name": "o",
                                                      "start": 280,
                                                      "end": 281,
                                                      "loc": {
                                                          "start": {
                                                              "line": 10,
                                                              "column": 32
                                                          },
                                                          "end": {
                                                              "line": 10,
                                                              "column": 33
                                                          }
                                                      }
                                                  },
                                                  "start": 280,
                                                  "end": 285,
                                                  "loc": {
                                                      "start": {
                                                          "line": 10,
                                                          "column": 32
                                                      },
                                                      "end": {
                                                          "line": 10,
                                                          "column": 37
                                                      }
                                                  }
                                              }
                                          ],
                                          "kind": "var",
                                          "start": 260,
                                          "end": 286,
                                          "loc": {
                                              "start": {
                                                  "line": 10,
                                                  "column": 12
                                              },
                                              "end": {
                                                  "line": 10,
                                                  "column": 38
                                              }
                                          }
                                      },
                                      {
                                          "type": "ForStatement",
                                          "body": {
                                              "type": "BlockStatement",
                                              "body": [
                                                  {
                                                      "type": "ExpressionStatement",
                                                      "expression": {
                                                          "type": "AssignmentExpression",
                                                          "left": {
                                                              "type": "Identifier",
                                                              "name": "m",
                                                              "start": 459,
                                                              "end": 460,
                                                              "loc": {
                                                                  "start": {
                                                                      "line": 13,
                                                                      "column": 14
                                                                  },
                                                                  "end": {
                                                                      "line": 13,
                                                                      "column": 15
                                                                  }
                                                              }
                                                          },
                                                          "operator": "=",
                                                          "right": {
                                                              "type": "BinaryExpression",
                                                              "left": {
                                                                  "type": "Identifier",
                                                                  "name": "m",
                                                                  "start": 463,
                                                                  "end": 464,
                                                                  "loc": {
                                                                      "start": {
                                                                          "line": 13,
                                                                          "column": 18
                                                                      },
                                                                      "end": {
                                                                          "line": 13,
                                                                          "column": 19
                                                                      }
                                                                  }
                                                              },
                                                              "right": {
                                                                  "type": "UnaryExpression",
                                                                  "operator": "+",
                                                                  "argument": {
                                                                      "type": "CallExpression",
                                                                      "callee": {
                                                                          "type": "Identifier",
                                                                          "name": "g",
                                                                          "start": 468,
                                                                          "end": 469,
                                                                          "loc": {
                                                                              "start": {
                                                                                  "line": 13,
                                                                                  "column": 23
                                                                              },
                                                                              "end": {
                                                                                  "line": 13,
                                                                                  "column": 24
                                                                              }
                                                                          }
                                                                      },
                                                                      "arguments": [
                                                                          {
                                                                              "type": "MemberExpression",
                                                                              "object": {
                                                                                  "type": "Identifier",
                                                                                  "name": "h",
                                                                                  "start": 470,
                                                                                  "end": 471,
                                                                                  "loc": {
                                                                                      "start": {
                                                                                          "line": 13,
                                                                                          "column": 25
                                                                                      },
                                                                                      "end": {
                                                                                          "line": 13,
                                                                                          "column": 26
                                                                                      }
                                                                                  }
                                                                              },
                                                                              "computed": true,
                                                                              "property": {
                                                                                  "type": "BinaryExpression",
                                                                                  "left": {
                                                                                      "type": "Identifier",
                                                                                      "name": "n",
                                                                                      "start": 472,
                                                                                      "end": 473,
                                                                                      "loc": {
                                                                                          "start": {
                                                                                              "line": 13,
                                                                                              "column": 27
                                                                                          },
                                                                                          "end": {
                                                                                              "line": 13,
                                                                                              "column": 28
                                                                                          }
                                                                                      }
                                                                                  },
                                                                                  "right": {
                                                                                      "type": "Literal",
                                                                                      "value": 11,
                                                                                      "start": 475,
                                                                                      "end": 477,
                                                                                      "loc": {
                                                                                          "start": {
                                                                                              "line": 13,
                                                                                              "column": 30
                                                                                          },
                                                                                          "end": {
                                                                                              "line": 13,
                                                                                              "column": 32
                                                                                          }
                                                                                      },
                                                                                      "raw": "11"
                                                                                  },
                                                                                  "operator": ">>",
                                                                                  "start": 472,
                                                                                  "end": 477,
                                                                                  "loc": {
                                                                                      "start": {
                                                                                          "line": 13,
                                                                                          "column": 27
                                                                                      },
                                                                                      "end": {
                                                                                          "line": 13,
                                                                                          "column": 32
                                                                                      }
                                                                                  }
                                                                              },
                                                                              "start": 470,
                                                                              "end": 478,
                                                                              "loc": {
                                                                                  "start": {
                                                                                      "line": 13,
                                                                                      "column": 25
                                                                                  },
                                                                                  "end": {
                                                                                      "line": 13,
                                                                                      "column": 33
                                                                                  }
                                                                              }
                                                                          }
                                                                      ],
                                                                      "start": 468,
                                                                      "end": 479,
                                                                      "loc": {
                                                                          "start": {
                                                                              "line": 13,
                                                                              "column": 23
                                                                          },
                                                                          "end": {
                                                                              "line": 13,
                                                                              "column": 34
                                                                          }
                                                                      }
                                                                  },
                                                                  "prefix": true,
                                                                  "start": 467,
                                                                  "end": 479,
                                                                  "loc": {
                                                                      "start": {
                                                                          "line": 13,
                                                                          "column": 22
                                                                      },
                                                                      "end": {
                                                                          "line": 13,
                                                                          "column": 34
                                                                      }
                                                                  }
                                                              },
                                                              "operator": "+",
                                                              "start": 463,
                                                              "end": 479,
                                                              "loc": {
                                                                  "start": {
                                                                      "line": 13,
                                                                      "column": 18
                                                                  },
                                                                  "end": {
                                                                      "line": 13,
                                                                      "column": 34
                                                                  }
                                                              }
                                                          },
                                                          "start": 459,
                                                          "end": 479,
                                                          "loc": {
                                                              "start": {
                                                                  "line": 13,
                                                                  "column": 14
                                                              },
                                                              "end": {
                                                                  "line": 13,
                                                                  "column": 34
                                                              }
                                                          }
                                                      },
                                                      "start": 459,
                                                      "end": 480,
                                                      "loc": {
                                                          "start": {
                                                              "line": 13,
                                                              "column": 14
                                                          },
                                                          "end": {
                                                              "line": 13,
                                                              "column": 35
                                                          }
                                                      }
                                                  }
                                              ],
                                              "start": 443,
                                              "end": 494,
                                              "loc": {
                                                  "start": {
                                                      "line": 12,
                                                      "column": 72
                                                  },
                                                  "end": {
                                                      "line": 14,
                                                      "column": 13
                                                  }
                                              }
                                          },
                                          "init": {
                                              "type": "SequenceExpression",
                                              "expressions": [
                                                  {
                                                      "type": "AssignmentExpression",
                                                      "left": {
                                                          "type": "Identifier",
                                                          "name": "n",
                                                          "start": 388,
                                                          "end": 389,
                                                          "loc": {
                                                              "start": {
                                                                  "line": 12,
                                                                  "column": 17
                                                              },
                                                              "end": {
                                                                  "line": 12,
                                                                  "column": 18
                                                              }
                                                          }
                                                      },
                                                      "operator": "=",
                                                      "right": {
                                                          "type": "BinaryExpression",
                                                          "left": {
                                                              "type": "Identifier",
                                                              "name": "k",
                                                              "start": 392,
                                                              "end": 393,
                                                              "loc": {
                                                                  "start": {
                                                                      "line": 12,
                                                                      "column": 21
                                                                  },
                                                                  "end": {
                                                                      "line": 12,
                                                                      "column": 22
                                                                  }
                                                              }
                                                          },
                                                          "right": {
                                                              "type": "Literal",
                                                              "value": 5,
                                                              "start": 397,
                                                              "end": 398,
                                                              "loc": {
                                                                  "start": {
                                                                      "line": 12,
                                                                      "column": 26
                                                                  },
                                                                  "end": {
                                                                      "line": 12,
                                                                      "column": 27
                                                                  }
                                                              },
                                                              "raw": "5"
                                                          },
                                                          "operator": "<<",
                                                          "start": 392,
                                                          "end": 398,
                                                          "loc": {
                                                              "start": {
                                                                  "line": 12,
                                                                  "column": 21
                                                              },
                                                              "end": {
                                                                  "line": 12,
                                                                  "column": 27
                                                              }
                                                          }
                                                      },
                                                      "start": 388,
                                                      "end": 398,
                                                      "loc": {
                                                          "start": {
                                                              "line": 12,
                                                              "column": 17
                                                          },
                                                          "end": {
                                                              "line": 12,
                                                              "column": 27
                                                          }
                                                      }
                                                  },
                                                  {
                                                      "type": "AssignmentExpression",
                                                      "left": {
                                                          "type": "Identifier",
                                                          "name": "o",
                                                          "start": 400,
                                                          "end": 401,
                                                          "loc": {
                                                              "start": {
                                                                  "line": 12,
                                                                  "column": 29
                                                              },
                                                              "end": {
                                                                  "line": 12,
                                                                  "column": 30
                                                              }
                                                          }
                                                      },
                                                      "operator": "=",
                                                      "right": {
                                                          "type": "BinaryExpression",
                                                          "left": {
                                                              "type": "Identifier",
                                                              "name": "l",
                                                              "start": 404,
                                                              "end": 405,
                                                              "loc": {
                                                                  "start": {
                                                                      "line": 12,
                                                                      "column": 33
                                                                  },
                                                                  "end": {
                                                                      "line": 12,
                                                                      "column": 34
                                                                  }
                                                              }
                                                          },
                                                          "right": {
                                                              "type": "Literal",
                                                              "value": 6,
                                                              "start": 409,
                                                              "end": 410,
                                                              "loc": {
                                                                  "start": {
                                                                      "line": 12,
                                                                      "column": 38
                                                                  },
                                                                  "end": {
                                                                      "line": 12,
                                                                      "column": 39
                                                                  }
                                                              },
                                                              "raw": "6"
                                                          },
                                                          "operator": "<<",
                                                          "start": 404,
                                                          "end": 410,
                                                          "loc": {
                                                              "start": {
                                                                  "line": 12,
                                                                  "column": 33
                                                              },
                                                              "end": {
                                                                  "line": 12,
                                                                  "column": 39
                                                              }
                                                          }
                                                      },
                                                      "start": 400,
                                                      "end": 410,
                                                      "loc": {
                                                          "start": {
                                                              "line": 12,
                                                              "column": 29
                                                          },
                                                          "end": {
                                                              "line": 12,
                                                              "column": 39
                                                          }
                                                      }
                                                  }
                                              ],
                                              "start": 383,
                                              "end": 410,
                                              "loc": {
                                                  "start": {
                                                      "line": 12,
                                                      "column": 12
                                                  },
                                                  "end": {
                                                      "line": 12,
                                                      "column": 39
                                                  }
                                              }
                                          },
                                          "test": {
                                              "type": "BinaryExpression",
                                              "left": {
                                                  "type": "BinaryExpression",
                                                  "left": {
                                                      "type": "Identifier",
                                                      "name": "n",
                                                      "start": 413,
                                                      "end": 414,
                                                      "loc": {
                                                          "start": {
                                                              "line": 12,
                                                              "column": 42
                                                          },
                                                          "end": {
                                                              "line": 12,
                                                              "column": 43
                                                          }
                                                      }
                                                  },
                                                  "right": {
                                                      "type": "Literal",
                                                      "value": 7,
                                                      "start": 415,
                                                      "end": 416,
                                                      "loc": {
                                                          "start": {
                                                              "line": 12,
                                                              "column": 44
                                                          },
                                                          "end": {
                                                              "line": 12,
                                                              "column": 45
                                                          }
                                                      },
                                                      "raw": "7"
                                                  },
                                                  "operator": "|",
                                                  "start": 413,
                                                  "end": 416,
                                                  "loc": {
                                                      "start": {
                                                          "line": 12,
                                                          "column": 42
                                                      },
                                                      "end": {
                                                          "line": 12,
                                                          "column": 45
                                                      }
                                                  }
                                              },
                                              "right": {
                                                  "type": "BinaryExpression",
                                                  "left": {
                                                      "type": "Identifier",
                                                      "name": "o",
                                                      "start": 421,
                                                      "end": 422,
                                                      "loc": {
                                                          "start": {
                                                              "line": 12,
                                                              "column": 50
                                                          },
                                                          "end": {
                                                              "line": 12,
                                                              "column": 51
                                                          }
                                                      }
                                                  },
                                                  "right": {
                                                      "type": "Literal",
                                                      "value": 8,
                                                      "start": 423,
                                                      "end": 424,
                                                      "loc": {
                                                          "start": {
                                                              "line": 12,
                                                              "column": 52
                                                          },
                                                          "end": {
                                                              "line": 12,
                                                              "column": 53
                                                          }
                                                      },
                                                      "raw": "8"
                                                  },
                                                  "operator": "|",
                                                  "start": 421,
                                                  "end": 424,
                                                  "loc": {
                                                      "start": {
                                                          "line": 12,
                                                          "column": 50
                                                      },
                                                      "end": {
                                                          "line": 12,
                                                          "column": 53
                                                      }
                                                  }
                                              },
                                              "operator": "<",
                                              "start": 412,
                                              "end": 425,
                                              "loc": {
                                                  "start": {
                                                      "line": 12,
                                                      "column": 41
                                                  },
                                                  "end": {
                                                      "line": 12,
                                                      "column": 54
                                                  }
                                              }
                                          },
                                          "update": {
                                              "type": "AssignmentExpression",
                                              "left": {
                                                  "type": "Identifier",
                                                  "name": "n",
                                                  "start": 427,
                                                  "end": 428,
                                                  "loc": {
                                                      "start": {
                                                          "line": 12,
                                                          "column": 56
                                                      },
                                                      "end": {
                                                          "line": 12,
                                                          "column": 57
                                                      }
                                                  }
                                              },
                                              "operator": "=",
                                              "right": {
                                                  "type": "BinaryExpression",
                                                  "left": {
                                                      "type": "BinaryExpression",
                                                      "left": {
                                                          "type": "Identifier",
                                                          "name": "n",
                                                          "start": 432,
                                                          "end": 433,
                                                          "loc": {
                                                              "start": {
                                                                  "line": 12,
                                                                  "column": 61
                                                              },
                                                              "end": {
                                                                  "line": 12,
                                                                  "column": 62
                                                              }
                                                          }
                                                      },
                                                      "right": {
                                                          "type": "Literal",
                                                          "value": 9,
                                                          "start": 436,
                                                          "end": 437,
                                                          "loc": {
                                                              "start": {
                                                                  "line": 12,
                                                                  "column": 65
                                                              },
                                                              "end": {
                                                                  "line": 12,
                                                                  "column": 66
                                                              }
                                                          },
                                                          "raw": "9"
                                                      },
                                                      "operator": "+",
                                                      "start": 432,
                                                      "end": 437,
                                                      "loc": {
                                                          "start": {
                                                              "line": 12,
                                                              "column": 61
                                                          },
                                                          "end": {
                                                              "line": 12,
                                                              "column": 66
                                                          }
                                                      }
                                                  },
                                                  "right": {
                                                      "type": "Literal",
                                                      "value": 10,
                                                      "start": 439,
                                                      "end": 441,
                                                      "loc": {
                                                          "start": {
                                                              "line": 12,
                                                              "column": 68
                                                          },
                                                          "end": {
                                                              "line": 12,
                                                              "column": 70
                                                          }
                                                      },
                                                      "raw": "10"
                                                  },
                                                  "operator": "|",
                                                  "start": 431,
                                                  "end": 441,
                                                  "loc": {
                                                      "start": {
                                                          "line": 12,
                                                          "column": 60
                                                      },
                                                      "end": {
                                                          "line": 12,
                                                          "column": 70
                                                      }
                                                  }
                                              },
                                              "start": 427,
                                              "end": 441,
                                              "loc": {
                                                  "start": {
                                                      "line": 12,
                                                      "column": 56
                                                  },
                                                  "end": {
                                                      "line": 12,
                                                      "column": 70
                                                  }
                                              }
                                          },
                                          "start": 383,
                                          "end": 494,
                                          "loc": {
                                              "start": {
                                                  "line": 12,
                                                  "column": 12
                                              },
                                              "end": {
                                                  "line": 14,
                                                  "column": 13
                                              }
                                          }
                                      },
                                      {
                                          "type": "ReturnStatement",
                                          "argument": {
                                              "type": "UnaryExpression",
                                              "operator": "+",
                                              "argument": {
                                                  "type": "Identifier",
                                                  "name": "m",
                                                  "start": 515,
                                                  "end": 516,
                                                  "loc": {
                                                      "start": {
                                                          "line": 15,
                                                          "column": 20
                                                      },
                                                      "end": {
                                                          "line": 15,
                                                          "column": 21
                                                      }
                                                  }
                                              },
                                              "prefix": true,
                                              "start": 514,
                                              "end": 516,
                                              "loc": {
                                                  "start": {
                                                      "line": 15,
                                                      "column": 19
                                                  },
                                                  "end": {
                                                      "line": 15,
                                                      "column": 21
                                                  }
                                              }
                                          },
                                          "start": 507,
                                          "end": 517,
                                          "loc": {
                                              "start": {
                                                  "line": 15,
                                                  "column": 12
                                              },
                                              "end": {
                                                  "line": 15,
                                                  "column": 22
                                              }
                                          }
                                      }
                                  ],
                                  "start": 204,
                                  "end": 529,
                                  "loc": {
                                      "start": {
                                          "line": 7,
                                          "column": 27
                                      },
                                      "end": {
                                          "line": 16,
                                          "column": 11
                                      }
                                  }
                              },
                              "async": false,
                              "generator": false,
                              "expression": false,
                              "id": {
                                  "type": "Identifier",
                                  "name": "j",
                                  "start": 196,
                                  "end": 197,
                                  "loc": {
                                      "start": {
                                          "line": 7,
                                          "column": 19
                                      },
                                      "end": {
                                          "line": 7,
                                          "column": 20
                                      }
                                  }
                              },
                              "start": 187,
                              "end": 529,
                              "loc": {
                                  "start": {
                                      "line": 7,
                                      "column": 10
                                  },
                                  "end": {
                                      "line": 16,
                                      "column": 11
                                  }
                              }
                          },
                          {
                              "type": "FunctionDeclaration",
                              "params": [
                                  {
                                      "type": "Identifier",
                                      "name": "k",
                                      "start": 551,
                                      "end": 552,
                                      "loc": {
                                          "start": {
                                              "line": 17,
                                              "column": 21
                                          },
                                          "end": {
                                              "line": 17,
                                              "column": 22
                                          }
                                      }
                                  },
                                  {
                                      "type": "Identifier",
                                      "name": "l",
                                      "start": 554,
                                      "end": 555,
                                      "loc": {
                                          "start": {
                                              "line": 17,
                                              "column": 24
                                          },
                                          "end": {
                                              "line": 17,
                                              "column": 25
                                          }
                                      }
                                  }
                              ],
                              "body": {
                                  "type": "BlockStatement",
                                  "body": [
                                      {
                                          "type": "ExpressionStatement",
                                          "expression": {
                                              "type": "AssignmentExpression",
                                              "left": {
                                                  "type": "Identifier",
                                                  "name": "k",
                                                  "start": 571,
                                                  "end": 572,
                                                  "loc": {
                                                      "start": {
                                                          "line": 18,
                                                          "column": 12
                                                      },
                                                      "end": {
                                                          "line": 18,
                                                          "column": 13
                                                      }
                                                  }
                                              },
                                              "operator": "=",
                                              "right": {
                                                  "type": "BinaryExpression",
                                                  "left": {
                                                      "type": "Identifier",
                                                      "name": "k",
                                                      "start": 575,
                                                      "end": 576,
                                                      "loc": {
                                                          "start": {
                                                              "line": 18,
                                                              "column": 16
                                                          },
                                                          "end": {
                                                              "line": 18,
                                                              "column": 17
                                                          }
                                                      }
                                                  },
                                                  "right": {
                                                      "type": "Literal",
                                                      "value": 12,
                                                      "start": 577,
                                                      "end": 579,
                                                      "loc": {
                                                          "start": {
                                                              "line": 18,
                                                              "column": 18
                                                          },
                                                          "end": {
                                                              "line": 18,
                                                              "column": 20
                                                          }
                                                      },
                                                      "raw": "12"
                                                  },
                                                  "operator": "|",
                                                  "start": 575,
                                                  "end": 579,
                                                  "loc": {
                                                      "start": {
                                                          "line": 18,
                                                          "column": 16
                                                      },
                                                      "end": {
                                                          "line": 18,
                                                          "column": 20
                                                      }
                                                  }
                                              },
                                              "start": 571,
                                              "end": 579,
                                              "loc": {
                                                  "start": {
                                                      "line": 18,
                                                      "column": 12
                                                  },
                                                  "end": {
                                                      "line": 18,
                                                      "column": 20
                                                  }
                                              }
                                          },
                                          "start": 571,
                                          "end": 580,
                                          "loc": {
                                              "start": {
                                                  "line": 18,
                                                  "column": 12
                                              },
                                              "end": {
                                                  "line": 18,
                                                  "column": 21
                                              }
                                          }
                                      },
                                      {
                                          "type": "ExpressionStatement",
                                          "expression": {
                                              "type": "AssignmentExpression",
                                              "left": {
                                                  "type": "Identifier",
                                                  "name": "l",
                                                  "start": 593,
                                                  "end": 594,
                                                  "loc": {
                                                      "start": {
                                                          "line": 19,
                                                          "column": 12
                                                      },
                                                      "end": {
                                                          "line": 19,
                                                          "column": 13
                                                      }
                                                  }
                                              },
                                              "operator": "=",
                                              "right": {
                                                  "type": "BinaryExpression",
                                                  "left": {
                                                      "type": "Identifier",
                                                      "name": "l",
                                                      "start": 597,
                                                      "end": 598,
                                                      "loc": {
                                                          "start": {
                                                              "line": 19,
                                                              "column": 16
                                                          },
                                                          "end": {
                                                              "line": 19,
                                                              "column": 17
                                                          }
                                                      }
                                                  },
                                                  "right": {
                                                      "type": "Literal",
                                                      "value": 13,
                                                      "start": 599,
                                                      "end": 601,
                                                      "loc": {
                                                          "start": {
                                                              "line": 19,
                                                              "column": 18
                                                          },
                                                          "end": {
                                                              "line": 19,
                                                              "column": 20
                                                          }
                                                      },
                                                      "raw": "13"
                                                  },
                                                  "operator": "|",
                                                  "start": 597,
                                                  "end": 601,
                                                  "loc": {
                                                      "start": {
                                                          "line": 19,
                                                          "column": 16
                                                      },
                                                      "end": {
                                                          "line": 19,
                                                          "column": 20
                                                      }
                                                  }
                                              },
                                              "start": 593,
                                              "end": 601,
                                              "loc": {
                                                  "start": {
                                                      "line": 19,
                                                      "column": 12
                                                  },
                                                  "end": {
                                                      "line": 19,
                                                      "column": 20
                                                  }
                                              }
                                          },
                                          "start": 593,
                                          "end": 602,
                                          "loc": {
                                              "start": {
                                                  "line": 19,
                                                  "column": 12
                                              },
                                              "end": {
                                                  "line": 19,
                                                  "column": 21
                                              }
                                          }
                                      },
                                      {
                                          "type": "ReturnStatement",
                                          "argument": {
                                              "type": "UnaryExpression",
                                              "operator": "+",
                                              "argument": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                      "type": "Identifier",
                                                      "name": "e",
                                                      "start": 623,
                                                      "end": 624,
                                                      "loc": {
                                                          "start": {
                                                              "line": 20,
                                                              "column": 20
                                                          },
                                                          "end": {
                                                              "line": 20,
                                                              "column": 21
                                                          }
                                                      }
                                                  },
                                                  "arguments": [
                                                      {
                                                          "type": "BinaryExpression",
                                                          "left": {
                                                              "type": "UnaryExpression",
                                                              "operator": "+",
                                                              "argument": {
                                                                  "type": "CallExpression",
                                                                  "callee": {
                                                                      "type": "Identifier",
                                                                      "name": "j",
                                                                      "start": 626,
                                                                      "end": 627,
                                                                      "loc": {
                                                                          "start": {
                                                                              "line": 20,
                                                                              "column": 23
                                                                          },
                                                                          "end": {
                                                                              "line": 20,
                                                                              "column": 24
                                                                          }
                                                                      }
                                                                  },
                                                                  "arguments": [
                                                                      {
                                                                          "type": "Identifier",
                                                                          "name": "k",
                                                                          "start": 628,
                                                                          "end": 629,
                                                                          "loc": {
                                                                              "start": {
                                                                                  "line": 20,
                                                                                  "column": 25
                                                                              },
                                                                              "end": {
                                                                                  "line": 20,
                                                                                  "column": 26
                                                                              }
                                                                          }
                                                                      },
                                                                      {
                                                                          "type": "Identifier",
                                                                          "name": "l",
                                                                          "start": 631,
                                                                          "end": 632,
                                                                          "loc": {
                                                                              "start": {
                                                                                  "line": 20,
                                                                                  "column": 28
                                                                              },
                                                                              "end": {
                                                                                  "line": 20,
                                                                                  "column": 29
                                                                              }
                                                                          }
                                                                      }
                                                                  ],
                                                                  "start": 626,
                                                                  "end": 633,
                                                                  "loc": {
                                                                      "start": {
                                                                          "line": 20,
                                                                          "column": 23
                                                                      },
                                                                      "end": {
                                                                          "line": 20,
                                                                          "column": 30
                                                                      }
                                                                  }
                                                              },
                                                              "prefix": true,
                                                              "start": 625,
                                                              "end": 633,
                                                              "loc": {
                                                                  "start": {
                                                                      "line": 20,
                                                                      "column": 22
                                                                  },
                                                                  "end": {
                                                                      "line": 20,
                                                                      "column": 30
                                                                  }
                                                              }
                                                          },
                                                          "right": {
                                                              "type": "UnaryExpression",
                                                              "operator": "+",
                                                              "argument": {
                                                                  "type": "BinaryExpression",
                                                                  "left": {
                                                                      "type": "BinaryExpression",
                                                                      "left": {
                                                                          "type": "Identifier",
                                                                          "name": "l",
                                                                          "start": 639,
                                                                          "end": 640,
                                                                          "loc": {
                                                                              "start": {
                                                                                  "line": 20,
                                                                                  "column": 36
                                                                              },
                                                                              "end": {
                                                                                  "line": 20,
                                                                                  "column": 37
                                                                              }
                                                                          }
                                                                      },
                                                                      "right": {
                                                                          "type": "Identifier",
                                                                          "name": "k",
                                                                          "start": 643,
                                                                          "end": 644,
                                                                          "loc": {
                                                                              "start": {
                                                                                  "line": 20,
                                                                                  "column": 40
                                                                              },
                                                                              "end": {
                                                                                  "line": 20,
                                                                                  "column": 41
                                                                              }
                                                                          }
                                                                      },
                                                                      "operator": "-",
                                                                      "start": 639,
                                                                      "end": 644,
                                                                      "loc": {
                                                                          "start": {
                                                                              "line": 20,
                                                                              "column": 36
                                                                          },
                                                                          "end": {
                                                                              "line": 20,
                                                                              "column": 41
                                                                          }
                                                                      }
                                                                  },
                                                                  "right": {
                                                                      "type": "Literal",
                                                                      "value": 14,
                                                                      "start": 646,
                                                                      "end": 648,
                                                                      "loc": {
                                                                          "start": {
                                                                              "line": 20,
                                                                              "column": 43
                                                                          },
                                                                          "end": {
                                                                              "line": 20,
                                                                              "column": 45
                                                                          }
                                                                      },
                                                                      "raw": "14"
                                                                  },
                                                                  "operator": "|",
                                                                  "start": 638,
                                                                  "end": 648,
                                                                  "loc": {
                                                                      "start": {
                                                                          "line": 20,
                                                                          "column": 35
                                                                      },
                                                                      "end": {
                                                                          "line": 20,
                                                                          "column": 45
                                                                      }
                                                                  }
                                                              },
                                                              "prefix": true,
                                                              "start": 636,
                                                              "end": 649,
                                                              "loc": {
                                                                  "start": {
                                                                      "line": 20,
                                                                      "column": 33
                                                                  },
                                                                  "end": {
                                                                      "line": 20,
                                                                      "column": 46
                                                                  }
                                                              }
                                                          },
                                                          "operator": "/",
                                                          "start": 625,
                                                          "end": 649,
                                                          "loc": {
                                                              "start": {
                                                                  "line": 20,
                                                                  "column": 22
                                                              },
                                                              "end": {
                                                                  "line": 20,
                                                                  "column": 46
                                                              }
                                                          }
                                                      }
                                                  ],
                                                  "start": 623,
                                                  "end": 650,
                                                  "loc": {
                                                      "start": {
                                                          "line": 20,
                                                          "column": 20
                                                      },
                                                      "end": {
                                                          "line": 20,
                                                          "column": 47
                                                      }
                                                  }
                                              },
                                              "prefix": true,
                                              "start": 622,
                                              "end": 650,
                                              "loc": {
                                                  "start": {
                                                      "line": 20,
                                                      "column": 19
                                                  },
                                                  "end": {
                                                      "line": 20,
                                                      "column": 47
                                                  }
                                              }
                                          },
                                          "start": 615,
                                          "end": 651,
                                          "loc": {
                                              "start": {
                                                  "line": 20,
                                                  "column": 12
                                              },
                                              "end": {
                                                  "line": 20,
                                                  "column": 48
                                              }
                                          }
                                      }
                                  ],
                                  "start": 557,
                                  "end": 663,
                                  "loc": {
                                      "start": {
                                          "line": 17,
                                          "column": 27
                                      },
                                      "end": {
                                          "line": 21,
                                          "column": 11
                                      }
                                  }
                              },
                              "async": false,
                              "generator": false,
                              "expression": false,
                              "id": {
                                  "type": "Identifier",
                                  "name": "p",
                                  "start": 549,
                                  "end": 550,
                                  "loc": {
                                      "start": {
                                          "line": 17,
                                          "column": 19
                                      },
                                      "end": {
                                          "line": 17,
                                          "column": 20
                                      }
                                  }
                              },
                              "start": 540,
                              "end": 663,
                              "loc": {
                                  "start": {
                                      "line": 17,
                                      "column": 10
                                  },
                                  "end": {
                                      "line": 21,
                                      "column": 11
                                  }
                              }
                          },
                          {
                              "type": "ReturnStatement",
                              "argument": {
                                  "type": "ObjectExpression",
                                  "properties": [
                                      {
                                          "type": "Property",
                                          "key": {
                                              "type": "Identifier",
                                              "name": "p",
                                              "start": 683,
                                              "end": 684,
                                              "loc": {
                                                  "start": {
                                                      "line": 22,
                                                      "column": 19
                                                  },
                                                  "end": {
                                                      "line": 22,
                                                      "column": 20
                                                  }
                                              }
                                          },
                                          "value": {
                                              "type": "Identifier",
                                              "name": "p",
                                              "start": 686,
                                              "end": 687,
                                              "loc": {
                                                  "start": {
                                                      "line": 22,
                                                      "column": 22
                                                  },
                                                  "end": {
                                                      "line": 22,
                                                      "column": 23
                                                  }
                                              }
                                          },
                                          "kind": "init",
                                          "computed": false,
                                          "method": false,
                                          "shorthand": false,
                                          "start": 683,
                                          "end": 687,
                                          "loc": {
                                              "start": {
                                                  "line": 22,
                                                  "column": 19
                                              },
                                              "end": {
                                                  "line": 22,
                                                  "column": 23
                                              }
                                          }
                                      }
                                  ],
                                  "start": 681,
                                  "end": 689,
                                  "loc": {
                                      "start": {
                                          "line": 22,
                                          "column": 17
                                      },
                                      "end": {
                                          "line": 22,
                                          "column": 25
                                      }
                                  }
                              },
                              "start": 674,
                              "end": 690,
                              "loc": {
                                  "start": {
                                      "line": 22,
                                      "column": 10
                                  },
                                  "end": {
                                      "line": 22,
                                      "column": 26
                                  }
                              }
                          }
                      ],
                      "start": 74,
                      "end": 700,
                      "loc": {
                          "start": {
                              "line": 2,
                              "column": 28
                          },
                          "end": {
                              "line": 23,
                              "column": 9
                          }
                      }
                  },
                  "async": false,
                  "generator": false,
                  "expression": false,
                  "id": {
                      "type": "Identifier",
                      "name": "a",
                      "start": 63,
                      "end": 64,
                      "loc": {
                          "start": {
                              "line": 2,
                              "column": 17
                          },
                          "end": {
                              "line": 2,
                              "column": 18
                          }
                      }
                  },
                  "start": 54,
                  "end": 700,
                  "loc": {
                      "start": {
                          "line": 2,
                          "column": 8
                      },
                      "end": {
                          "line": 23,
                          "column": 9
                      }
                  }
              },
              {
                  "type": "FunctionDeclaration",
                  "params": [
                      {
                          "type": "Identifier",
                          "name": "b",
                          "start": 720,
                          "end": 721,
                          "loc": {
                              "start": {
                                  "line": 24,
                                  "column": 19
                              },
                              "end": {
                                  "line": 24,
                                  "column": 20
                              }
                          }
                      },
                      {
                          "type": "Identifier",
                          "name": "c",
                          "start": 723,
                          "end": 724,
                          "loc": {
                              "start": {
                                  "line": 24,
                                  "column": 22
                              },
                              "end": {
                                  "line": 24,
                                  "column": 23
                              }
                          }
                      },
                      {
                          "type": "Identifier",
                          "name": "d",
                          "start": 726,
                          "end": 727,
                          "loc": {
                              "start": {
                                  "line": 24,
                                  "column": 25
                              },
                              "end": {
                                  "line": 24,
                                  "column": 26
                              }
                          }
                      }
                  ],
                  "body": {
                      "type": "BlockStatement",
                      "body": [
                          {
                              "type": "VariableDeclaration",
                              "declarations": [
                                  {
                                      "type": "VariableDeclarator",
                                      "init": {
                                          "type": "MemberExpression",
                                          "object": {
                                              "type": "MemberExpression",
                                              "object": {
                                                  "type": "Identifier",
                                                  "name": "b",
                                                  "start": 749,
                                                  "end": 750,
                                                  "loc": {
                                                      "start": {
                                                          "line": 25,
                                                          "column": 18
                                                      },
                                                      "end": {
                                                          "line": 25,
                                                          "column": 19
                                                      }
                                                  }
                                              },
                                              "computed": false,
                                              "property": {
                                                  "type": "Identifier",
                                                  "name": "f",
                                                  "start": 751,
                                                  "end": 752,
                                                  "loc": {
                                                      "start": {
                                                          "line": 25,
                                                          "column": 20
                                                      },
                                                      "end": {
                                                          "line": 25,
                                                          "column": 21
                                                      }
                                                  }
                                              },
                                              "start": 749,
                                              "end": 752,
                                              "loc": {
                                                  "start": {
                                                      "line": 25,
                                                      "column": 18
                                                  },
                                                  "end": {
                                                      "line": 25,
                                                      "column": 21
                                                  }
                                              }
                                          },
                                          "computed": false,
                                          "property": {
                                              "type": "Identifier",
                                              "name": "e",
                                              "start": 753,
                                              "end": 754,
                                              "loc": {
                                                  "start": {
                                                      "line": 25,
                                                      "column": 22
                                                  },
                                                  "end": {
                                                      "line": 25,
                                                      "column": 23
                                                  }
                                              }
                                          },
                                          "start": 749,
                                          "end": 754,
                                          "loc": {
                                              "start": {
                                                  "line": 25,
                                                  "column": 18
                                              },
                                              "end": {
                                                  "line": 25,
                                                  "column": 23
                                              }
                                          }
                                      },
                                      "id": {
                                          "type": "Identifier",
                                          "name": "e",
                                          "start": 745,
                                          "end": 746,
                                          "loc": {
                                              "start": {
                                                  "line": 25,
                                                  "column": 14
                                              },
                                              "end": {
                                                  "line": 25,
                                                  "column": 15
                                              }
                                          }
                                      },
                                      "start": 745,
                                      "end": 754,
                                      "loc": {
                                          "start": {
                                              "line": 25,
                                              "column": 14
                                          },
                                          "end": {
                                              "line": 25,
                                              "column": 23
                                          }
                                      }
                                  }
                              ],
                              "kind": "var",
                              "start": 741,
                              "end": 755,
                              "loc": {
                                  "start": {
                                      "line": 25,
                                      "column": 10
                                  },
                                  "end": {
                                      "line": 25,
                                      "column": 24
                                  }
                              }
                          },
                          {
                              "type": "VariableDeclaration",
                              "declarations": [
                                  {
                                      "type": "VariableDeclarator",
                                      "init": {
                                          "type": "MemberExpression",
                                          "object": {
                                              "type": "MemberExpression",
                                              "object": {
                                                  "type": "Identifier",
                                                  "name": "b",
                                                  "start": 774,
                                                  "end": 775,
                                                  "loc": {
                                                      "start": {
                                                          "line": 26,
                                                          "column": 18
                                                      },
                                                      "end": {
                                                          "line": 26,
                                                          "column": 19
                                                      }
                                                  }
                                              },
                                              "computed": false,
                                              "property": {
                                                  "type": "Identifier",
                                                  "name": "f",
                                                  "start": 776,
                                                  "end": 777,
                                                  "loc": {
                                                      "start": {
                                                          "line": 26,
                                                          "column": 20
                                                      },
                                                      "end": {
                                                          "line": 26,
                                                          "column": 21
                                                      }
                                                  }
                                              },
                                              "start": 774,
                                              "end": 777,
                                              "loc": {
                                                  "start": {
                                                      "line": 26,
                                                      "column": 18
                                                  },
                                                  "end": {
                                                      "line": 26,
                                                      "column": 21
                                                  }
                                              }
                                          },
                                          "computed": false,
                                          "property": {
                                              "type": "Identifier",
                                              "name": "g",
                                              "start": 778,
                                              "end": 779,
                                              "loc": {
                                                  "start": {
                                                      "line": 26,
                                                      "column": 22
                                                  },
                                                  "end": {
                                                      "line": 26,
                                                      "column": 23
                                                  }
                                              }
                                          },
                                          "start": 774,
                                          "end": 779,
                                          "loc": {
                                              "start": {
                                                  "line": 26,
                                                  "column": 18
                                              },
                                              "end": {
                                                  "line": 26,
                                                  "column": 23
                                              }
                                          }
                                      },
                                      "id": {
                                          "type": "Identifier",
                                          "name": "g",
                                          "start": 770,
                                          "end": 771,
                                          "loc": {
                                              "start": {
                                                  "line": 26,
                                                  "column": 14
                                              },
                                              "end": {
                                                  "line": 26,
                                                  "column": 15
                                              }
                                          }
                                      },
                                      "start": 770,
                                      "end": 779,
                                      "loc": {
                                          "start": {
                                              "line": 26,
                                              "column": 14
                                          },
                                          "end": {
                                              "line": 26,
                                              "column": 23
                                          }
                                      }
                                  }
                              ],
                              "kind": "var",
                              "start": 766,
                              "end": 780,
                              "loc": {
                                  "start": {
                                      "line": 26,
                                      "column": 10
                                  },
                                  "end": {
                                      "line": 26,
                                      "column": 24
                                  }
                              }
                          },
                          {
                              "type": "VariableDeclaration",
                              "declarations": [
                                  {
                                      "type": "VariableDeclarator",
                                      "init": {
                                          "type": "NewExpression",
                                          "callee": {
                                              "type": "MemberExpression",
                                              "object": {
                                                  "type": "Identifier",
                                                  "name": "b",
                                                  "start": 803,
                                                  "end": 804,
                                                  "loc": {
                                                      "start": {
                                                          "line": 27,
                                                          "column": 22
                                                      },
                                                      "end": {
                                                          "line": 27,
                                                          "column": 23
                                                      }
                                                  }
                                              },
                                              "computed": false,
                                              "property": {
                                                  "type": "Identifier",
                                                  "name": "i",
                                                  "start": 805,
                                                  "end": 806,
                                                  "loc": {
                                                      "start": {
                                                          "line": 27,
                                                          "column": 24
                                                      },
                                                      "end": {
                                                          "line": 27,
                                                          "column": 25
                                                      }
                                                  }
                                              },
                                              "start": 799,
                                              "end": 806,
                                              "loc": {
                                                  "start": {
                                                      "line": 27,
                                                      "column": 18
                                                  },
                                                  "end": {
                                                      "line": 27,
                                                      "column": 25
                                                  }
                                              }
                                          },
                                          "arguments": [
                                              {
                                                  "type": "Identifier",
                                                  "name": "d",
                                                  "start": 807,
                                                  "end": 808,
                                                  "loc": {
                                                      "start": {
                                                          "line": 27,
                                                          "column": 26
                                                      },
                                                      "end": {
                                                          "line": 27,
                                                          "column": 27
                                                      }
                                                  }
                                              }
                                          ],
                                          "start": 799,
                                          "end": 809,
                                          "loc": {
                                              "start": {
                                                  "line": 27,
                                                  "column": 18
                                              },
                                              "end": {
                                                  "line": 27,
                                                  "column": 28
                                              }
                                          }
                                      },
                                      "id": {
                                          "type": "Identifier",
                                          "name": "h",
                                          "start": 795,
                                          "end": 796,
                                          "loc": {
                                              "start": {
                                                  "line": 27,
                                                  "column": 14
                                              },
                                              "end": {
                                                  "line": 27,
                                                  "column": 15
                                              }
                                          }
                                      },
                                      "start": 795,
                                      "end": 809,
                                      "loc": {
                                          "start": {
                                              "line": 27,
                                              "column": 14
                                          },
                                          "end": {
                                              "line": 27,
                                              "column": 28
                                          }
                                      }
                                  }
                              ],
                              "kind": "var",
                              "start": 791,
                              "end": 810,
                              "loc": {
                                  "start": {
                                      "line": 27,
                                      "column": 10
                                  },
                                  "end": {
                                      "line": 27,
                                      "column": 29
                                  }
                              }
                          },
                          {
                              "type": "FunctionDeclaration",
                              "params": [
                                  {
                                      "type": "Identifier",
                                      "name": "k",
                                      "start": 832,
                                      "end": 833,
                                      "loc": {
                                          "start": {
                                              "line": 28,
                                              "column": 21
                                          },
                                          "end": {
                                              "line": 28,
                                              "column": 22
                                          }
                                      }
                                  },
                                  {
                                      "type": "Identifier",
                                      "name": "l",
                                      "start": 835,
                                      "end": 836,
                                      "loc": {
                                          "start": {
                                              "line": 28,
                                              "column": 24
                                          },
                                          "end": {
                                              "line": 28,
                                              "column": 25
                                          }
                                      }
                                  }
                              ],
                              "body": {
                                  "type": "BlockStatement",
                                  "body": [
                                      {
                                          "type": "ExpressionStatement",
                                          "expression": {
                                              "type": "AssignmentExpression",
                                              "left": {
                                                  "type": "Identifier",
                                                  "name": "k",
                                                  "start": 852,
                                                  "end": 853,
                                                  "loc": {
                                                      "start": {
                                                          "line": 29,
                                                          "column": 12
                                                      },
                                                      "end": {
                                                          "line": 29,
                                                          "column": 13
                                                      }
                                                  }
                                              },
                                              "operator": "=",
                                              "right": {
                                                  "type": "BinaryExpression",
                                                  "left": {
                                                      "type": "Identifier",
                                                      "name": "k",
                                                      "start": 856,
                                                      "end": 857,
                                                      "loc": {
                                                          "start": {
                                                              "line": 29,
                                                              "column": 16
                                                          },
                                                          "end": {
                                                              "line": 29,
                                                              "column": 17
                                                          }
                                                      }
                                                  },
                                                  "right": {
                                                      "type": "Literal",
                                                      "value": 15,
                                                      "start": 858,
                                                      "end": 860,
                                                      "loc": {
                                                          "start": {
                                                              "line": 29,
                                                              "column": 18
                                                          },
                                                          "end": {
                                                              "line": 29,
                                                              "column": 20
                                                          }
                                                      },
                                                      "raw": "15"
                                                  },
                                                  "operator": "|",
                                                  "start": 856,
                                                  "end": 860,
                                                  "loc": {
                                                      "start": {
                                                          "line": 29,
                                                          "column": 16
                                                      },
                                                      "end": {
                                                          "line": 29,
                                                          "column": 20
                                                      }
                                                  }
                                              },
                                              "start": 852,
                                              "end": 860,
                                              "loc": {
                                                  "start": {
                                                      "line": 29,
                                                      "column": 12
                                                  },
                                                  "end": {
                                                      "line": 29,
                                                      "column": 20
                                                  }
                                              }
                                          },
                                          "start": 852,
                                          "end": 861,
                                          "loc": {
                                              "start": {
                                                  "line": 29,
                                                  "column": 12
                                              },
                                              "end": {
                                                  "line": 29,
                                                  "column": 21
                                              }
                                          }
                                      },
                                      {
                                          "type": "ExpressionStatement",
                                          "expression": {
                                              "type": "AssignmentExpression",
                                              "left": {
                                                  "type": "Identifier",
                                                  "name": "l",
                                                  "start": 874,
                                                  "end": 875,
                                                  "loc": {
                                                      "start": {
                                                          "line": 30,
                                                          "column": 12
                                                      },
                                                      "end": {
                                                          "line": 30,
                                                          "column": 13
                                                      }
                                                  }
                                              },
                                              "operator": "=",
                                              "right": {
                                                  "type": "BinaryExpression",
                                                  "left": {
                                                      "type": "Identifier",
                                                      "name": "l",
                                                      "start": 878,
                                                      "end": 879,
                                                      "loc": {
                                                          "start": {
                                                              "line": 30,
                                                              "column": 16
                                                          },
                                                          "end": {
                                                              "line": 30,
                                                              "column": 17
                                                          }
                                                      }
                                                  },
                                                  "right": {
                                                      "type": "Literal",
                                                      "value": 16,
                                                      "start": 880,
                                                      "end": 882,
                                                      "loc": {
                                                          "start": {
                                                              "line": 30,
                                                              "column": 18
                                                          },
                                                          "end": {
                                                              "line": 30,
                                                              "column": 20
                                                          }
                                                      },
                                                      "raw": "16"
                                                  },
                                                  "operator": "|",
                                                  "start": 878,
                                                  "end": 882,
                                                  "loc": {
                                                      "start": {
                                                          "line": 30,
                                                          "column": 16
                                                      },
                                                      "end": {
                                                          "line": 30,
                                                          "column": 20
                                                      }
                                                  }
                                              },
                                              "start": 874,
                                              "end": 882,
                                              "loc": {
                                                  "start": {
                                                      "line": 30,
                                                      "column": 12
                                                  },
                                                  "end": {
                                                      "line": 30,
                                                      "column": 20
                                                  }
                                              }
                                          },
                                          "start": 874,
                                          "end": 883,
                                          "loc": {
                                              "start": {
                                                  "line": 30,
                                                  "column": 12
                                              },
                                              "end": {
                                                  "line": 30,
                                                  "column": 21
                                              }
                                          }
                                      },
                                      {
                                          "type": "VariableDeclaration",
                                          "declarations": [
                                              {
                                                  "type": "VariableDeclarator",
                                                  "init": {
                                                      "type": "Literal",
                                                      "value": 0,
                                                      "start": 904,
                                                      "end": 907,
                                                      "loc": {
                                                          "start": {
                                                              "line": 31,
                                                              "column": 20
                                                          },
                                                          "end": {
                                                              "line": 31,
                                                              "column": 23
                                                          }
                                                      },
                                                      "raw": "0.0"
                                                  },
                                                  "id": {
                                                      "type": "Identifier",
                                                      "name": "m",
                                                      "start": 900,
                                                      "end": 901,
                                                      "loc": {
                                                          "start": {
                                                              "line": 31,
                                                              "column": 16
                                                          },
                                                          "end": {
                                                              "line": 31,
                                                              "column": 17
                                                          }
                                                      }
                                                  },
                                                  "start": 900,
                                                  "end": 907,
                                                  "loc": {
                                                      "start": {
                                                          "line": 31,
                                                          "column": 16
                                                      },
                                                      "end": {
                                                          "line": 31,
                                                          "column": 23
                                                      }
                                                  }
                                              },
                                              {
                                                  "type": "VariableDeclarator",
                                                  "init": {
                                                      "type": "Literal",
                                                      "value": 17,
                                                      "start": 913,
                                                      "end": 915,
                                                      "loc": {
                                                          "start": {
                                                              "line": 31,
                                                              "column": 29
                                                          },
                                                          "end": {
                                                              "line": 31,
                                                              "column": 31
                                                          }
                                                      },
                                                      "raw": "17"
                                                  },
                                                  "id": {
                                                      "type": "Identifier",
                                                      "name": "n",
                                                      "start": 909,
                                                      "end": 910,
                                                      "loc": {
                                                          "start": {
                                                              "line": 31,
                                                              "column": 25
                                                          },
                                                          "end": {
                                                              "line": 31,
                                                              "column": 26
                                                          }
                                                      }
                                                  },
                                                  "start": 909,
                                                  "end": 915,
                                                  "loc": {
                                                      "start": {
                                                          "line": 31,
                                                          "column": 25
                                                      },
                                                      "end": {
                                                          "line": 31,
                                                          "column": 31
                                                      }
                                                  }
                                              },
                                              {
                                                  "type": "VariableDeclarator",
                                                  "init": {
                                                      "type": "Literal",
                                                      "value": 18,
                                                      "start": 921,
                                                      "end": 923,
                                                      "loc": {
                                                          "start": {
                                                              "line": 31,
                                                              "column": 37
                                                          },
                                                          "end": {
                                                              "line": 31,
                                                              "column": 39
                                                          }
                                                      },
                                                      "raw": "18"
                                                  },
                                                  "id": {
                                                      "type": "Identifier",
                                                      "name": "o",
                                                      "start": 917,
                                                      "end": 918,
                                                      "loc": {
                                                          "start": {
                                                              "line": 31,
                                                              "column": 33
                                                          },
                                                          "end": {
                                                              "line": 31,
                                                              "column": 34
                                                          }
                                                      }
                                                  },
                                                  "start": 917,
                                                  "end": 923,
                                                  "loc": {
                                                      "start": {
                                                          "line": 31,
                                                          "column": 33
                                                      },
                                                      "end": {
                                                          "line": 31,
                                                          "column": 39
                                                      }
                                                  }
                                              }
                                          ],
                                          "kind": "var",
                                          "start": 896,
                                          "end": 924,
                                          "loc": {
                                              "start": {
                                                  "line": 31,
                                                  "column": 12
                                              },
                                              "end": {
                                                  "line": 31,
                                                  "column": 40
                                              }
                                          }
                                      },
                                      {
                                          "type": "ForStatement",
                                          "body": {
                                              "type": "BlockStatement",
                                              "body": [
                                                  {
                                                      "type": "ExpressionStatement",
                                                      "expression": {
                                                          "type": "AssignmentExpression",
                                                          "left": {
                                                              "type": "Identifier",
                                                              "name": "m",
                                                              "start": 1102,
                                                              "end": 1103,
                                                              "loc": {
                                                                  "start": {
                                                                      "line": 34,
                                                                      "column": 14
                                                                  },
                                                                  "end": {
                                                                      "line": 34,
                                                                      "column": 15
                                                                  }
                                                              }
                                                          },
                                                          "operator": "=",
                                                          "right": {
                                                              "type": "BinaryExpression",
                                                              "left": {
                                                                  "type": "Identifier",
                                                                  "name": "m",
                                                                  "start": 1106,
                                                                  "end": 1107,
                                                                  "loc": {
                                                                      "start": {
                                                                          "line": 34,
                                                                          "column": 18
                                                                      },
                                                                      "end": {
                                                                          "line": 34,
                                                                          "column": 19
                                                                      }
                                                                  }
                                                              },
                                                              "right": {
                                                                  "type": "UnaryExpression",
                                                                  "operator": "+",
                                                                  "argument": {
                                                                      "type": "CallExpression",
                                                                      "callee": {
                                                                          "type": "Identifier",
                                                                          "name": "g",
                                                                          "start": 1111,
                                                                          "end": 1112,
                                                                          "loc": {
                                                                              "start": {
                                                                                  "line": 34,
                                                                                  "column": 23
                                                                              },
                                                                              "end": {
                                                                                  "line": 34,
                                                                                  "column": 24
                                                                              }
                                                                          }
                                                                      },
                                                                      "arguments": [
                                                                          {
                                                                              "type": "MemberExpression",
                                                                              "object": {
                                                                                  "type": "Identifier",
                                                                                  "name": "h",
                                                                                  "start": 1113,
                                                                                  "end": 1114,
                                                                                  "loc": {
                                                                                      "start": {
                                                                                          "line": 34,
                                                                                          "column": 25
                                                                                      },
                                                                                      "end": {
                                                                                          "line": 34,
                                                                                          "column": 26
                                                                                      }
                                                                                  }
                                                                              },
                                                                              "computed": true,
                                                                              "property": {
                                                                                  "type": "BinaryExpression",
                                                                                  "left": {
                                                                                      "type": "Identifier",
                                                                                      "name": "n",
                                                                                      "start": 1115,
                                                                                      "end": 1116,
                                                                                      "loc": {
                                                                                          "start": {
                                                                                              "line": 34,
                                                                                              "column": 27
                                                                                          },
                                                                                          "end": {
                                                                                              "line": 34,
                                                                                              "column": 28
                                                                                          }
                                                                                      }
                                                                                  },
                                                                                  "right": {
                                                                                      "type": "Literal",
                                                                                      "value": 25,
                                                                                      "start": 1118,
                                                                                      "end": 1120,
                                                                                      "loc": {
                                                                                          "start": {
                                                                                              "line": 34,
                                                                                              "column": 30
                                                                                          },
                                                                                          "end": {
                                                                                              "line": 34,
                                                                                              "column": 32
                                                                                          }
                                                                                      },
                                                                                      "raw": "25"
                                                                                  },
                                                                                  "operator": ">>",
                                                                                  "start": 1115,
                                                                                  "end": 1120,
                                                                                  "loc": {
                                                                                      "start": {
                                                                                          "line": 34,
                                                                                          "column": 27
                                                                                      },
                                                                                      "end": {
                                                                                          "line": 34,
                                                                                          "column": 32
                                                                                      }
                                                                                  }
                                                                              },
                                                                              "start": 1113,
                                                                              "end": 1121,
                                                                              "loc": {
                                                                                  "start": {
                                                                                      "line": 34,
                                                                                      "column": 25
                                                                                  },
                                                                                  "end": {
                                                                                      "line": 34,
                                                                                      "column": 33
                                                                                  }
                                                                              }
                                                                          }
                                                                      ],
                                                                      "start": 1111,
                                                                      "end": 1122,
                                                                      "loc": {
                                                                          "start": {
                                                                              "line": 34,
                                                                              "column": 23
                                                                          },
                                                                          "end": {
                                                                              "line": 34,
                                                                              "column": 34
                                                                          }
                                                                      }
                                                                  },
                                                                  "prefix": true,
                                                                  "start": 1110,
                                                                  "end": 1122,
                                                                  "loc": {
                                                                      "start": {
                                                                          "line": 34,
                                                                          "column": 22
                                                                      },
                                                                      "end": {
                                                                          "line": 34,
                                                                          "column": 34
                                                                      }
                                                                  }
                                                              },
                                                              "operator": "+",
                                                              "start": 1106,
                                                              "end": 1122,
                                                              "loc": {
                                                                  "start": {
                                                                      "line": 34,
                                                                      "column": 18
                                                                  },
                                                                  "end": {
                                                                      "line": 34,
                                                                      "column": 34
                                                                  }
                                                              }
                                                          },
                                                          "start": 1102,
                                                          "end": 1122,
                                                          "loc": {
                                                              "start": {
                                                                  "line": 34,
                                                                  "column": 14
                                                              },
                                                              "end": {
                                                                  "line": 34,
                                                                  "column": 34
                                                              }
                                                          }
                                                      },
                                                      "start": 1102,
                                                      "end": 1123,
                                                      "loc": {
                                                          "start": {
                                                              "line": 34,
                                                              "column": 14
                                                          },
                                                          "end": {
                                                              "line": 34,
                                                              "column": 35
                                                          }
                                                      }
                                                  }
                                              ],
                                              "start": 1086,
                                              "end": 1137,
                                              "loc": {
                                                  "start": {
                                                      "line": 33,
                                                      "column": 77
                                                  },
                                                  "end": {
                                                      "line": 35,
                                                      "column": 13
                                                  }
                                              }
                                          },
                                          "init": {
                                              "type": "SequenceExpression",
                                              "expressions": [
                                                  {
                                                      "type": "AssignmentExpression",
                                                      "left": {
                                                          "type": "Identifier",
                                                          "name": "n",
                                                          "start": 1026,
                                                          "end": 1027,
                                                          "loc": {
                                                              "start": {
                                                                  "line": 33,
                                                                  "column": 17
                                                              },
                                                              "end": {
                                                                  "line": 33,
                                                                  "column": 18
                                                              }
                                                          }
                                                      },
                                                      "operator": "=",
                                                      "right": {
                                                          "type": "BinaryExpression",
                                                          "left": {
                                                              "type": "Identifier",
                                                              "name": "k",
                                                              "start": 1030,
                                                              "end": 1031,
                                                              "loc": {
                                                                  "start": {
                                                                      "line": 33,
                                                                      "column": 21
                                                                  },
                                                                  "end": {
                                                                      "line": 33,
                                                                      "column": 22
                                                                  }
                                                              }
                                                          },
                                                          "right": {
                                                              "type": "Literal",
                                                              "value": 19,
                                                              "start": 1035,
                                                              "end": 1037,
                                                              "loc": {
                                                                  "start": {
                                                                      "line": 33,
                                                                      "column": 26
                                                                  },
                                                                  "end": {
                                                                      "line": 33,
                                                                      "column": 28
                                                                  }
                                                              },
                                                              "raw": "19"
                                                          },
                                                          "operator": "<<",
                                                          "start": 1030,
                                                          "end": 1037,
                                                          "loc": {
                                                              "start": {
                                                                  "line": 33,
                                                                  "column": 21
                                                              },
                                                              "end": {
                                                                  "line": 33,
                                                                  "column": 28
                                                              }
                                                          }
                                                      },
                                                      "start": 1026,
                                                      "end": 1037,
                                                      "loc": {
                                                          "start": {
                                                              "line": 33,
                                                              "column": 17
                                                          },
                                                          "end": {
                                                              "line": 33,
                                                              "column": 28
                                                          }
                                                      }
                                                  },
                                                  {
                                                      "type": "AssignmentExpression",
                                                      "left": {
                                                          "type": "Identifier",
                                                          "name": "o",
                                                          "start": 1039,
                                                          "end": 1040,
                                                          "loc": {
                                                              "start": {
                                                                  "line": 33,
                                                                  "column": 30
                                                              },
                                                              "end": {
                                                                  "line": 33,
                                                                  "column": 31
                                                              }
                                                          }
                                                      },
                                                      "operator": "=",
                                                      "right": {
                                                          "type": "BinaryExpression",
                                                          "left": {
                                                              "type": "Identifier",
                                                              "name": "l",
                                                              "start": 1043,
                                                              "end": 1044,
                                                              "loc": {
                                                                  "start": {
                                                                      "line": 33,
                                                                      "column": 34
                                                                  },
                                                                  "end": {
                                                                      "line": 33,
                                                                      "column": 35
                                                                  }
                                                              }
                                                          },
                                                          "right": {
                                                              "type": "Literal",
                                                              "value": 20,
                                                              "start": 1048,
                                                              "end": 1050,
                                                              "loc": {
                                                                  "start": {
                                                                      "line": 33,
                                                                      "column": 39
                                                                  },
                                                                  "end": {
                                                                      "line": 33,
                                                                      "column": 41
                                                                  }
                                                              },
                                                              "raw": "20"
                                                          },
                                                          "operator": "<<",
                                                          "start": 1043,
                                                          "end": 1050,
                                                          "loc": {
                                                              "start": {
                                                                  "line": 33,
                                                                  "column": 34
                                                              },
                                                              "end": {
                                                                  "line": 33,
                                                                  "column": 41
                                                              }
                                                          }
                                                      },
                                                      "start": 1039,
                                                      "end": 1050,
                                                      "loc": {
                                                          "start": {
                                                              "line": 33,
                                                              "column": 30
                                                          },
                                                          "end": {
                                                              "line": 33,
                                                              "column": 41
                                                          }
                                                      }
                                                  }
                                              ],
                                              "start": 1021,
                                              "end": 1050,
                                              "loc": {
                                                  "start": {
                                                      "line": 33,
                                                      "column": 12
                                                  },
                                                  "end": {
                                                      "line": 33,
                                                      "column": 41
                                                  }
                                              }
                                          },
                                          "test": {
                                              "type": "BinaryExpression",
                                              "left": {
                                                  "type": "BinaryExpression",
                                                  "left": {
                                                      "type": "Identifier",
                                                      "name": "n",
                                                      "start": 1053,
                                                      "end": 1054,
                                                      "loc": {
                                                          "start": {
                                                              "line": 33,
                                                              "column": 44
                                                          },
                                                          "end": {
                                                              "line": 33,
                                                              "column": 45
                                                          }
                                                      }
                                                  },
                                                  "right": {
                                                      "type": "Literal",
                                                      "value": 21,
                                                      "start": 1055,
                                                      "end": 1057,
                                                      "loc": {
                                                          "start": {
                                                              "line": 33,
                                                              "column": 46
                                                          },
                                                          "end": {
                                                              "line": 33,
                                                              "column": 48
                                                          }
                                                      },
                                                      "raw": "21"
                                                  },
                                                  "operator": "|",
                                                  "start": 1053,
                                                  "end": 1057,
                                                  "loc": {
                                                      "start": {
                                                          "line": 33,
                                                          "column": 44
                                                      },
                                                      "end": {
                                                          "line": 33,
                                                          "column": 48
                                                      }
                                                  }
                                              },
                                              "right": {
                                                  "type": "BinaryExpression",
                                                  "left": {
                                                      "type": "Identifier",
                                                      "name": "o",
                                                      "start": 1062,
                                                      "end": 1063,
                                                      "loc": {
                                                          "start": {
                                                              "line": 33,
                                                              "column": 53
                                                          },
                                                          "end": {
                                                              "line": 33,
                                                              "column": 54
                                                          }
                                                      }
                                                  },
                                                  "right": {
                                                      "type": "Literal",
                                                      "value": 22,
                                                      "start": 1064,
                                                      "end": 1066,
                                                      "loc": {
                                                          "start": {
                                                              "line": 33,
                                                              "column": 55
                                                          },
                                                          "end": {
                                                              "line": 33,
                                                              "column": 57
                                                          }
                                                      },
                                                      "raw": "22"
                                                  },
                                                  "operator": "|",
                                                  "start": 1062,
                                                  "end": 1066,
                                                  "loc": {
                                                      "start": {
                                                          "line": 33,
                                                          "column": 53
                                                      },
                                                      "end": {
                                                          "line": 33,
                                                          "column": 57
                                                      }
                                                  }
                                              },
                                              "operator": "<",
                                              "start": 1052,
                                              "end": 1067,
                                              "loc": {
                                                  "start": {
                                                      "line": 33,
                                                      "column": 43
                                                  },
                                                  "end": {
                                                      "line": 33,
                                                      "column": 58
                                                  }
                                              }
                                          },
                                          "update": {
                                              "type": "AssignmentExpression",
                                              "left": {
                                                  "type": "Identifier",
                                                  "name": "n",
                                                  "start": 1069,
                                                  "end": 1070,
                                                  "loc": {
                                                      "start": {
                                                          "line": 33,
                                                          "column": 60
                                                      },
                                                      "end": {
                                                          "line": 33,
                                                          "column": 61
                                                      }
                                                  }
                                              },
                                              "operator": "=",
                                              "right": {
                                                  "type": "BinaryExpression",
                                                  "left": {
                                                      "type": "BinaryExpression",
                                                      "left": {
                                                          "type": "Identifier",
                                                          "name": "n",
                                                          "start": 1074,
                                                          "end": 1075,
                                                          "loc": {
                                                              "start": {
                                                                  "line": 33,
                                                                  "column": 65
                                                              },
                                                              "end": {
                                                                  "line": 33,
                                                                  "column": 66
                                                              }
                                                          }
                                                      },
                                                      "right": {
                                                          "type": "Literal",
                                                          "value": 23,
                                                          "start": 1078,
                                                          "end": 1080,
                                                          "loc": {
                                                              "start": {
                                                                  "line": 33,
                                                                  "column": 69
                                                              },
                                                              "end": {
                                                                  "line": 33,
                                                                  "column": 71
                                                              }
                                                          },
                                                          "raw": "23"
                                                      },
                                                      "operator": "+",
                                                      "start": 1074,
                                                      "end": 1080,
                                                      "loc": {
                                                          "start": {
                                                              "line": 33,
                                                              "column": 65
                                                          },
                                                          "end": {
                                                              "line": 33,
                                                              "column": 71
                                                          }
                                                      }
                                                  },
                                                  "right": {
                                                      "type": "Literal",
                                                      "value": 24,
                                                      "start": 1082,
                                                      "end": 1084,
                                                      "loc": {
                                                          "start": {
                                                              "line": 33,
                                                              "column": 73
                                                          },
                                                          "end": {
                                                              "line": 33,
                                                              "column": 75
                                                          }
                                                      },
                                                      "raw": "24"
                                                  },
                                                  "operator": "|",
                                                  "start": 1073,
                                                  "end": 1084,
                                                  "loc": {
                                                      "start": {
                                                          "line": 33,
                                                          "column": 64
                                                      },
                                                      "end": {
                                                          "line": 33,
                                                          "column": 75
                                                      }
                                                  }
                                              },
                                              "start": 1069,
                                              "end": 1084,
                                              "loc": {
                                                  "start": {
                                                      "line": 33,
                                                      "column": 60
                                                  },
                                                  "end": {
                                                      "line": 33,
                                                      "column": 75
                                                  }
                                              }
                                          },
                                          "start": 1021,
                                          "end": 1137,
                                          "loc": {
                                              "start": {
                                                  "line": 33,
                                                  "column": 12
                                              },
                                              "end": {
                                                  "line": 35,
                                                  "column": 13
                                              }
                                          }
                                      },
                                      {
                                          "type": "ReturnStatement",
                                          "argument": {
                                              "type": "UnaryExpression",
                                              "operator": "+",
                                              "argument": {
                                                  "type": "Identifier",
                                                  "name": "m",
                                                  "start": 1158,
                                                  "end": 1159,
                                                  "loc": {
                                                      "start": {
                                                          "line": 36,
                                                          "column": 20
                                                      },
                                                      "end": {
                                                          "line": 36,
                                                          "column": 21
                                                      }
                                                  }
                                              },
                                              "prefix": true,
                                              "start": 1157,
                                              "end": 1159,
                                              "loc": {
                                                  "start": {
                                                      "line": 36,
                                                      "column": 19
                                                  },
                                                  "end": {
                                                      "line": 36,
                                                      "column": 21
                                                  }
                                              }
                                          },
                                          "start": 1150,
                                          "end": 1160,
                                          "loc": {
                                              "start": {
                                                  "line": 36,
                                                  "column": 12
                                              },
                                              "end": {
                                                  "line": 36,
                                                  "column": 22
                                              }
                                          }
                                      }
                                  ],
                                  "start": 838,
                                  "end": 1172,
                                  "loc": {
                                      "start": {
                                          "line": 28,
                                          "column": 27
                                      },
                                      "end": {
                                          "line": 37,
                                          "column": 11
                                      }
                                  }
                              },
                              "async": false,
                              "generator": false,
                              "expression": false,
                              "id": {
                                  "type": "Identifier",
                                  "name": "j",
                                  "start": 830,
                                  "end": 831,
                                  "loc": {
                                      "start": {
                                          "line": 28,
                                          "column": 19
                                      },
                                      "end": {
                                          "line": 28,
                                          "column": 20
                                      }
                                  }
                              },
                              "start": 821,
                              "end": 1172,
                              "loc": {
                                  "start": {
                                      "line": 28,
                                      "column": 10
                                  },
                                  "end": {
                                      "line": 37,
                                      "column": 11
                                  }
                              }
                          },
                          {
                              "type": "FunctionDeclaration",
                              "params": [
                                  {
                                      "type": "Identifier",
                                      "name": "k",
                                      "start": 1194,
                                      "end": 1195,
                                      "loc": {
                                          "start": {
                                              "line": 38,
                                              "column": 21
                                          },
                                          "end": {
                                              "line": 38,
                                              "column": 22
                                          }
                                      }
                                  },
                                  {
                                      "type": "Identifier",
                                      "name": "l",
                                      "start": 1197,
                                      "end": 1198,
                                      "loc": {
                                          "start": {
                                              "line": 38,
                                              "column": 24
                                          },
                                          "end": {
                                              "line": 38,
                                              "column": 25
                                          }
                                      }
                                  }
                              ],
                              "body": {
                                  "type": "BlockStatement",
                                  "body": [
                                      {
                                          "type": "ExpressionStatement",
                                          "expression": {
                                              "type": "AssignmentExpression",
                                              "left": {
                                                  "type": "Identifier",
                                                  "name": "k",
                                                  "start": 1214,
                                                  "end": 1215,
                                                  "loc": {
                                                      "start": {
                                                          "line": 39,
                                                          "column": 12
                                                      },
                                                      "end": {
                                                          "line": 39,
                                                          "column": 13
                                                      }
                                                  }
                                              },
                                              "operator": "=",
                                              "right": {
                                                  "type": "BinaryExpression",
                                                  "left": {
                                                      "type": "Identifier",
                                                      "name": "k",
                                                      "start": 1218,
                                                      "end": 1219,
                                                      "loc": {
                                                          "start": {
                                                              "line": 39,
                                                              "column": 16
                                                          },
                                                          "end": {
                                                              "line": 39,
                                                              "column": 17
                                                          }
                                                      }
                                                  },
                                                  "right": {
                                                      "type": "Literal",
                                                      "value": 26,
                                                      "start": 1220,
                                                      "end": 1222,
                                                      "loc": {
                                                          "start": {
                                                              "line": 39,
                                                              "column": 18
                                                          },
                                                          "end": {
                                                              "line": 39,
                                                              "column": 20
                                                          }
                                                      },
                                                      "raw": "26"
                                                  },
                                                  "operator": "|",
                                                  "start": 1218,
                                                  "end": 1222,
                                                  "loc": {
                                                      "start": {
                                                          "line": 39,
                                                          "column": 16
                                                      },
                                                      "end": {
                                                          "line": 39,
                                                          "column": 20
                                                      }
                                                  }
                                              },
                                              "start": 1214,
                                              "end": 1222,
                                              "loc": {
                                                  "start": {
                                                      "line": 39,
                                                      "column": 12
                                                  },
                                                  "end": {
                                                      "line": 39,
                                                      "column": 20
                                                  }
                                              }
                                          },
                                          "start": 1214,
                                          "end": 1223,
                                          "loc": {
                                              "start": {
                                                  "line": 39,
                                                  "column": 12
                                              },
                                              "end": {
                                                  "line": 39,
                                                  "column": 21
                                              }
                                          }
                                      },
                                      {
                                          "type": "ExpressionStatement",
                                          "expression": {
                                              "type": "AssignmentExpression",
                                              "left": {
                                                  "type": "Identifier",
                                                  "name": "l",
                                                  "start": 1236,
                                                  "end": 1237,
                                                  "loc": {
                                                      "start": {
                                                          "line": 40,
                                                          "column": 12
                                                      },
                                                      "end": {
                                                          "line": 40,
                                                          "column": 13
                                                      }
                                                  }
                                              },
                                              "operator": "=",
                                              "right": {
                                                  "type": "BinaryExpression",
                                                  "left": {
                                                      "type": "Identifier",
                                                      "name": "l",
                                                      "start": 1240,
                                                      "end": 1241,
                                                      "loc": {
                                                          "start": {
                                                              "line": 40,
                                                              "column": 16
                                                          },
                                                          "end": {
                                                              "line": 40,
                                                              "column": 17
                                                          }
                                                      }
                                                  },
                                                  "right": {
                                                      "type": "Literal",
                                                      "value": 27,
                                                      "start": 1242,
                                                      "end": 1244,
                                                      "loc": {
                                                          "start": {
                                                              "line": 40,
                                                              "column": 18
                                                          },
                                                          "end": {
                                                              "line": 40,
                                                              "column": 20
                                                          }
                                                      },
                                                      "raw": "27"
                                                  },
                                                  "operator": "|",
                                                  "start": 1240,
                                                  "end": 1244,
                                                  "loc": {
                                                      "start": {
                                                          "line": 40,
                                                          "column": 16
                                                      },
                                                      "end": {
                                                          "line": 40,
                                                          "column": 20
                                                      }
                                                  }
                                              },
                                              "start": 1236,
                                              "end": 1244,
                                              "loc": {
                                                  "start": {
                                                      "line": 40,
                                                      "column": 12
                                                  },
                                                  "end": {
                                                      "line": 40,
                                                      "column": 20
                                                  }
                                              }
                                          },
                                          "start": 1236,
                                          "end": 1245,
                                          "loc": {
                                              "start": {
                                                  "line": 40,
                                                  "column": 12
                                              },
                                              "end": {
                                                  "line": 40,
                                                  "column": 21
                                              }
                                          }
                                      },
                                      {
                                          "type": "ReturnStatement",
                                          "argument": {
                                              "type": "UnaryExpression",
                                              "operator": "+",
                                              "argument": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                      "type": "Identifier",
                                                      "name": "e",
                                                      "start": 1266,
                                                      "end": 1267,
                                                      "loc": {
                                                          "start": {
                                                              "line": 41,
                                                              "column": 20
                                                          },
                                                          "end": {
                                                              "line": 41,
                                                              "column": 21
                                                          }
                                                      }
                                                  },
                                                  "arguments": [
                                                      {
                                                          "type": "BinaryExpression",
                                                          "left": {
                                                              "type": "UnaryExpression",
                                                              "operator": "+",
                                                              "argument": {
                                                                  "type": "CallExpression",
                                                                  "callee": {
                                                                      "type": "Identifier",
                                                                      "name": "j",
                                                                      "start": 1269,
                                                                      "end": 1270,
                                                                      "loc": {
                                                                          "start": {
                                                                              "line": 41,
                                                                              "column": 23
                                                                          },
                                                                          "end": {
                                                                              "line": 41,
                                                                              "column": 24
                                                                          }
                                                                      }
                                                                  },
                                                                  "arguments": [
                                                                      {
                                                                          "type": "Identifier",
                                                                          "name": "k",
                                                                          "start": 1271,
                                                                          "end": 1272,
                                                                          "loc": {
                                                                              "start": {
                                                                                  "line": 41,
                                                                                  "column": 25
                                                                              },
                                                                              "end": {
                                                                                  "line": 41,
                                                                                  "column": 26
                                                                              }
                                                                          }
                                                                      },
                                                                      {
                                                                          "type": "Identifier",
                                                                          "name": "l",
                                                                          "start": 1274,
                                                                          "end": 1275,
                                                                          "loc": {
                                                                              "start": {
                                                                                  "line": 41,
                                                                                  "column": 28
                                                                              },
                                                                              "end": {
                                                                                  "line": 41,
                                                                                  "column": 29
                                                                              }
                                                                          }
                                                                      }
                                                                  ],
                                                                  "start": 1269,
                                                                  "end": 1276,
                                                                  "loc": {
                                                                      "start": {
                                                                          "line": 41,
                                                                          "column": 23
                                                                      },
                                                                      "end": {
                                                                          "line": 41,
                                                                          "column": 30
                                                                      }
                                                                  }
                                                              },
                                                              "prefix": true,
                                                              "start": 1268,
                                                              "end": 1276,
                                                              "loc": {
                                                                  "start": {
                                                                      "line": 41,
                                                                      "column": 22
                                                                  },
                                                                  "end": {
                                                                      "line": 41,
                                                                      "column": 30
                                                                  }
                                                              }
                                                          },
                                                          "right": {
                                                              "type": "UnaryExpression",
                                                              "operator": "+",
                                                              "argument": {
                                                                  "type": "BinaryExpression",
                                                                  "left": {
                                                                      "type": "BinaryExpression",
                                                                      "left": {
                                                                          "type": "Identifier",
                                                                          "name": "l",
                                                                          "start": 1282,
                                                                          "end": 1283,
                                                                          "loc": {
                                                                              "start": {
                                                                                  "line": 41,
                                                                                  "column": 36
                                                                              },
                                                                              "end": {
                                                                                  "line": 41,
                                                                                  "column": 37
                                                                              }
                                                                          }
                                                                      },
                                                                      "right": {
                                                                          "type": "Identifier",
                                                                          "name": "k",
                                                                          "start": 1286,
                                                                          "end": 1287,
                                                                          "loc": {
                                                                              "start": {
                                                                                  "line": 41,
                                                                                  "column": 40
                                                                              },
                                                                              "end": {
                                                                                  "line": 41,
                                                                                  "column": 41
                                                                              }
                                                                          }
                                                                      },
                                                                      "operator": "-",
                                                                      "start": 1282,
                                                                      "end": 1287,
                                                                      "loc": {
                                                                          "start": {
                                                                              "line": 41,
                                                                              "column": 36
                                                                          },
                                                                          "end": {
                                                                              "line": 41,
                                                                              "column": 41
                                                                          }
                                                                      }
                                                                  },
                                                                  "right": {
                                                                      "type": "Literal",
                                                                      "value": 28,
                                                                      "start": 1289,
                                                                      "end": 1291,
                                                                      "loc": {
                                                                          "start": {
                                                                              "line": 41,
                                                                              "column": 43
                                                                          },
                                                                          "end": {
                                                                              "line": 41,
                                                                              "column": 45
                                                                          }
                                                                      },
                                                                      "raw": "28"
                                                                  },
                                                                  "operator": "|",
                                                                  "start": 1281,
                                                                  "end": 1291,
                                                                  "loc": {
                                                                      "start": {
                                                                          "line": 41,
                                                                          "column": 35
                                                                      },
                                                                      "end": {
                                                                          "line": 41,
                                                                          "column": 45
                                                                      }
                                                                  }
                                                              },
                                                              "prefix": true,
                                                              "start": 1279,
                                                              "end": 1292,
                                                              "loc": {
                                                                  "start": {
                                                                      "line": 41,
                                                                      "column": 33
                                                                  },
                                                                  "end": {
                                                                      "line": 41,
                                                                      "column": 46
                                                                  }
                                                              }
                                                          },
                                                          "operator": "/",
                                                          "start": 1268,
                                                          "end": 1292,
                                                          "loc": {
                                                              "start": {
                                                                  "line": 41,
                                                                  "column": 22
                                                              },
                                                              "end": {
                                                                  "line": 41,
                                                                  "column": 46
                                                              }
                                                          }
                                                      }
                                                  ],
                                                  "start": 1266,
                                                  "end": 1293,
                                                  "loc": {
                                                      "start": {
                                                          "line": 41,
                                                          "column": 20
                                                      },
                                                      "end": {
                                                          "line": 41,
                                                          "column": 47
                                                      }
                                                  }
                                              },
                                              "prefix": true,
                                              "start": 1265,
                                              "end": 1293,
                                              "loc": {
                                                  "start": {
                                                      "line": 41,
                                                      "column": 19
                                                  },
                                                  "end": {
                                                      "line": 41,
                                                      "column": 47
                                                  }
                                              }
                                          },
                                          "start": 1258,
                                          "end": 1294,
                                          "loc": {
                                              "start": {
                                                  "line": 41,
                                                  "column": 12
                                              },
                                              "end": {
                                                  "line": 41,
                                                  "column": 48
                                              }
                                          }
                                      }
                                  ],
                                  "start": 1200,
                                  "end": 1306,
                                  "loc": {
                                      "start": {
                                          "line": 38,
                                          "column": 27
                                      },
                                      "end": {
                                          "line": 42,
                                          "column": 11
                                      }
                                  }
                              },
                              "async": false,
                              "generator": false,
                              "expression": false,
                              "id": {
                                  "type": "Identifier",
                                  "name": "p",
                                  "start": 1192,
                                  "end": 1193,
                                  "loc": {
                                      "start": {
                                          "line": 38,
                                          "column": 19
                                      },
                                      "end": {
                                          "line": 38,
                                          "column": 20
                                      }
                                  }
                              },
                              "start": 1183,
                              "end": 1306,
                              "loc": {
                                  "start": {
                                      "line": 38,
                                      "column": 10
                                  },
                                  "end": {
                                      "line": 42,
                                      "column": 11
                                  }
                              }
                          },
                          {
                              "type": "ReturnStatement",
                              "argument": {
                                  "type": "ObjectExpression",
                                  "properties": [
                                      {
                                          "type": "Property",
                                          "key": {
                                              "type": "Identifier",
                                              "name": "p",
                                              "start": 1326,
                                              "end": 1327,
                                              "loc": {
                                                  "start": {
                                                      "line": 43,
                                                      "column": 19
                                                  },
                                                  "end": {
                                                      "line": 43,
                                                      "column": 20
                                                  }
                                              }
                                          },
                                          "value": {
                                              "type": "Identifier",
                                              "name": "p",
                                              "start": 1329,
                                              "end": 1330,
                                              "loc": {
                                                  "start": {
                                                      "line": 43,
                                                      "column": 22
                                                  },
                                                  "end": {
                                                      "line": 43,
                                                      "column": 23
                                                  }
                                              }
                                          },
                                          "kind": "init",
                                          "computed": false,
                                          "method": false,
                                          "shorthand": false,
                                          "start": 1326,
                                          "end": 1330,
                                          "loc": {
                                              "start": {
                                                  "line": 43,
                                                  "column": 19
                                              },
                                              "end": {
                                                  "line": 43,
                                                  "column": 23
                                              }
                                          }
                                      }
                                  ],
                                  "start": 1324,
                                  "end": 1332,
                                  "loc": {
                                      "start": {
                                          "line": 43,
                                          "column": 17
                                      },
                                      "end": {
                                          "line": 43,
                                          "column": 25
                                      }
                                  }
                              },
                              "start": 1317,
                              "end": 1333,
                              "loc": {
                                  "start": {
                                      "line": 43,
                                      "column": 10
                                  },
                                  "end": {
                                      "line": 43,
                                      "column": 26
                                  }
                              }
                          }
                      ],
                      "start": 729,
                      "end": 1343,
                      "loc": {
                          "start": {
                              "line": 24,
                              "column": 28
                          },
                          "end": {
                              "line": 44,
                              "column": 9
                          }
                      }
                  },
                  "async": false,
                  "generator": false,
                  "expression": false,
                  "id": {
                      "type": "Identifier",
                      "name": "q",
                      "start": 718,
                      "end": 719,
                      "loc": {
                          "start": {
                              "line": 24,
                              "column": 17
                          },
                          "end": {
                              "line": 24,
                              "column": 18
                          }
                      }
                  },
                  "start": 709,
                  "end": 1343,
                  "loc": {
                      "start": {
                          "line": 24,
                          "column": 8
                      },
                      "end": {
                          "line": 44,
                          "column": 9
                      }
                  }
              }
          ],
          "sourceType": "script",
          "start": 0,
          "end": 1343,
          "loc": {
              "start": {
                  "line": 1,
                  "column": 0
              },
              "end": {
                  "line": 44,
                  "column": 9
              }
          }
      });
      });

      it('should parse "for (var {a, b} of c);"', () => {
        expect(parseScript('for (var {a, b} of c);', {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 22,
          "body": [
            {
              "type": "ForOfStatement",
              "start": 0,
              "end": 22,
              "await": false,
              "left": {
                "type": "VariableDeclaration",
                "start": 5,
                "end": 15,
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "start": 9,
                    "end": 15,
                    "id": {
                      "type": "ObjectPattern",
                      "start": 9,
                      "end": 15,
                      "properties": [
                        {
                          "type": "Property",
                          "start": 10,
                          "end": 11,
                          "method": false,
                          "shorthand": true,
                          "computed": false,
                          "key": {
                            "type": "Identifier",
                            "start": 10,
                            "end": 11,
                            "name": "a"
                          },
                          "kind": "init",
                          "value": {
                            "type": "Identifier",
                            "start": 10,
                            "end": 11,
                            "name": "a"
                          }
                        },
                        {
                          "type": "Property",
                          "start": 13,
                          "end": 14,
                          "method": false,
                          "shorthand": true,
                          "computed": false,
                          "key": {
                            "type": "Identifier",
                            "start": 13,
                            "end": 14,
                            "name": "b"
                          },
                          "kind": "init",
                          "value": {
                            "type": "Identifier",
                            "start": 13,
                            "end": 14,
                            "name": "b"
                          }
                        }
                      ]
                    },
                    "init": null
                  }
                ],
                "kind": "var"
              },
              "right": {
                "type": "Identifier",
                "start": 19,
                "end": 20,
                "name": "c"
              },
              "body": {
                "type": "EmptyStatement",
                "start": 21,
                "end": 22
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "new a(b, ...c, d)"', () => {
        expect(parseScript('new a(b, ...c, d)', {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 17,
          "body": [
            {
              "type": "ExpressionStatement",
              "start": 0,
              "end": 17,
              "expression": {
                "type": "NewExpression",
                "start": 0,
                "end": 17,
                "callee": {
                  "type": "Identifier",
                  "start": 4,
                  "end": 5,
                  "name": "a"
                },
                "arguments": [
                  {
                    "type": "Identifier",
                    "start": 6,
                    "end": 7,
                    "name": "b"
                  },
                  {
                    "type": "SpreadElement",
                    "start": 9,
                    "end": 13,
                    "argument": {
                      "type": "Identifier",
                      "start": 12,
                      "end": 13,
                      "name": "c"
                    }
                  },
                  {
                    "type": "Identifier",
                    "start": 15,
                    "end": 16,
                    "name": "d"
                  }
                ]
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "if(1)/  foo/"', () => {
        expect(parseScript('if(1)/  foo/', {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 12,
          "body": [
            {
              "type": "IfStatement",
              "start": 0,
              "end": 12,
              "test": {
                "type": "Literal",
                "start": 3,
                "end": 4,
                "value": 1,
                "raw": "1"
              },
              "consequent": {
                "type": "ExpressionStatement",
                "start": 5,
                "end": 12,
                "expression": {
                  "type": "Literal",
                  "start": 5,
                  "end": 12,
                  "value": /  foo/,
                  "raw": "/  foo/",
                  "regex": {
                    "pattern": "  foo",
                    "flags": ""
                  }
                }
              },
              "alternate": null
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "function *a({yield: b}){}"', () => {
        expect(parseScript('function *a({yield: b}){}', {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "body": [
              {
                  "type": "FunctionDeclaration",
                  "params": [
                      {
                          "type": "ObjectPattern",
                          "properties": [
                              {
                                  "type": "Property",
                                  "kind": "init",
                                  "key": {
                                      "type": "Identifier",
                                      "name": "yield",
                                      "start": 13,
                                      "end": 18
                                  },
                                  "computed": false,
                                  "value": {
                                      "type": "Identifier",
                                      "name": "b",
                                      "start": 20,
                                      "end": 21
                                  },
                                  "method": false,
                                  "shorthand": false,
                                  "start": 13,
                                  "end": 21
                              }
                          ],
                          "start": 12,
                          "end": 22
                      }
                  ],
                  "body": {
                      "type": "BlockStatement",
                      "body": [],
                      "start": 23,
                      "end": 25
                  },
                  "async": false,
                  "generator": true,
                  "expression": false,
                  "id": {
                      "type": "Identifier",
                      "name": "a",
                      "start": 10,
                      "end": 11
                  },
                  "start": 0,
                  "end": 25
              }
          ],
          "sourceType": "script",
          "start": 0,
          "end": 25
      });
      });

      it('should parse "var yield = function yield(){};"', () => {
        expect(parseScript('var yield = function yield(){};', {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 31,
          "body": [
            {
              "type": "VariableDeclaration",
              "start": 0,
              "end": 31,
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "start": 4,
                  "end": 30,
                  "id": {
                    "type": "Identifier",
                    "start": 4,
                    "end": 9,
                    "name": "yield"
                  },
                  "init": {
                    "type": "FunctionExpression",
                    "start": 12,
                    "end": 30,
                    "id": {
                      "type": "Identifier",
                      "start": 21,
                      "end": 26,
                      "name": "yield"
                    },
                    "generator": false,
                    "expression": false,
                    "async": false,
                    "params": [],
                    "body": {
                      "type": "BlockStatement",
                      "start": 28,
                      "end": 30,
                      "body": []
                    }
                  }
                }
              ],
              "kind": "var"
            }
          ],
          "sourceType": "script"
        });
      });
      
      it('should parse "((a))()"', () => {
        expect(parseScript('((a))()', {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 7,
          "body": [
            {
              "type": "ExpressionStatement",
              "start": 0,
              "end": 7,
              "expression": {
                "type": "CallExpression",
                "start": 0,
                "end": 7,
                "callee": {
                  "type": "Identifier",
                  "start": 2,
                  "end": 3,
                  "name": "a"
                },
                "arguments": []
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "var a = /[\uD834\uDF06-\uD834\uDF08a-z]/u"', () => {
        expect(parseScript('var a = /[\\uD834\\uDF06-\\uD834\\uDF08a-z]/u', {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 41,
          "body": [
            {
              "type": "VariableDeclaration",
              "start": 0,
              "end": 41,
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "start": 4,
                  "end": 41,
                  "id": {
                    "type": "Identifier",
                    "start": 4,
                    "end": 5,
                    "name": "a"
                  },
                  "init": {
                    "type": "Literal",
                    "start": 8,
                    "end": 41,
                    "value": /[\uD834\uDF06-\uD834\uDF08a-z]/u,
                    "raw": "/[\\uD834\\uDF06-\\uD834\\uDF08a-z]/u",
                    "regex": {
                      "pattern": "[\\uD834\\uDF06-\\uD834\\uDF08a-z]",
                      "flags": "u"
                    }
                  }
                }
              ],
              "kind": "var"
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "var eval = 1, arguments = 2"', () => {
        expect(parseScript('var eval = 1, arguments = 2', {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 27,
          "body": [
            {
              "type": "VariableDeclaration",
              "start": 0,
              "end": 27,
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "start": 4,
                  "end": 12,
                  "id": {
                    "type": "Identifier",
                    "start": 4,
                    "end": 8,
                    "name": "eval"
                  },
                  "init": {
                    "type": "Literal",
                    "start": 11,
                    "end": 12,
                    "value": 1,
                    "raw": "1"
                  }
                },
                {
                  "type": "VariableDeclarator",
                  "start": 14,
                  "end": 27,
                  "id": {
                    "type": "Identifier",
                    "start": 14,
                    "end": 23,
                    "name": "arguments"
                  },
                  "init": {
                    "type": "Literal",
                    "start": 26,
                    "end": 27,
                    "value": 2,
                    "raw": "2"
                  }
                }
              ],
              "kind": "var"
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "function *a(){yield void 0}"', () => {
        expect(parseScript('function *a(){yield void 0}', {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 27,
          "body": [
            {
              "type": "FunctionDeclaration",
              "start": 0,
              "end": 27,
              "id": {
                "type": "Identifier",
                "start": 10,
                "end": 11,
                "name": "a"
              },
              "generator": true,
              "expression": false,
              "async": false,
              "params": [],
              "body": {
                "type": "BlockStatement",
                "start": 13,
                "end": 27,
                "body": [
                  {
                    "type": "ExpressionStatement",
                    "start": 14,
                    "end": 26,
                    "expression": {
                      "type": "YieldExpression",
                      "start": 14,
                      "end": 26,
                      "delegate": false,
                      "argument": {
                        "type": "UnaryExpression",
                        "start": 20,
                        "end": 26,
                        "operator": "void",
                        "prefix": true,
                        "argument": {
                          "type": "Literal",
                          "start": 25,
                          "end": 26,
                          "value": 0,
                          "raw": "0"
                        }
                      }
                    }
                  }
                ]
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "class a {;b(){};c(){};}"', () => {
        expect(parseScript('class a {;b(){};c(){};}', {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 23,
          "body": [
            {
              "type": "ClassDeclaration",
              "start": 0,
              "end": 23,
              "id": {
                "type": "Identifier",
                "start": 6,
                "end": 7,
                "name": "a"
              },
              "superClass": null,
              "body": {
                "type": "ClassBody",
                "start": 8,
                "end": 23,
                "body": [
                  {
                    "type": "MethodDefinition",
                    "start": 10,
                    "end": 15,
                    "computed": false,
                    "key": {
                      "type": "Identifier",
                      "start": 10,
                      "end": 11,
                      "name": "b"
                    },
                    "static": false,
                    "kind": "method",
                    "value": {
                      "type": "FunctionExpression",
                      "start": 11,
                      "end": 15,
                      "id": null,
                      "generator": false,
                      "expression": false,
                      "async": false,
                      "params": [],
                      "body": {
                        "type": "BlockStatement",
                        "start": 13,
                        "end": 15,
                        "body": []
                      }
                    }
                  },
                  {
                    "type": "MethodDefinition",
                    "start": 16,
                    "end": 21,
                    "computed": false,
                    "key": {
                      "type": "Identifier",
                      "start": 16,
                      "end": 17,
                      "name": "c"
                    },
                    "static": false,
                    "kind": "method",
                    "value": {
                      "type": "FunctionExpression",
                      "start": 17,
                      "end": 21,
                      "id": null,
                      "generator": false,
                      "expression": false,
                      "async": false,
                      "params": [],
                      "body": {
                        "type": "BlockStatement",
                        "start": 19,
                        "end": 21,
                        "body": []
                      }
                    }
                  }
                ]
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "switch(a){case 1:default:}"', () => {
        expect(parseScript('switch(a){case 1:default:}', {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 26,
          "body": [
            {
              "type": "SwitchStatement",
              "start": 0,
              "end": 26,
              "discriminant": {
                "type": "Identifier",
                "start": 7,
                "end": 8,
                "name": "a"
              },
              "cases": [
                {
                  "type": "SwitchCase",
                  "start": 10,
                  "end": 17,
                  "consequent": [],
                  "test": {
                    "type": "Literal",
                    "start": 15,
                    "end": 16,
                    "value": 1,
                    "raw": "1"
                  }
                },
                {
                  "type": "SwitchCase",
                  "start": 17,
                  "end": 25,
                  "consequent": [],
                  "test": null
                }
              ]
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "(function({a}){})"', () => {
        expect(parseScript('(function({a}){})', {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 17,
          "body": [
            {
              "type": "ExpressionStatement",
              "start": 0,
              "end": 17,
              "expression": {
                "type": "FunctionExpression",
                "start": 1,
                "end": 16,
                "id": null,
                "generator": false,
                "expression": false,
                "async": false,
                "params": [
                  {
                    "type": "ObjectPattern",
                    "start": 10,
                    "end": 13,
                    "properties": [
                      {
                        "type": "Property",
                        "start": 11,
                        "end": 12,
                        "method": false,
                        "shorthand": true,
                        "computed": false,
                        "key": {
                          "type": "Identifier",
                          "start": 11,
                          "end": 12,
                          "name": "a"
                        },
                        "kind": "init",
                        "value": {
                          "type": "Identifier",
                          "start": 11,
                          "end": 12,
                          "name": "a"
                        }
                      }
                    ]
                  }
                ],
                "body": {
                  "type": "BlockStatement",
                  "start": 14,
                  "end": 16,
                  "body": []
                }
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "for(let a in a);"', () => {
        expect(parseScript('for(let a in a);', {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 16,
          "body": [
            {
              "type": "ForInStatement",
              "start": 0,
              "end": 16,
              "left": {
                "type": "VariableDeclaration",
                "start": 4,
                "end": 9,
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "start": 8,
                    "end": 9,
                    "id": {
                      "type": "Identifier",
                      "start": 8,
                      "end": 9,
                      "name": "a"
                    },
                    "init": null
                  }
                ],
                "kind": "let"
              },
              "right": {
                "type": "Identifier",
                "start": 13,
                "end": 14,
                "name": "a"
              },
              "body": {
                "type": "EmptyStatement",
                "start": 15,
                "end": 16
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "for(var a = 1, b = 2;;);"', () => {
        expect(parseScript('for(var a = 1, b = 2;;);', {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 24,
          "body": [
            {
              "type": "ForStatement",
              "start": 0,
              "end": 24,
              "init": {
                "type": "VariableDeclaration",
                "start": 4,
                "end": 20,
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "start": 8,
                    "end": 13,
                    "id": {
                      "type": "Identifier",
                      "start": 8,
                      "end": 9,
                      "name": "a"
                    },
                    "init": {
                      "type": "Literal",
                      "start": 12,
                      "end": 13,
                      "value": 1,
                      "raw": "1"
                    }
                  },
                  {
                    "type": "VariableDeclarator",
                    "start": 15,
                    "end": 20,
                    "id": {
                      "type": "Identifier",
                      "start": 15,
                      "end": 16,
                      "name": "b"
                    },
                    "init": {
                      "type": "Literal",
                      "start": 19,
                      "end": 20,
                      "value": 2,
                      "raw": "2"
                    }
                  }
                ],
                "kind": "var"
              },
              "test": null,
              "update": null,
              "body": {
                "type": "EmptyStatement",
                "start": 23,
                "end": 24
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "a > b"', () => {
        expect(parseScript('a > b', {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 5,
          "body": [
            {
              "type": "ExpressionStatement",
              "start": 0,
              "end": 5,
              "expression": {
                "type": "BinaryExpression",
                "start": 0,
                "end": 5,
                "left": {
                  "type": "Identifier",
                  "start": 0,
                  "end": 1,
                  "name": "a"
                },
                "operator": ">",
                "right": {
                  "type": "Identifier",
                  "start": 4,
                  "end": 5,
                  "name": "b"
                }
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "void "test string""', () => {
        expect(parseScript('void "test string"', {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 18,
          "body": [
            {
              "type": "ExpressionStatement",
              "start": 0,
              "end": 18,
              "expression": {
                "type": "UnaryExpression",
                "start": 0,
                "end": 18,
                "operator": "void",
                "prefix": true,
                "argument": {
                  "type": "Literal",
                  "start": 5,
                  "end": 18,
                  "value": "test string",
                  "raw": "\"test string\""
                }
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "[a.b=b] = c"', () => {
        expect(parseScript('[a.b=b] = c', {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 11,
          "body": [
            {
              "type": "ExpressionStatement",
              "start": 0,
              "end": 11,
              "expression": {
                "type": "AssignmentExpression",
                "start": 0,
                "end": 11,
                "operator": "=",
                "left": {
                  "type": "ArrayPattern",
                  "start": 0,
                  "end": 7,
                  "elements": [
                    {
                      "type": "AssignmentPattern",
                      "start": 1,
                      "end": 6,
                      "left": {
                        "type": "MemberExpression",
                        "start": 1,
                        "end": 4,
                        "object": {
                          "type": "Identifier",
                          "start": 1,
                          "end": 2,
                          "name": "a"
                        },
                        "property": {
                          "type": "Identifier",
                          "start": 3,
                          "end": 4,
                          "name": "b"
                        },
                        "computed": false
                      },
                      "right": {
                        "type": "Identifier",
                        "start": 5,
                        "end": 6,
                        "name": "b"
                      }
                    }
                  ]
                },
                "right": {
                  "type": "Identifier",
                  "start": 10,
                  "end": 11,
                  "name": "c"
                }
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "let [[]]=1"', () => {
        expect(parseScript('let [[]]=1', {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 10,
          "body": [
            {
              "type": "VariableDeclaration",
              "start": 0,
              "end": 10,
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "start": 4,
                  "end": 10,
                  "id": {
                    "type": "ArrayPattern",
                    "start": 4,
                    "end": 8,
                    "elements": [
                      {
                        "type": "ArrayPattern",
                        "start": 5,
                        "end": 7,
                        "elements": []
                      }
                    ]
                  },
                  "init": {
                    "type": "Literal",
                    "start": 9,
                    "end": 10,
                    "value": 1,
                    "raw": "1"
                  }
                }
              ],
              "kind": "let"
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "for(let a = 1, b = 2;;);"', () => {
        expect(parseScript('for(let a = 1, b = 2;;);', {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 24,
          "body": [
            {
              "type": "ForStatement",
              "start": 0,
              "end": 24,
              "init": {
                "type": "VariableDeclaration",
                "start": 4,
                "end": 20,
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "start": 8,
                    "end": 13,
                    "id": {
                      "type": "Identifier",
                      "start": 8,
                      "end": 9,
                      "name": "a"
                    },
                    "init": {
                      "type": "Literal",
                      "start": 12,
                      "end": 13,
                      "value": 1,
                      "raw": "1"
                    }
                  },
                  {
                    "type": "VariableDeclarator",
                    "start": 15,
                    "end": 20,
                    "id": {
                      "type": "Identifier",
                      "start": 15,
                      "end": 16,
                      "name": "b"
                    },
                    "init": {
                      "type": "Literal",
                      "start": 19,
                      "end": 20,
                      "value": 2,
                      "raw": "2"
                    }
                  }
                ],
                "kind": "let"
              },
              "test": null,
              "update": null,
              "body": {
                "type": "EmptyStatement",
                "start": 23,
                "end": 24
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "a[b]"', () => {
        expect(parseScript('a[b]', {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 4,
          "body": [
            {
              "type": "ExpressionStatement",
              "start": 0,
              "end": 4,
              "expression": {
                "type": "MemberExpression",
                "start": 0,
                "end": 4,
                "object": {
                  "type": "Identifier",
                  "start": 0,
                  "end": 1,
                  "name": "a"
                },
                "property": {
                  "type": "Identifier",
                  "start": 2,
                  "end": 3,
                  "name": "b"
                },
                "computed": true
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "(class {get a() {}})"', () => {
        expect(parseScript(`switch (1) {
          case 2: a();
          case 3+4: b(); break;
          case 5+6+7: c();
        }`, {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 104,
          "body": [
            {
              "type": "SwitchStatement",
              "start": 0,
              "end": 104,
              "discriminant": {
                "type": "Literal",
                "start": 8,
                "end": 9,
                "value": 1,
                "raw": "1"
              },
              "cases": [
                {
                  "type": "SwitchCase",
                  "start": 23,
                  "end": 35,
                  "consequent": [
                    {
                      "type": "ExpressionStatement",
                      "start": 31,
                      "end": 35,
                      "expression": {
                        "type": "CallExpression",
                        "start": 31,
                        "end": 34,
                        "callee": {
                          "type": "Identifier",
                          "start": 31,
                          "end": 32,
                          "name": "a"
                        },
                        "arguments": []
                      }
                    }
                  ],
                  "test": {
                    "type": "Literal",
                    "start": 28,
                    "end": 29,
                    "value": 2,
                    "raw": "2"
                  }
                },
                {
                  "type": "SwitchCase",
                  "start": 46,
                  "end": 67,
                  "consequent": [
                    {
                      "type": "ExpressionStatement",
                      "start": 56,
                      "end": 60,
                      "expression": {
                        "type": "CallExpression",
                        "start": 56,
                        "end": 59,
                        "callee": {
                          "type": "Identifier",
                          "start": 56,
                          "end": 57,
                          "name": "b"
                        },
                        "arguments": []
                      }
                    },
                    {
                      "type": "BreakStatement",
                      "start": 61,
                      "end": 67,
                      "label": null
                    }
                  ],
                  "test": {
                    "type": "BinaryExpression",
                    "start": 51,
                    "end": 54,
                    "left": {
                      "type": "Literal",
                      "start": 51,
                      "end": 52,
                      "value": 3,
                      "raw": "3"
                    },
                    "operator": "+",
                    "right": {
                      "type": "Literal",
                      "start": 53,
                      "end": 54,
                      "value": 4,
                      "raw": "4"
                    }
                  }
                },
                {
                  "type": "SwitchCase",
                  "start": 78,
                  "end": 94,
                  "consequent": [
                    {
                      "type": "ExpressionStatement",
                      "start": 90,
                      "end": 94,
                      "expression": {
                        "type": "CallExpression",
                        "start": 90,
                        "end": 93,
                        "callee": {
                          "type": "Identifier",
                          "start": 90,
                          "end": 91,
                          "name": "c"
                        },
                        "arguments": []
                      }
                    }
                  ],
                  "test": {
                    "type": "BinaryExpression",
                    "start": 83,
                    "end": 88,
                    "left": {
                      "type": "BinaryExpression",
                      "start": 83,
                      "end": 86,
                      "left": {
                        "type": "Literal",
                        "start": 83,
                        "end": 84,
                        "value": 5,
                        "raw": "5"
                      },
                      "operator": "+",
                      "right": {
                        "type": "Literal",
                        "start": 85,
                        "end": 86,
                        "value": 6,
                        "raw": "6"
                      }
                    },
                    "operator": "+",
                    "right": {
                      "type": "Literal",
                      "start": 87,
                      "end": 88,
                      "value": 7,
                      "raw": "7"
                    }
                  }
                }
              ]
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "function a() { return "<!--HTML-->comment in<!--string literal-->"; }"', () => {
        expect(parseScript('function a() { return "<!--HTML-->comment in<!--string literal-->"; }', {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 69,
          "body": [
            {
              "type": "FunctionDeclaration",
              "start": 0,
              "end": 69,
              "id": {
                "type": "Identifier",
                "start": 9,
                "end": 10,
                "name": "a"
              },
              "generator": false,
              "expression": false,
              "async": false,
              "params": [],
              "body": {
                "type": "BlockStatement",
                "start": 13,
                "end": 69,
                "body": [
                  {
                    "type": "ReturnStatement",
                    "start": 15,
                    "end": 67,
                    "argument": {
                      "type": "Literal",
                      "start": 22,
                      "end": 66,
                      "value": "<!--HTML-->comment in<!--string literal-->",
                      "raw": "\"<!--HTML-->comment in<!--string literal-->\""
                    }
                  }
                ]
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "(class {get a() {}})"', () => {
        expect(parseScript(`a = "b".c;
        a = ("b" + "d")["e" + "f"];
        a = g.c;
        a = ("b" + g).c;`, {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 88,
          "body": [
            {
              "type": "ExpressionStatement",
              "start": 0,
              "end": 10,
              "expression": {
                "type": "AssignmentExpression",
                "start": 0,
                "end": 9,
                "operator": "=",
                "left": {
                  "type": "Identifier",
                  "start": 0,
                  "end": 1,
                  "name": "a"
                },
                "right": {
                  "type": "MemberExpression",
                  "start": 4,
                  "end": 9,
                  "object": {
                    "type": "Literal",
                    "start": 4,
                    "end": 7,
                    "value": "b",
                    "raw": "\"b\""
                  },
                  "property": {
                    "type": "Identifier",
                    "start": 8,
                    "end": 9,
                    "name": "c"
                  },
                  "computed": false
                }
              }
            },
            {
              "type": "ExpressionStatement",
              "start": 19,
              "end": 46,
              "expression": {
                "type": "AssignmentExpression",
                "start": 19,
                "end": 45,
                "operator": "=",
                "left": {
                  "type": "Identifier",
                  "start": 19,
                  "end": 20,
                  "name": "a"
                },
                "right": {
                  "type": "MemberExpression",
                  "start": 23,
                  "end": 45,
                  "object": {
                    "type": "BinaryExpression",
                    "start": 24,
                    "end": 33,
                    "left": {
                      "type": "Literal",
                      "start": 24,
                      "end": 27,
                      "value": "b",
                      "raw": "\"b\""
                    },
                    "operator": "+",
                    "right": {
                      "type": "Literal",
                      "start": 30,
                      "end": 33,
                      "value": "d",
                      "raw": "\"d\""
                    }
                  },
                  "property": {
                    "type": "BinaryExpression",
                    "start": 35,
                    "end": 44,
                    "left": {
                      "type": "Literal",
                      "start": 35,
                      "end": 38,
                      "value": "e",
                      "raw": "\"e\""
                    },
                    "operator": "+",
                    "right": {
                      "type": "Literal",
                      "start": 41,
                      "end": 44,
                      "value": "f",
                      "raw": "\"f\""
                    }
                  },
                  "computed": true
                }
              }
            },
            {
              "type": "ExpressionStatement",
              "start": 55,
              "end": 63,
              "expression": {
                "type": "AssignmentExpression",
                "start": 55,
                "end": 62,
                "operator": "=",
                "left": {
                  "type": "Identifier",
                  "start": 55,
                  "end": 56,
                  "name": "a"
                },
                "right": {
                  "type": "MemberExpression",
                  "start": 59,
                  "end": 62,
                  "object": {
                    "type": "Identifier",
                    "start": 59,
                    "end": 60,
                    "name": "g"
                  },
                  "property": {
                    "type": "Identifier",
                    "start": 61,
                    "end": 62,
                    "name": "c"
                  },
                  "computed": false
                }
              }
            },
            {
              "type": "ExpressionStatement",
              "start": 72,
              "end": 88,
              "expression": {
                "type": "AssignmentExpression",
                "start": 72,
                "end": 87,
                "operator": "=",
                "left": {
                  "type": "Identifier",
                  "start": 72,
                  "end": 73,
                  "name": "a"
                },
                "right": {
                  "type": "MemberExpression",
                  "start": 76,
                  "end": 87,
                  "object": {
                    "type": "BinaryExpression",
                    "start": 77,
                    "end": 84,
                    "left": {
                      "type": "Literal",
                      "start": 77,
                      "end": 80,
                      "value": "b",
                      "raw": "\"b\""
                    },
                    "operator": "+",
                    "right": {
                      "type": "Identifier",
                      "start": 83,
                      "end": 84,
                      "name": "g"
                    }
                  },
                  "property": {
                    "type": "Identifier",
                    "start": 86,
                    "end": 87,
                    "name": "c"
                  },
                  "computed": false
                }
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "/**/ function a() {function b() {}}"', () => {
        expect(parseScript('/**/ function a() {function b() {}}', {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 35,
          "body": [
            {
              "type": "FunctionDeclaration",
              "start": 5,
              "end": 35,
              "id": {
                "type": "Identifier",
                "start": 14,
                "end": 15,
                "name": "a"
              },
              "generator": false,
              "expression": false,
              "async": false,
              "params": [],
              "body": {
                "type": "BlockStatement",
                "start": 18,
                "end": 35,
                "body": [
                  {
                    "type": "FunctionDeclaration",
                    "start": 19,
                    "end": 34,
                    "id": {
                      "type": "Identifier",
                      "start": 28,
                      "end": 29,
                      "name": "b"
                    },
                    "generator": false,
                    "expression": false,
                    "async": false,
                    "params": [],
                    "body": {
                      "type": "BlockStatement",
                      "start": 32,
                      "end": 34,
                      "body": []
                    }
                  }
                ]
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "(class {get a() {}})"', () => {
        expect(parseScript(`var a = {};
        a.b = 1;
        a.c = 2;
        d.e(a.c);`, {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 63,
          "body": [
            {
              "type": "VariableDeclaration",
              "start": 0,
              "end": 11,
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "start": 4,
                  "end": 10,
                  "id": {
                    "type": "Identifier",
                    "start": 4,
                    "end": 5,
                    "name": "a"
                  },
                  "init": {
                    "type": "ObjectExpression",
                    "start": 8,
                    "end": 10,
                    "properties": []
                  }
                }
              ],
              "kind": "var"
            },
            {
              "type": "ExpressionStatement",
              "start": 20,
              "end": 28,
              "expression": {
                "type": "AssignmentExpression",
                "start": 20,
                "end": 27,
                "operator": "=",
                "left": {
                  "type": "MemberExpression",
                  "start": 20,
                  "end": 23,
                  "object": {
                    "type": "Identifier",
                    "start": 20,
                    "end": 21,
                    "name": "a"
                  },
                  "property": {
                    "type": "Identifier",
                    "start": 22,
                    "end": 23,
                    "name": "b"
                  },
                  "computed": false
                },
                "right": {
                  "type": "Literal",
                  "start": 26,
                  "end": 27,
                  "value": 1,
                  "raw": "1"
                }
              }
            },
            {
              "type": "ExpressionStatement",
              "start": 37,
              "end": 45,
              "expression": {
                "type": "AssignmentExpression",
                "start": 37,
                "end": 44,
                "operator": "=",
                "left": {
                  "type": "MemberExpression",
                  "start": 37,
                  "end": 40,
                  "object": {
                    "type": "Identifier",
                    "start": 37,
                    "end": 38,
                    "name": "a"
                  },
                  "property": {
                    "type": "Identifier",
                    "start": 39,
                    "end": 40,
                    "name": "c"
                  },
                  "computed": false
                },
                "right": {
                  "type": "Literal",
                  "start": 43,
                  "end": 44,
                  "value": 2,
                  "raw": "2"
                }
              }
            },
            {
              "type": "ExpressionStatement",
              "start": 54,
              "end": 63,
              "expression": {
                "type": "CallExpression",
                "start": 54,
                "end": 62,
                "callee": {
                  "type": "MemberExpression",
                  "start": 54,
                  "end": 57,
                  "object": {
                    "type": "Identifier",
                    "start": 54,
                    "end": 55,
                    "name": "d"
                  },
                  "property": {
                    "type": "Identifier",
                    "start": 56,
                    "end": 57,
                    "name": "e"
                  },
                  "computed": false
                },
                "arguments": [
                  {
                    "type": "MemberExpression",
                    "start": 58,
                    "end": 61,
                    "object": {
                      "type": "Identifier",
                      "start": 58,
                      "end": 59,
                      "name": "a"
                    },
                    "property": {
                      "type": "Identifier",
                      "start": 60,
                      "end": 61,
                      "name": "c"
                    },
                    "computed": false
                  }
                ]
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "with(1);"', () => {
        expect(parseScript('with(1);', {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 8,
          "body": [
            {
              "type": "WithStatement",
              "start": 0,
              "end": 8,
              "object": {
                "type": "Literal",
                "start": 5,
                "end": 6,
                "value": 1,
                "raw": "1"
              },
              "body": {
                "type": "EmptyStatement",
                "start": 7,
                "end": 8
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "a => "b""', () => {
        expect(parseScript('a => "b"', {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 8,
          "body": [
            {
              "type": "ExpressionStatement",
              "start": 0,
              "end": 8,
              "expression": {
                "type": "ArrowFunctionExpression",
                "start": 0,
                "end": 8,
                "id": null,
                "generator": false,
                "expression": true,
                "async": false,
                "params": [
                  {
                    "type": "Identifier",
                    "start": 0,
                    "end": 1,
                    "name": "a"
                  }
                ],
                "body": {
                  "type": "Literal",
                  "start": 5,
                  "end": 8,
                  "value": "b",
                  "raw": "\"b\""
                }
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "a+(b(), c(), d())  // do not transform because of global getter"', () => {
        expect(parseScript('a+(b(), c(), d())  // do not transform because of global getter', {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 63,
          "body": [
            {
              "type": "ExpressionStatement",
              "start": 0,
              "end": 17,
              "expression": {
                "type": "BinaryExpression",
                "start": 0,
                "end": 17,
                "left": {
                  "type": "Identifier",
                  "start": 0,
                  "end": 1,
                  "name": "a"
                },
                "operator": "+",
                "right": {
                  "type": "SequenceExpression",
                  "start": 3,
                  "end": 16,
                  "expressions": [
                    {
                      "type": "CallExpression",
                      "start": 3,
                      "end": 6,
                      "callee": {
                        "type": "Identifier",
                        "start": 3,
                        "end": 4,
                        "name": "b"
                      },
                      "arguments": []
                    },
                    {
                      "type": "CallExpression",
                      "start": 8,
                      "end": 11,
                      "callee": {
                        "type": "Identifier",
                        "start": 8,
                        "end": 9,
                        "name": "c"
                      },
                      "arguments": []
                    },
                    {
                      "type": "CallExpression",
                      "start": 13,
                      "end": 16,
                      "callee": {
                        "type": "Identifier",
                        "start": 13,
                        "end": 14,
                        "name": "d"
                      },
                      "arguments": []
                    }
                  ]
                }
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "var {[a]: b} = {y}', () => {
        expect(parseScript('var {[a]: b} = {y}', {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 18,
          "body": [
            {
              "type": "VariableDeclaration",
              "start": 0,
              "end": 18,
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "start": 4,
                  "end": 18,
                  "id": {
                    "type": "ObjectPattern",
                    "start": 4,
                    "end": 12,
                    "properties": [
                      {
                        "type": "Property",
                        "start": 5,
                        "end": 11,
                        "method": false,
                        "shorthand": false,
                        "computed": true,
                        "key": {
                          "type": "Identifier",
                          "start": 6,
                          "end": 7,
                          "name": "a"
                        },
                        "value": {
                          "type": "Identifier",
                          "start": 10,
                          "end": 11,
                          "name": "b"
                        },
                        "kind": "init"
                      }
                    ]
                  },
                  "init": {
                    "type": "ObjectExpression",
                    "start": 15,
                    "end": 18,
                    "properties": [
                      {
                        "type": "Property",
                        "start": 16,
                        "end": 17,
                        "method": false,
                        "shorthand": true,
                        "computed": false,
                        "key": {
                          "type": "Identifier",
                          "start": 16,
                          "end": 17,
                          "name": "y"
                        },
                        "kind": "init",
                        "value": {
                          "type": "Identifier",
                          "start": 16,
                          "end": 17,
                          "name": "y"
                        }
                      }
                    ]
                  }
                }
              ],
              "kind": "var"
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "var [{ a, b }, ...c] = d', () => {
        expect(parseScript('var [{ a, b }, ...c] = d', {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 24,
          "body": [
            {
              "type": "VariableDeclaration",
              "start": 0,
              "end": 24,
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "start": 4,
                  "end": 24,
                  "id": {
                    "type": "ArrayPattern",
                    "start": 4,
                    "end": 20,
                    "elements": [
                      {
                        "type": "ObjectPattern",
                        "start": 5,
                        "end": 13,
                        "properties": [
                          {
                            "type": "Property",
                            "start": 7,
                            "end": 8,
                            "method": false,
                            "shorthand": true,
                            "computed": false,
                            "key": {
                              "type": "Identifier",
                              "start": 7,
                              "end": 8,
                              "name": "a"
                            },
                            "kind": "init",
                            "value": {
                              "type": "Identifier",
                              "start": 7,
                              "end": 8,
                              "name": "a"
                            }
                          },
                          {
                            "type": "Property",
                            "start": 10,
                            "end": 11,
                            "method": false,
                            "shorthand": true,
                            "computed": false,
                            "key": {
                              "type": "Identifier",
                              "start": 10,
                              "end": 11,
                              "name": "b"
                            },
                            "kind": "init",
                            "value": {
                              "type": "Identifier",
                              "start": 10,
                              "end": 11,
                              "name": "b"
                            }
                          }
                        ]
                      },
                      {
                        "type": "RestElement",
                        "start": 15,
                        "end": 19,
                        "argument": {
                          "type": "Identifier",
                          "start": 18,
                          "end": 19,
                          "name": "c"
                        }
                      }
                    ]
                  },
                  "init": {
                    "type": "Identifier",
                    "start": 23,
                    "end": 24,
                    "name": "d"
                  }
                }
              ],
              "kind": "var"
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "a<!--b', () => {
        expect(parseScript('a<!--b', {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 6,
          "body": [
            {
              "type": "ExpressionStatement",
              "start": 0,
              "end": 1,
              "expression": {
                "type": "Identifier",
                "start": 0,
                "end": 1,
                "name": "a"
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "({get __proto__() {}, set __proto__(a) {}})', () => {
        expect(parseScript('({get __proto__() {}, set __proto__(a) {}})', {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 43,
          "body": [
            {
              "type": "ExpressionStatement",
              "start": 0,
              "end": 43,
              "expression": {
                "type": "ObjectExpression",
                "start": 1,
                "end": 42,
                "properties": [
                  {
                    "type": "Property",
                    "start": 2,
                    "end": 20,
                    "method": false,
                    "shorthand": false,
                    "computed": false,
                    "key": {
                      "type": "Identifier",
                      "start": 6,
                      "end": 15,
                      "name": "__proto__"
                    },
                    "kind": "get",
                    "value": {
                      "type": "FunctionExpression",
                      "start": 15,
                      "end": 20,
                      "id": null,
                      "generator": false,
                      "expression": false,
                      "async": false,
                      "params": [],
                      "body": {
                        "type": "BlockStatement",
                        "start": 18,
                        "end": 20,
                        "body": []
                      }
                    }
                  },
                  {
                    "type": "Property",
                    "start": 22,
                    "end": 41,
                    "method": false,
                    "shorthand": false,
                    "computed": false,
                    "key": {
                      "type": "Identifier",
                      "start": 26,
                      "end": 35,
                      "name": "__proto__"
                    },
                    "kind": "set",
                    "value": {
                      "type": "FunctionExpression",
                      "start": 35,
                      "end": 41,
                      "id": null,
                      "generator": false,
                      "expression": false,
                      "async": false,
                      "params": [
                        {
                          "type": "Identifier",
                          "start": 36,
                          "end": 37,
                          "name": "a"
                        }
                      ],
                      "body": {
                        "type": "BlockStatement",
                        "start": 39,
                        "end": 41,
                        "body": []
                      }
                    }
                  }
                ]
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "function *a() { b.yield(); }', () => {
        expect(parseScript('function *a() { b.yield(); }', {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "body": [
              {
                  "type": "FunctionDeclaration",
                  "params": [],
                  "body": {
                      "type": "BlockStatement",
                      "body": [
                          {
                              "type": "ExpressionStatement",
                              "expression": {
                                  "type": "CallExpression",
                                  "arguments": [],
                                  "callee": {
                                      "type": "MemberExpression",
                                      "object": {
                                          "type": "Identifier",
                                          "name": "b",
                                          "start": 16,
                                          "end": 17
                                      },
                                      "computed": false,
                                      "property": {
                                          "type": "Identifier",
                                          "name": "yield",
                                          "start": 18,
                                          "end": 23
                                      },
                                      "start": 16,
                                      "end": 23
                                  },
                                  "start": 16,
                                  "end": 25
                              },
                              "start": 16,
                              "end": 26
                          }
                      ],
                      "start": 14,
                      "end": 28
                  },
                  "async": false,
                  "generator": true,
                  "expression": false,
                  "id": {
                      "type": "Identifier",
                      "name": "a",
                      "start": 10,
                      "end": 11
                  },
                  "start": 0,
                  "end": 28
              }
          ],
          "sourceType": "script",
          "start": 0,
          "end": 28
      });
      });

      it('should parse "function a(b = new.target){}', () => {
        expect(parseScript('function a(b = new.target){}', {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 28,
          "body": [
            {
              "type": "FunctionDeclaration",
              "start": 0,
              "end": 28,
              "id": {
                "type": "Identifier",
                "start": 9,
                "end": 10,
                "name": "a"
              },
              "generator": false,
              "expression": false,
              "async": false,
              "params": [
                {
                  "type": "AssignmentPattern",
                  "start": 11,
                  "end": 25,
                  "left": {
                    "type": "Identifier",
                    "start": 11,
                    "end": 12,
                    "name": "b"
                  },
                  "right": {
                    "type": "MetaProperty",
                    "start": 15,
                    "end": 25,
                    "meta": {
                      "type": "Identifier",
                      "start": 15,
                      "end": 18,
                      "name": "new"
                    },
                    "property": {
                      "type": "Identifier",
                      "start": 19,
                      "end": 25,
                      "name": "target"
                    }
                  }
                }
              ],
              "body": {
                "type": "BlockStatement",
                "start": 26,
                "end": 28,
                "body": []
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "+ /test/', () => {
        expect(parseScript('+ /test/', {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 8,
          "body": [
            {
              "type": "ExpressionStatement",
              "start": 0,
              "end": 8,
              "expression": {
                "type": "UnaryExpression",
                "start": 0,
                "end": 8,
                "operator": "+",
                "prefix": true,
                "argument": {
                  "type": "Literal",
                  "start": 2,
                  "end": 8,
                  "value": /test/,
                  "raw": "/test/",
                  "regex": {
                    "pattern": "test",
                    "flags": ""
                  }
                }
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse complex', () => {
        expect(parseScript(`function a() {
        }
        var b = "is a valid variable name";
        b = { b: "is ok" };
        c.b;
        b: d()`, {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 124,
          "body": [
            {
              "type": "FunctionDeclaration",
              "start": 0,
              "end": 24,
              "id": {
                "type": "Identifier",
                "start": 9,
                "end": 10,
                "name": "a"
              },
              "generator": false,
              "expression": false,
              "async": false,
              "params": [],
              "body": {
                "type": "BlockStatement",
                "start": 13,
                "end": 24,
                "body": []
              }
            },
            {
              "type": "VariableDeclaration",
              "start": 33,
              "end": 68,
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "start": 37,
                  "end": 67,
                  "id": {
                    "type": "Identifier",
                    "start": 37,
                    "end": 38,
                    "name": "b"
                  },
                  "init": {
                    "type": "Literal",
                    "start": 41,
                    "end": 67,
                    "value": "is a valid variable name",
                    "raw": "\"is a valid variable name\""
                  }
                }
              ],
              "kind": "var"
            },
            {
              "type": "ExpressionStatement",
              "start": 77,
              "end": 96,
              "expression": {
                "type": "AssignmentExpression",
                "start": 77,
                "end": 95,
                "operator": "=",
                "left": {
                  "type": "Identifier",
                  "start": 77,
                  "end": 78,
                  "name": "b"
                },
                "right": {
                  "type": "ObjectExpression",
                  "start": 81,
                  "end": 95,
                  "properties": [
                    {
                      "type": "Property",
                      "start": 83,
                      "end": 93,
                      "method": false,
                      "shorthand": false,
                      "computed": false,
                      "key": {
                        "type": "Identifier",
                        "start": 83,
                        "end": 84,
                        "name": "b"
                      },
                      "value": {
                        "type": "Literal",
                        "start": 86,
                        "end": 93,
                        "value": "is ok",
                        "raw": "\"is ok\""
                      },
                      "kind": "init"
                    }
                  ]
                }
              }
            },
            {
              "type": "ExpressionStatement",
              "start": 105,
              "end": 109,
              "expression": {
                "type": "MemberExpression",
                "start": 105,
                "end": 108,
                "object": {
                  "type": "Identifier",
                  "start": 105,
                  "end": 106,
                  "name": "c"
                },
                "property": {
                  "type": "Identifier",
                  "start": 107,
                  "end": 108,
                  "name": "b"
                },
                "computed": false
              }
            },
            {
              "type": "LabeledStatement",
              "start": 118,
              "end": 124,
              "body": {
                "type": "ExpressionStatement",
                "start": 121,
                "end": 124,
                "expression": {
                  "type": "CallExpression",
                  "start": 121,
                  "end": 124,
                  "callee": {
                    "type": "Identifier",
                    "start": 121,
                    "end": 122,
                    "name": "d"
                  },
                  "arguments": []
                }
              },
              "label": {
                "type": "Identifier",
                "start": 118,
                "end": 119,
                "name": "b"
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "("\\u{0000000000F8}")', () => {
        expect(parseScript('("\\u{0000000000F8}")', {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 20,
          "body": [
            {
              "type": "ExpressionStatement",
              "start": 0,
              "end": 20,
              "expression": {
                "type": "Literal",
                "start": 1,
                "end": 19,
                "value": "ø",
                "raw": "\"\\u{0000000000F8}\""
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse nested multiple function declaration', () => {
        expect(parseScript(`function a() {
          function b() {
          }
          function c() {
          }
          function d() {
          }
      }`, {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "body": [
              {
                  "type": "FunctionDeclaration",
                  "params": [],
                  "body": {
                      "type": "BlockStatement",
                      "body": [
                          {
                              "type": "FunctionDeclaration",
                              "params": [],
                              "body": {
                                  "type": "BlockStatement",
                                  "body": [],
                                  "start": 38,
                                  "end": 51
                              },
                              "async": false,
                              "generator": false,
                              "expression": false,
                              "id": {
                                  "type": "Identifier",
                                  "name": "b",
                                  "start": 34,
                                  "end": 35
                              },
                              "start": 25,
                              "end": 51
                          },
                          {
                              "type": "FunctionDeclaration",
                              "params": [],
                              "body": {
                                  "type": "BlockStatement",
                                  "body": [],
                                  "start": 75,
                                  "end": 88
                              },
                              "async": false,
                              "generator": false,
                              "expression": false,
                              "id": {
                                  "type": "Identifier",
                                  "name": "c",
                                  "start": 71,
                                  "end": 72
                              },
                              "start": 62,
                              "end": 88
                          },
                          {
                              "type": "FunctionDeclaration",
                              "params": [],
                              "body": {
                                  "type": "BlockStatement",
                                  "body": [],
                                  "start": 112,
                                  "end": 125
                              },
                              "async": false,
                              "generator": false,
                              "expression": false,
                              "id": {
                                  "type": "Identifier",
                                  "name": "d",
                                  "start": 108,
                                  "end": 109
                              },
                              "start": 99,
                              "end": 125
                          }
                      ],
                      "start": 13,
                      "end": 133
                  },
                  "async": false,
                  "generator": false,
                  "expression": false,
                  "id": {
                      "type": "Identifier",
                      "name": "a",
                      "start": 9,
                      "end": 10
                  },
                  "start": 0,
                  "end": 133
              }
          ],
          "sourceType": "script",
          "start": 0,
          "end": 133
      });
      });

      it('should parse "let [a,] = 1;"', () => {
        expect(parseScript('let [a,] = 1;', {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 13,
          "body": [
            {
              "type": "VariableDeclaration",
              "start": 0,
              "end": 13,
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "start": 4,
                  "end": 12,
                  "id": {
                    "type": "ArrayPattern",
                    "start": 4,
                    "end": 8,
                    "elements": [
                      {
                        "type": "Identifier",
                        "start": 5,
                        "end": 6,
                        "name": "a"
                      }
                    ]
                  },
                  "init": {
                    "type": "Literal",
                    "start": 11,
                    "end": 12,
                    "value": 1,
                    "raw": "1"
                  }
                }
              ],
              "kind": "let"
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "eval => "use strict"', () => {
        expect(parseScript('eval => "use strict"', {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 20,
          "body": [
            {
              "type": "ExpressionStatement",
              "start": 0,
              "end": 20,
              "expression": {
                "type": "ArrowFunctionExpression",
                "start": 0,
                "end": 20,
                "id": null,
                "generator": false,
                "expression": true,
                "async": false,
                "params": [
                  {
                    "type": "Identifier",
                    "start": 0,
                    "end": 4,
                    "name": "eval"
                  }
                ],
                "body": {
                  "type": "Literal",
                  "start": 8,
                  "end": 20,
                  "value": "use strict",
                  "raw": "\"use strict\""
                }
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "({["a" + "b"]: 1})', () => {
        expect(parseScript('({["a" + "b"]: 1})', {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 18,
          "body": [
            {
              "type": "ExpressionStatement",
              "start": 0,
              "end": 18,
              "expression": {
                "type": "ObjectExpression",
                "start": 1,
                "end": 17,
                "properties": [
                  {
                    "type": "Property",
                    "start": 2,
                    "end": 16,
                    "method": false,
                    "shorthand": false,
                    "computed": true,
                    "key": {
                      "type": "BinaryExpression",
                      "start": 3,
                      "end": 12,
                      "left": {
                        "type": "Literal",
                        "start": 3,
                        "end": 6,
                        "value": "a",
                        "raw": "\"a\""
                      },
                      "operator": "+",
                      "right": {
                        "type": "Literal",
                        "start": 9,
                        "end": 12,
                        "value": "b",
                        "raw": "\"b\""
                      }
                    },
                    "value": {
                      "type": "Literal",
                      "start": 15,
                      "end": 16,
                      "value": 1,
                      "raw": "1"
                    },
                    "kind": "init"
                  }
                ]
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "typeof /test/', () => {
        expect(parseScript('typeof /test/', {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "body": [
              {
                  "type": "ExpressionStatement",
                  "expression": {
                      "type": "UnaryExpression",
                      "operator": "typeof",
                      "argument": {
                          "type": "Literal",
                          "value": /test/,
                          "regex": {
                              "pattern": "test",
                              "flags": ""
                          },
                          "start": 7,
                          "end": 13,
                          "raw": "/test/"
                      },
                      "prefix": true,
                      "start": 0,
                      "end": 13
                  },
                  "start": 0,
                  "end": 13
              }
          ],
          "sourceType": "script",
          "start": 0,
          "end": 13
      });
      });

      it('should parse "a`hello ${b}`', () => {
        expect(parseScript('a`hello ${b}`', {
            ranges: false,
            raw: true
        })).to.eql({
          "type": "Program",
          "body": [
            {
              "type": "ExpressionStatement",
              "expression": {
                "type": "TaggedTemplateExpression",
                "tag": {
                  "type": "Identifier",
                  "name": "a"
                },
                "quasi": {
                  "type": "TemplateLiteral",
                  "expressions": [
                    {
                      "type": "Identifier",
                      "name": "b"
                    }
                  ],
                  "quasis": [
                    {
                      "type": "TemplateElement",
                      "value": {
                        "raw": "hello ",
                        "cooked": "hello "
                      },
                      "tail": false
                    },
                    {
                      "type": "TemplateElement",
                      "value": {
                        "raw": "",
                        "cooked": ""
                      },
                      "tail": true
                    }
                  ]
                }
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "a||(b||(c||(d||(e||f))))', () => {
        expect(parseScript('a||(b||(c||(d||(e||f))))', {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 24,
          "body": [
            {
              "type": "ExpressionStatement",
              "start": 0,
              "end": 24,
              "expression": {
                "type": "LogicalExpression",
                "start": 0,
                "end": 24,
                "left": {
                  "type": "Identifier",
                  "start": 0,
                  "end": 1,
                  "name": "a"
                },
                "operator": "||",
                "right": {
                  "type": "LogicalExpression",
                  "start": 4,
                  "end": 23,
                  "left": {
                    "type": "Identifier",
                    "start": 4,
                    "end": 5,
                    "name": "b"
                  },
                  "operator": "||",
                  "right": {
                    "type": "LogicalExpression",
                    "start": 8,
                    "end": 22,
                    "left": {
                      "type": "Identifier",
                      "start": 8,
                      "end": 9,
                      "name": "c"
                    },
                    "operator": "||",
                    "right": {
                      "type": "LogicalExpression",
                      "start": 12,
                      "end": 21,
                      "left": {
                        "type": "Identifier",
                        "start": 12,
                        "end": 13,
                        "name": "d"
                      },
                      "operator": "||",
                      "right": {
                        "type": "LogicalExpression",
                        "start": 16,
                        "end": 20,
                        "left": {
                          "type": "Identifier",
                          "start": 16,
                          "end": 17,
                          "name": "e"
                        },
                        "operator": "||",
                        "right": {
                          "type": "Identifier",
                          "start": 19,
                          "end": 20,
                          "name": "f"
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "for(let a of [1,2]) 3', () => {
        expect(parseScript('for(let a of [1,2]) 3', {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "body": [
              {
                  "type": "ForOfStatement",
                  "body": {
                      "type": "ExpressionStatement",
                      "expression": {
                          "type": "Literal",
                          "value": 3,
                          "start": 20,
                          "end": 21,
                          "raw": "3"
                      },
                      "start": 20,
                      "end": 21
                  },
                  "left": {
                      "type": "VariableDeclaration",
                      "declarations": [
                          {
                              "type": "VariableDeclarator",
                              "init": null,
                              "id": {
                                  "type": "Identifier",
                                  "name": "a",
                                  "start": 8,
                                  "end": 9
                              },
                              "start": 8,
                              "end": 9
                          }
                      ],
                      "kind": "let",
                      "start": 4,
                      "end": 9
                  },
                  "right": {
                      "type": "ArrayExpression",
                      "elements": [
                          {
                              "type": "Literal",
                              "value": 1,
                              "start": 14,
                              "end": 15,
                              "raw": "1"
                          },
                          {
                              "type": "Literal",
                              "value": 2,
                              "start": 16,
                              "end": 17,
                              "raw": "2"
                          }
                      ],
                      "start": 13,
                      "end": 18
                  },
                  "await": false,
                  "start": 0,
                  "end": 21
              }
          ],
          "sourceType": "script",
          "start": 0,
          "end": 21
      });
      });

      it('should parse "a(`${b} + ${c} = ${b + c}`)', () => {
        expect(parseScript('a(`${b} + ${c} = ${b + c}`)', {
            ranges: false,
            raw: true
        })).to.eql({
          "type": "Program",
          "body": [
            {
              "type": "ExpressionStatement",
              "expression": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "a"
                },
                "arguments": [
                  {
                    "type": "TemplateLiteral",
                    "expressions": [
                      {
                        "type": "Identifier",
                        "name": "b"
                      },
                      {
                        "type": "Identifier",
                        "name": "c"
                      },
                      {
                        "type": "BinaryExpression",
                        "left": {
                          "type": "Identifier",
                          "name": "b"
                        },
                        "operator": "+",
                        "right": {
                          "type": "Identifier",
                          "name": "c"
                        }
                      }
                    ],
                    "quasis": [
                      {
                        "type": "TemplateElement",
                        "value": {
                          "raw": "",
                          "cooked": ""
                        },
                        "tail": false
                      },
                      {
                        "type": "TemplateElement",
                        "value": {
                          "raw": " + ",
                          "cooked": " + "
                        },
                        "tail": false
                      },
                      {
                        "type": "TemplateElement",
                        "value": {
                          "raw": " = ",
                          "cooked": " = "
                        },
                        "tail": false
                      },
                      {
                        "type": "TemplateElement",
                        "value": {
                          "raw": "",
                          "cooked": ""
                        },
                        "tail": true
                      }
                    ]
                  }
                ]
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "({ "a": 1 })"', () => {
        expect(parseScript('({ "a": 1 })', {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 12,
          "body": [
            {
              "type": "ExpressionStatement",
              "start": 0,
              "end": 12,
              "expression": {
                "type": "ObjectExpression",
                "start": 1,
                "end": 11,
                "properties": [
                  {
                    "type": "Property",
                    "start": 3,
                    "end": 9,
                    "method": false,
                    "shorthand": false,
                    "computed": false,
                    "key": {
                      "type": "Literal",
                      "start": 3,
                      "end": 6,
                      "value": "a",
                      "raw": "\"a\""
                    },
                    "value": {
                      "type": "Literal",
                      "start": 8,
                      "end": 9,
                      "value": 1,
                      "raw": "1"
                    },
                    "kind": "init"
                  }
                ]
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "((((((((((((((((((((((((((((((((((((((((a)))))))))))))))))))))))))))))))))))))))) = 1', () => {
        expect(parseScript('((((((((((((((((((((((((((((((((((((((((a)))))))))))))))))))))))))))))))))))))))) = 1', {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 85,
          "body": [
            {
              "type": "ExpressionStatement",
              "start": 0,
              "end": 85,
              "expression": {
                "type": "AssignmentExpression",
                "start": 0,
                "end": 85,
                "operator": "=",
                "left": {
                  "type": "Identifier",
                  "start": 40,
                  "end": 41,
                  "name": "a"
                },
                "right": {
                  "type": "Literal",
                  "start": 84,
                  "end": 85,
                  "value": 1,
                  "raw": "1"
                }
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "var {[a]: b} = {y}', () => {
        expect(parseScript(`a['0'];
        a['1'];
        a['00'];
        a['0x20'];`, {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 59,
          "body": [
            {
              "type": "ExpressionStatement",
              "start": 0,
              "end": 7,
              "expression": {
                "type": "MemberExpression",
                "start": 0,
                "end": 6,
                "object": {
                  "type": "Identifier",
                  "start": 0,
                  "end": 1,
                  "name": "a"
                },
                "property": {
                  "type": "Literal",
                  "start": 2,
                  "end": 5,
                  "value": "0",
                  "raw": "'0'"
                },
                "computed": true
              }
            },
            {
              "type": "ExpressionStatement",
              "start": 16,
              "end": 23,
              "expression": {
                "type": "MemberExpression",
                "start": 16,
                "end": 22,
                "object": {
                  "type": "Identifier",
                  "start": 16,
                  "end": 17,
                  "name": "a"
                },
                "property": {
                  "type": "Literal",
                  "start": 18,
                  "end": 21,
                  "value": "1",
                  "raw": "'1'"
                },
                "computed": true
              }
            },
            {
              "type": "ExpressionStatement",
              "start": 32,
              "end": 40,
              "expression": {
                "type": "MemberExpression",
                "start": 32,
                "end": 39,
                "object": {
                  "type": "Identifier",
                  "start": 32,
                  "end": 33,
                  "name": "a"
                },
                "property": {
                  "type": "Literal",
                  "start": 34,
                  "end": 38,
                  "value": "00",
                  "raw": "'00'"
                },
                "computed": true
              }
            },
            {
              "type": "ExpressionStatement",
              "start": 49,
              "end": 59,
              "expression": {
                "type": "MemberExpression",
                "start": 49,
                "end": 58,
                "object": {
                  "type": "Identifier",
                  "start": 49,
                  "end": 50,
                  "name": "a"
                },
                "property": {
                  "type": "Literal",
                  "start": 51,
                  "end": 57,
                  "value": "0x20",
                  "raw": "'0x20'"
                },
                "computed": true
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "a[1].b', () => {
        expect(parseScript('a[1].b', {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 6,
          "body": [
            {
              "type": "ExpressionStatement",
              "start": 0,
              "end": 6,
              "expression": {
                "type": "MemberExpression",
                "start": 0,
                "end": 6,
                "object": {
                  "type": "MemberExpression",
                  "start": 0,
                  "end": 4,
                  "object": {
                    "type": "Identifier",
                    "start": 0,
                    "end": 1,
                    "name": "a"
                  },
                  "property": {
                    "type": "Literal",
                    "start": 2,
                    "end": 3,
                    "value": 1,
                    "raw": "1"
                  },
                  "computed": true
                },
                "property": {
                  "type": "Identifier",
                  "start": 5,
                  "end": 6,
                  "name": "b"
                },
                "computed": false
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "a = { set false(b) { c = b } }', () => {
        expect(parseScript('a = { set false(b) { c = b } }', {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 30,
          "body": [
            {
              "type": "ExpressionStatement",
              "start": 0,
              "end": 30,
              "expression": {
                "type": "AssignmentExpression",
                "start": 0,
                "end": 30,
                "operator": "=",
                "left": {
                  "type": "Identifier",
                  "start": 0,
                  "end": 1,
                  "name": "a"
                },
                "right": {
                  "type": "ObjectExpression",
                  "start": 4,
                  "end": 30,
                  "properties": [
                    {
                      "type": "Property",
                      "start": 6,
                      "end": 28,
                      "method": false,
                      "shorthand": false,
                      "computed": false,
                      "key": {
                        "type": "Identifier",
                        "start": 10,
                        "end": 15,
                        "name": "false"
                      },
                      "kind": "set",
                      "value": {
                        "type": "FunctionExpression",
                        "start": 15,
                        "end": 28,
                        "id": null,
                        "generator": false,
                        "expression": false,
                        "async": false,
                        "params": [
                          {
                            "type": "Identifier",
                            "start": 16,
                            "end": 17,
                            "name": "b"
                          }
                        ],
                        "body": {
                          "type": "BlockStatement",
                          "start": 19,
                          "end": 28,
                          "body": [
                            {
                              "type": "ExpressionStatement",
                              "start": 21,
                              "end": 26,
                              "expression": {
                                "type": "AssignmentExpression",
                                "start": 21,
                                "end": 26,
                                "operator": "=",
                                "left": {
                                  "type": "Identifier",
                                  "start": 21,
                                  "end": 22,
                                  "name": "c"
                                },
                                "right": {
                                  "type": "Identifier",
                                  "start": 25,
                                  "end": 26,
                                  "name": "b"
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "var {[a]: b} = {y}', () => {
        expect(parseScript(`a = typeof 1;
        b = typeof 'c';
        d = typeof [];
        e = typeof {};
        f = typeof /./;
        g = typeof false;
        h = typeof function(){};
        i = typeof j;`, {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 188,
          "body": [
            {
              "type": "ExpressionStatement",
              "start": 0,
              "end": 13,
              "expression": {
                "type": "AssignmentExpression",
                "start": 0,
                "end": 12,
                "operator": "=",
                "left": {
                  "type": "Identifier",
                  "start": 0,
                  "end": 1,
                  "name": "a"
                },
                "right": {
                  "type": "UnaryExpression",
                  "start": 4,
                  "end": 12,
                  "operator": "typeof",
                  "prefix": true,
                  "argument": {
                    "type": "Literal",
                    "start": 11,
                    "end": 12,
                    "value": 1,
                    "raw": "1"
                  }
                }
              }
            },
            {
              "type": "ExpressionStatement",
              "start": 22,
              "end": 37,
              "expression": {
                "type": "AssignmentExpression",
                "start": 22,
                "end": 36,
                "operator": "=",
                "left": {
                  "type": "Identifier",
                  "start": 22,
                  "end": 23,
                  "name": "b"
                },
                "right": {
                  "type": "UnaryExpression",
                  "start": 26,
                  "end": 36,
                  "operator": "typeof",
                  "prefix": true,
                  "argument": {
                    "type": "Literal",
                    "start": 33,
                    "end": 36,
                    "value": "c",
                    "raw": "'c'"
                  }
                }
              }
            },
            {
              "type": "ExpressionStatement",
              "start": 46,
              "end": 60,
              "expression": {
                "type": "AssignmentExpression",
                "start": 46,
                "end": 59,
                "operator": "=",
                "left": {
                  "type": "Identifier",
                  "start": 46,
                  "end": 47,
                  "name": "d"
                },
                "right": {
                  "type": "UnaryExpression",
                  "start": 50,
                  "end": 59,
                  "operator": "typeof",
                  "prefix": true,
                  "argument": {
                    "type": "ArrayExpression",
                    "start": 57,
                    "end": 59,
                    "elements": []
                  }
                }
              }
            },
            {
              "type": "ExpressionStatement",
              "start": 69,
              "end": 83,
              "expression": {
                "type": "AssignmentExpression",
                "start": 69,
                "end": 82,
                "operator": "=",
                "left": {
                  "type": "Identifier",
                  "start": 69,
                  "end": 70,
                  "name": "e"
                },
                "right": {
                  "type": "UnaryExpression",
                  "start": 73,
                  "end": 82,
                  "operator": "typeof",
                  "prefix": true,
                  "argument": {
                    "type": "ObjectExpression",
                    "start": 80,
                    "end": 82,
                    "properties": []
                  }
                }
              }
            },
            {
              "type": "ExpressionStatement",
              "start": 92,
              "end": 107,
              "expression": {
                "type": "AssignmentExpression",
                "start": 92,
                "end": 106,
                "operator": "=",
                "left": {
                  "type": "Identifier",
                  "start": 92,
                  "end": 93,
                  "name": "f"
                },
                "right": {
                  "type": "UnaryExpression",
                  "start": 96,
                  "end": 106,
                  "operator": "typeof",
                  "prefix": true,
                  "argument": {
                    "type": "Literal",
                    "start": 103,
                    "end": 106,
                    "value": /./,
                    "raw": "/./",
                    "regex": {
                      "pattern": ".",
                      "flags": ""
                    }
                  }
                }
              }
            },
            {
              "type": "ExpressionStatement",
              "start": 116,
              "end": 133,
              "expression": {
                "type": "AssignmentExpression",
                "start": 116,
                "end": 132,
                "operator": "=",
                "left": {
                  "type": "Identifier",
                  "start": 116,
                  "end": 117,
                  "name": "g"
                },
                "right": {
                  "type": "UnaryExpression",
                  "start": 120,
                  "end": 132,
                  "operator": "typeof",
                  "prefix": true,
                  "argument": {
                    "type": "Literal",
                    "start": 127,
                    "end": 132,
                    "value": false,
                    "raw": "false"
                  }
                }
              }
            },
            {
              "type": "ExpressionStatement",
              "start": 142,
              "end": 166,
              "expression": {
                "type": "AssignmentExpression",
                "start": 142,
                "end": 165,
                "operator": "=",
                "left": {
                  "type": "Identifier",
                  "start": 142,
                  "end": 143,
                  "name": "h"
                },
                "right": {
                  "type": "UnaryExpression",
                  "start": 146,
                  "end": 165,
                  "operator": "typeof",
                  "prefix": true,
                  "argument": {
                    "type": "FunctionExpression",
                    "start": 153,
                    "end": 165,
                    "id": null,
                    "generator": false,
                    "expression": false,
                    "async": false,
                    "params": [],
                    "body": {
                      "type": "BlockStatement",
                      "start": 163,
                      "end": 165,
                      "body": []
                    }
                  }
                }
              }
            },
            {
              "type": "ExpressionStatement",
              "start": 175,
              "end": 188,
              "expression": {
                "type": "AssignmentExpression",
                "start": 175,
                "end": 187,
                "operator": "=",
                "left": {
                  "type": "Identifier",
                  "start": 175,
                  "end": 176,
                  "name": "i"
                },
                "right": {
                  "type": "UnaryExpression",
                  "start": 179,
                  "end": 187,
                  "operator": "typeof",
                  "prefix": true,
                  "argument": {
                    "type": "Identifier",
                    "start": 186,
                    "end": 187,
                    "name": "j"
                  }
                }
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "[a,a,,...a]=1;', () => {
        expect(parseScript('[a,a,,...a]=1;', {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 14,
          "body": [
            {
              "type": "ExpressionStatement",
              "start": 0,
              "end": 14,
              "expression": {
                "type": "AssignmentExpression",
                "start": 0,
                "end": 13,
                "operator": "=",
                "left": {
                  "type": "ArrayPattern",
                  "start": 0,
                  "end": 11,
                  "elements": [
                    {
                      "type": "Identifier",
                      "start": 1,
                      "end": 2,
                      "name": "a"
                    },
                    {
                      "type": "Identifier",
                      "start": 3,
                      "end": 4,
                      "name": "a"
                    },
                    null,
                    {
                      "type": "RestElement",
                      "start": 6,
                      "end": 10,
                      "argument": {
                        "type": "Identifier",
                        "start": 9,
                        "end": 10,
                        "name": "a"
                      }
                    }
                  ]
                },
                "right": {
                  "type": "Literal",
                  "start": 12,
                  "end": 13,
                  "value": 1,
                  "raw": "1"
                }
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "var {[a]: b} = {y}', () => {
        expect(parseScript(`{ throw a/* Multiline
          Comment */a; }`, {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 46,
          "body": [
            {
              "type": "BlockStatement",
              "start": 0,
              "end": 46,
              "body": [
                {
                  "type": "ThrowStatement",
                  "start": 2,
                  "end": 9,
                  "argument": {
                    "type": "Identifier",
                    "start": 8,
                    "end": 9,
                    "name": "a"
                  }
                },
                {
                  "type": "ExpressionStatement",
                  "start": 42,
                  "end": 44,
                  "expression": {
                    "type": "Identifier",
                    "start": 42,
                    "end": 43,
                    "name": "a"
                  }
                }
              ]
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "class a extends b { c() { ({d: super[e]} = f) } }', () => {
        expect(parseScript('class a extends b { c() { ({d: super[e]} = f) } }', {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 49,
          "body": [
            {
              "type": "ClassDeclaration",
              "start": 0,
              "end": 49,
              "id": {
                "type": "Identifier",
                "start": 6,
                "end": 7,
                "name": "a"
              },
              "superClass": {
                "type": "Identifier",
                "start": 16,
                "end": 17,
                "name": "b"
              },
              "body": {
                "type": "ClassBody",
                "start": 18,
                "end": 49,
                "body": [
                  {
                    "type": "MethodDefinition",
                    "start": 20,
                    "end": 47,
                    "computed": false,
                    "key": {
                      "type": "Identifier",
                      "start": 20,
                      "end": 21,
                      "name": "c"
                    },
                    "static": false,
                    "kind": "method",
                    "value": {
                      "type": "FunctionExpression",
                      "start": 21,
                      "end": 47,
                      "id": null,
                      "generator": false,
                      "expression": false,
                      "async": false,
                      "params": [],
                      "body": {
                        "type": "BlockStatement",
                        "start": 24,
                        "end": 47,
                        "body": [
                          {
                            "type": "ExpressionStatement",
                            "start": 26,
                            "end": 45,
                            "expression": {
                              "type": "AssignmentExpression",
                              "start": 27,
                              "end": 44,
                              "operator": "=",
                              "left": {
                                "type": "ObjectPattern",
                                "start": 27,
                                "end": 40,
                                "properties": [
                                  {
                                    "type": "Property",
                                    "start": 28,
                                    "end": 39,
                                    "method": false,
                                    "shorthand": false,
                                    "computed": false,
                                    "key": {
                                      "type": "Identifier",
                                      "start": 28,
                                      "end": 29,
                                      "name": "d"
                                    },
                                    "value": {
                                      "type": "MemberExpression",
                                      "start": 31,
                                      "end": 39,
                                      "object": {
                                        "type": "Super",
                                        "start": 31,
                                        "end": 36
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "start": 37,
                                        "end": 38,
                                        "name": "e"
                                      },
                                      "computed": true
                                    },
                                    "kind": "init"
                                  }
                                ]
                              },
                              "right": {
                                "type": "Identifier",
                                "start": 43,
                                "end": 44,
                                "name": "f"
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                ]
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "(a = b("100")) <= a ', () => {
        expect(parseScript('(a = b("100")) <= a ', {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 20,
          "body": [
            {
              "type": "ExpressionStatement",
              "start": 0,
              "end": 19,
              "expression": {
                "type": "BinaryExpression",
                "start": 0,
                "end": 19,
                "left": {
                  "type": "AssignmentExpression",
                  "start": 1,
                  "end": 13,
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "start": 1,
                    "end": 2,
                    "name": "a"
                  },
                  "right": {
                    "type": "CallExpression",
                    "start": 5,
                    "end": 13,
                    "callee": {
                      "type": "Identifier",
                      "start": 5,
                      "end": 6,
                      "name": "b"
                    },
                    "arguments": [
                      {
                        "type": "Literal",
                        "start": 7,
                        "end": 12,
                        "value": "100",
                        "raw": "\"100\""
                      }
                    ]
                  }
                },
                "operator": "<=",
                "right": {
                  "type": "Identifier",
                  "start": 18,
                  "end": 19,
                  "name": "a"
                }
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "({ false: 1 })', () => {
        expect(parseScript('({ false: 1 })', {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 14,
          "body": [
            {
              "type": "ExpressionStatement",
              "start": 0,
              "end": 14,
              "expression": {
                "type": "ObjectExpression",
                "start": 1,
                "end": 13,
                "properties": [
                  {
                    "type": "Property",
                    "start": 3,
                    "end": 11,
                    "method": false,
                    "shorthand": false,
                    "computed": false,
                    "key": {
                      "type": "Identifier",
                      "start": 3,
                      "end": 8,
                      "name": "false"
                    },
                    "value": {
                      "type": "Literal",
                      "start": 10,
                      "end": 11,
                      "value": 1,
                      "raw": "1"
                    },
                    "kind": "init"
                  }
                ]
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "({ ["__proto__"]: 1, __proto__: 2 })', () => {
        expect(parseScript('({ ["__proto__"]: 1, __proto__: 2 })', {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 36,
          "body": [
            {
              "type": "ExpressionStatement",
              "start": 0,
              "end": 36,
              "expression": {
                "type": "ObjectExpression",
                "start": 1,
                "end": 35,
                "properties": [
                  {
                    "type": "Property",
                    "start": 3,
                    "end": 19,
                    "method": false,
                    "shorthand": false,
                    "computed": true,
                    "key": {
                      "type": "Literal",
                      "start": 4,
                      "end": 15,
                      "value": "__proto__",
                      "raw": "\"__proto__\""
                    },
                    "value": {
                      "type": "Literal",
                      "start": 18,
                      "end": 19,
                      "value": 1,
                      "raw": "1"
                    },
                    "kind": "init"
                  },
                  {
                    "type": "Property",
                    "start": 21,
                    "end": 33,
                    "method": false,
                    "shorthand": false,
                    "computed": false,
                    "key": {
                      "type": "Identifier",
                      "start": 21,
                      "end": 30,
                      "name": "__proto__"
                    },
                    "value": {
                      "type": "Literal",
                      "start": 32,
                      "end": 33,
                      "value": 2,
                      "raw": "2"
                    },
                    "kind": "init"
                  }
                ]
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "var a, [a] = 1;', () => {
        expect(parseScript('var a, [a] = 1;', {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 15,
          "body": [
            {
              "type": "VariableDeclaration",
              "start": 0,
              "end": 15,
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "start": 4,
                  "end": 5,
                  "id": {
                    "type": "Identifier",
                    "start": 4,
                    "end": 5,
                    "name": "a"
                  },
                  "init": null
                },
                {
                  "type": "VariableDeclarator",
                  "start": 7,
                  "end": 14,
                  "id": {
                    "type": "ArrayPattern",
                    "start": 7,
                    "end": 10,
                    "elements": [
                      {
                        "type": "Identifier",
                        "start": 8,
                        "end": 9,
                        "name": "a"
                      }
                    ]
                  },
                  "init": {
                    "type": "Literal",
                    "start": 13,
                    "end": 14,
                    "value": 1,
                    "raw": "1"
                  }
                }
              ],
              "kind": "var"
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "a(.0)', () => {
        expect(parseScript('a(.0)', {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 5,
          "body": [
            {
              "type": "ExpressionStatement",
              "start": 0,
              "end": 5,
              "expression": {
                "type": "CallExpression",
                "start": 0,
                "end": 5,
                "callee": {
                  "type": "Identifier",
                  "start": 0,
                  "end": 1,
                  "name": "a"
                },
                "arguments": [
                  {
                    "type": "Literal",
                    "start": 2,
                    "end": 4,
                    "value": 0,
                    "raw": ".0"
                  }
                ]
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "a >>>= 1', () => {
        expect(parseScript('a >>>= 1', {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 8,
          "body": [
            {
              "type": "ExpressionStatement",
              "start": 0,
              "end": 8,
              "expression": {
                "type": "AssignmentExpression",
                "start": 0,
                "end": 8,
                "operator": ">>>=",
                "left": {
                  "type": "Identifier",
                  "start": 0,
                  "end": 1,
                  "name": "a"
                },
                "right": {
                  "type": "Literal",
                  "start": 7,
                  "end": 8,
                  "value": 1,
                  "raw": "1"
                }
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "({a: b} = 1)', () => {
        expect(parseScript('({a: b} = 1)', {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 12,
          "body": [
            {
              "type": "ExpressionStatement",
              "start": 0,
              "end": 12,
              "expression": {
                "type": "AssignmentExpression",
                "start": 1,
                "end": 11,
                "operator": "=",
                "left": {
                  "type": "ObjectPattern",
                  "start": 1,
                  "end": 7,
                  "properties": [
                    {
                      "type": "Property",
                      "start": 2,
                      "end": 6,
                      "method": false,
                      "shorthand": false,
                      "computed": false,
                      "key": {
                        "type": "Identifier",
                        "start": 2,
                        "end": 3,
                        "name": "a"
                      },
                      "value": {
                        "type": "Identifier",
                        "start": 5,
                        "end": 6,
                        "name": "b"
                      },
                      "kind": "init"
                    }
                  ]
                },
                "right": {
                  "type": "Literal",
                  "start": 10,
                  "end": 11,
                  "value": 1,
                  "raw": "1"
                }
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "(let[let])', () => {
        expect(parseScript('(let[let])', {
            ranges: true,
            raw: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 10,
          "body": [
            {
              "type": "ExpressionStatement",
              "start": 0,
              "end": 10,
              "expression": {
                "type": "MemberExpression",
                "start": 1,
                "end": 9,
                "object": {
                  "type": "Identifier",
                  "start": 1,
                  "end": 4,
                  "name": "let"
                },
                "property": {
                  "type": "Identifier",
                  "start": 5,
                  "end": 8,
                  "name": "let"
                },
                "computed": true
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "(x = 23)"', () => {
        expect(parseScript(`(x = 23)`, {
            raw: true,
            locations: true,
            ranges: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 8,
          "loc": {
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 8
            }
          },
          "body": [
            {
              "type": "ExpressionStatement",
              "start": 0,
              "end": 8,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 0
                },
                "end": {
                  "line": 1,
                  "column": 8
                }
              },
              "expression": {
                "type": "AssignmentExpression",
                "start": 1,
                "end": 7,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 1
                  },
                  "end": {
                    "line": 1,
                    "column": 7
                  }
                },
                "operator": "=",
                "left": {
                  "type": "Identifier",
                  "start": 1,
                  "end": 2,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 1
                    },
                    "end": {
                      "line": 1,
                      "column": 2
                    }
                  },
                  "name": "x"
                },
                "right": {
                  "type": "Literal",
                  "start": 5,
                  "end": 7,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 5
                    },
                    "end": {
                      "line": 1,
                      "column": 7
                    }
                  },
                  "value": 23,
                  "raw": "23"
                }
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "x = [ ,, 42 ]"', () => {
        expect(parseScript(`x = [ ,, 42 ]`, {
            raw: true,
            locations: true,
            ranges: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 13,
          "loc": {
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 13
            }
          },
          "body": [
            {
              "type": "ExpressionStatement",
              "start": 0,
              "end": 13,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 0
                },
                "end": {
                  "line": 1,
                  "column": 13
                }
              },
              "expression": {
                "type": "AssignmentExpression",
                "start": 0,
                "end": 13,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 13
                  }
                },
                "operator": "=",
                "left": {
                  "type": "Identifier",
                  "start": 0,
                  "end": 1,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 1
                    }
                  },
                  "name": "x"
                },
                "right": {
                  "type": "ArrayExpression",
                  "start": 4,
                  "end": 13,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 4
                    },
                    "end": {
                      "line": 1,
                      "column": 13
                    }
                  },
                  "elements": [
                    null,
                    null,
                    {
                      "type": "Literal",
                      "start": 9,
                      "end": 11,
                      "loc": {
                        "start": {
                          "line": 1,
                          "column": 9
                        },
                        "end": {
                          "line": 1,
                          "column": 11
                        }
                      },
                      "value": 42,
                      "raw": "42"
                    }
                  ]
                }
              }
            }
          ],
          "sourceType": "script"
        });
      });


      it('should parse "x = [ 1, 2, 3, ]"', () => {
        expect(parseScript(`x = [ 1, 2, 3, ]`, {
            raw: true,
            locations: true,
            ranges: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 16,
          "loc": {
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 16
            }
          },
          "body": [
            {
              "type": "ExpressionStatement",
              "start": 0,
              "end": 16,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 0
                },
                "end": {
                  "line": 1,
                  "column": 16
                }
              },
              "expression": {
                "type": "AssignmentExpression",
                "start": 0,
                "end": 16,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 16
                  }
                },
                "operator": "=",
                "left": {
                  "type": "Identifier",
                  "start": 0,
                  "end": 1,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 1
                    }
                  },
                  "name": "x"
                },
                "right": {
                  "type": "ArrayExpression",
                  "start": 4,
                  "end": 16,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 4
                    },
                    "end": {
                      "line": 1,
                      "column": 16
                    }
                  },
                  "elements": [
                    {
                      "type": "Literal",
                      "start": 6,
                      "end": 7,
                      "loc": {
                        "start": {
                          "line": 1,
                          "column": 6
                        },
                        "end": {
                          "line": 1,
                          "column": 7
                        }
                      },
                      "value": 1,
                      "raw": "1"
                    },
                    {
                      "type": "Literal",
                      "start": 9,
                      "end": 10,
                      "loc": {
                        "start": {
                          "line": 1,
                          "column": 9
                        },
                        "end": {
                          "line": 1,
                          "column": 10
                        }
                      },
                      "value": 2,
                      "raw": "2"
                    },
                    {
                      "type": "Literal",
                      "start": 12,
                      "end": 13,
                      "loc": {
                        "start": {
                          "line": 1,
                          "column": 12
                        },
                        "end": {
                          "line": 1,
                          "column": 13
                        }
                      },
                      "value": 3,
                      "raw": "3"
                    }
                  ]
                }
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "x = [ 1, 2,, 3, ]"', () => {
        expect(parseScript(`x = [ 1, 2,, 3, ]`, {
            raw: true,
            locations: true,
            ranges: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 17,
          "loc": {
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 17
            }
          },
          "body": [
            {
              "type": "ExpressionStatement",
              "start": 0,
              "end": 17,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 0
                },
                "end": {
                  "line": 1,
                  "column": 17
                }
              },
              "expression": {
                "type": "AssignmentExpression",
                "start": 0,
                "end": 17,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 17
                  }
                },
                "operator": "=",
                "left": {
                  "type": "Identifier",
                  "start": 0,
                  "end": 1,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 1
                    }
                  },
                  "name": "x"
                },
                "right": {
                  "type": "ArrayExpression",
                  "start": 4,
                  "end": 17,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 4
                    },
                    "end": {
                      "line": 1,
                      "column": 17
                    }
                  },
                  "elements": [
                    {
                      "type": "Literal",
                      "start": 6,
                      "end": 7,
                      "loc": {
                        "start": {
                          "line": 1,
                          "column": 6
                        },
                        "end": {
                          "line": 1,
                          "column": 7
                        }
                      },
                      "value": 1,
                      "raw": "1"
                    },
                    {
                      "type": "Literal",
                      "start": 9,
                      "end": 10,
                      "loc": {
                        "start": {
                          "line": 1,
                          "column": 9
                        },
                        "end": {
                          "line": 1,
                          "column": 10
                        }
                      },
                      "value": 2,
                      "raw": "2"
                    },
                    null,
                    {
                      "type": "Literal",
                      "start": 13,
                      "end": 14,
                      "loc": {
                        "start": {
                          "line": 1,
                          "column": 13
                        },
                        "end": {
                          "line": 1,
                          "column": 14
                        }
                      },
                      "value": 3,
                      "raw": "3"
                    }
                  ]
                }
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "ⅣⅡ = []"', () => {
        expect(parseScript(`ⅣⅡ = []`, {
            raw: true,
            locations: true,
            ranges: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 7,
          "loc": {
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 7
            }
          },
          "body": [
            {
              "type": "ExpressionStatement",
              "start": 0,
              "end": 7,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 0
                },
                "end": {
                  "line": 1,
                  "column": 7
                }
              },
              "expression": {
                "type": "AssignmentExpression",
                "start": 0,
                "end": 7,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 7
                  }
                },
                "operator": "=",
                "left": {
                  "type": "Identifier",
                  "start": 0,
                  "end": 2,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 2
                    }
                  },
                  "name": "ⅣⅡ"
                },
                "right": {
                  "type": "ArrayExpression",
                  "start": 5,
                  "end": 7,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 5
                    },
                    "end": {
                      "line": 1,
                      "column": 7
                    }
                  },
                  "elements": []
                }
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "x = { answer: 42 }"', () => {
        expect(parseScript(`x = { answer: 42 }`, {
            raw: true,
            locations: true,
            ranges: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 18,
          "loc": {
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 18
            }
          },
          "body": [
            {
              "type": "ExpressionStatement",
              "start": 0,
              "end": 18,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 0
                },
                "end": {
                  "line": 1,
                  "column": 18
                }
              },
              "expression": {
                "type": "AssignmentExpression",
                "start": 0,
                "end": 18,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 18
                  }
                },
                "operator": "=",
                "left": {
                  "type": "Identifier",
                  "start": 0,
                  "end": 1,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 1
                    }
                  },
                  "name": "x"
                },
                "right": {
                  "type": "ObjectExpression",
                  "start": 4,
                  "end": 18,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 4
                    },
                    "end": {
                      "line": 1,
                      "column": 18
                    }
                  },
                  "properties": [
                    {
                      "type": "Property",
                      "start": 6,
                      "end": 16,
                      "loc": {
                        "start": {
                          "line": 1,
                          "column": 6
                        },
                        "end": {
                          "line": 1,
                          "column": 16
                        }
                      },
                      "method": false,
                      "shorthand": false,
                      "computed": false,
                      "key": {
                        "type": "Identifier",
                        "start": 6,
                        "end": 12,
                        "loc": {
                          "start": {
                            "line": 1,
                            "column": 6
                          },
                          "end": {
                            "line": 1,
                            "column": 12
                          }
                        },
                        "name": "answer"
                      },
                      "value": {
                        "type": "Literal",
                        "start": 14,
                        "end": 16,
                        "loc": {
                          "start": {
                            "line": 1,
                            "column": 14
                          },
                          "end": {
                            "line": 1,
                            "column": 16
                          }
                        },
                        "value": 42,
                        "raw": "42"
                      },
                      "kind": "init"
                    }
                  ]
                }
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "x = { false: 42 }"', () => {
        expect(parseScript(`x = { false: 42 }`, {
            raw: true,
            locations: true,
            ranges: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 17,
          "loc": {
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 17
            }
          },
          "body": [
            {
              "type": "ExpressionStatement",
              "start": 0,
              "end": 17,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 0
                },
                "end": {
                  "line": 1,
                  "column": 17
                }
              },
              "expression": {
                "type": "AssignmentExpression",
                "start": 0,
                "end": 17,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 17
                  }
                },
                "operator": "=",
                "left": {
                  "type": "Identifier",
                  "start": 0,
                  "end": 1,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 1
                    }
                  },
                  "name": "x"
                },
                "right": {
                  "type": "ObjectExpression",
                  "start": 4,
                  "end": 17,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 4
                    },
                    "end": {
                      "line": 1,
                      "column": 17
                    }
                  },
                  "properties": [
                    {
                      "type": "Property",
                      "start": 6,
                      "end": 15,
                      "loc": {
                        "start": {
                          "line": 1,
                          "column": 6
                        },
                        "end": {
                          "line": 1,
                          "column": 15
                        }
                      },
                      "method": false,
                      "shorthand": false,
                      "computed": false,
                      "key": {
                        "type": "Identifier",
                        "start": 6,
                        "end": 11,
                        "loc": {
                          "start": {
                            "line": 1,
                            "column": 6
                          },
                          "end": {
                            "line": 1,
                            "column": 11
                          }
                        },
                        "name": "false"
                      },
                      "value": {
                        "type": "Literal",
                        "start": 13,
                        "end": 15,
                        "loc": {
                          "start": {
                            "line": 1,
                            "column": 13
                          },
                          "end": {
                            "line": 1,
                            "column": 15
                          }
                        },
                        "value": 42,
                        "raw": "42"
                      },
                      "kind": "init"
                    }
                  ]
                }
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "x = { set width(w) { m_width = w } }"', () => {
        expect(parseScript(`x = { set width(w) { m_width = w } }`, {
            raw: true,
            locations: true,
            ranges: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 36,
          "loc": {
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 36
            }
          },
          "body": [
            {
              "type": "ExpressionStatement",
              "start": 0,
              "end": 36,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 0
                },
                "end": {
                  "line": 1,
                  "column": 36
                }
              },
              "expression": {
                "type": "AssignmentExpression",
                "start": 0,
                "end": 36,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 36
                  }
                },
                "operator": "=",
                "left": {
                  "type": "Identifier",
                  "start": 0,
                  "end": 1,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 1
                    }
                  },
                  "name": "x"
                },
                "right": {
                  "type": "ObjectExpression",
                  "start": 4,
                  "end": 36,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 4
                    },
                    "end": {
                      "line": 1,
                      "column": 36
                    }
                  },
                  "properties": [
                    {
                      "type": "Property",
                      "start": 6,
                      "end": 34,
                      "loc": {
                        "start": {
                          "line": 1,
                          "column": 6
                        },
                        "end": {
                          "line": 1,
                          "column": 34
                        }
                      },
                      "method": false,
                      "shorthand": false,
                      "computed": false,
                      "key": {
                        "type": "Identifier",
                        "start": 10,
                        "end": 15,
                        "loc": {
                          "start": {
                            "line": 1,
                            "column": 10
                          },
                          "end": {
                            "line": 1,
                            "column": 15
                          }
                        },
                        "name": "width"
                      },
                      "kind": "set",
                      "value": {
                        "type": "FunctionExpression",
                        "start": 15,
                        "end": 34,
                        "loc": {
                          "start": {
                            "line": 1,
                            "column": 15
                          },
                          "end": {
                            "line": 1,
                            "column": 34
                          }
                        },
                        "id": null,
                        "generator": false,
                        "expression": false,
                        "async": false,
                        "params": [
                          {
                            "type": "Identifier",
                            "start": 16,
                            "end": 17,
                            "loc": {
                              "start": {
                                "line": 1,
                                "column": 16
                              },
                              "end": {
                                "line": 1,
                                "column": 17
                              }
                            },
                            "name": "w"
                          }
                        ],
                        "body": {
                          "type": "BlockStatement",
                          "start": 19,
                          "end": 34,
                          "loc": {
                            "start": {
                              "line": 1,
                              "column": 19
                            },
                            "end": {
                              "line": 1,
                              "column": 34
                            }
                          },
                          "body": [
                            {
                              "type": "ExpressionStatement",
                              "start": 21,
                              "end": 32,
                              "loc": {
                                "start": {
                                  "line": 1,
                                  "column": 21
                                },
                                "end": {
                                  "line": 1,
                                  "column": 32
                                }
                              },
                              "expression": {
                                "type": "AssignmentExpression",
                                "start": 21,
                                "end": 32,
                                "loc": {
                                  "start": {
                                    "line": 1,
                                    "column": 21
                                  },
                                  "end": {
                                    "line": 1,
                                    "column": 32
                                  }
                                },
                                "operator": "=",
                                "left": {
                                  "type": "Identifier",
                                  "start": 21,
                                  "end": 28,
                                  "loc": {
                                    "start": {
                                      "line": 1,
                                      "column": 21
                                    },
                                    "end": {
                                      "line": 1,
                                      "column": 28
                                    }
                                  },
                                  "name": "m_width"
                                },
                                "right": {
                                  "type": "Identifier",
                                  "start": 31,
                                  "end": 32,
                                  "loc": {
                                    "start": {
                                      "line": 1,
                                      "column": 31
                                    },
                                    "end": {
                                      "line": 1,
                                      "column": 32
                                    }
                                  },
                                  "name": "w"
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "x = { set false(w) { m_false = w } }"', () => {
        expect(parseScript(`x = { set false(w) { m_false = w } }`, {
            raw: true,
            locations: true,
            ranges: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 36,
          "loc": {
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 36
            }
          },
          "body": [
            {
              "type": "ExpressionStatement",
              "start": 0,
              "end": 36,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 0
                },
                "end": {
                  "line": 1,
                  "column": 36
                }
              },
              "expression": {
                "type": "AssignmentExpression",
                "start": 0,
                "end": 36,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 36
                  }
                },
                "operator": "=",
                "left": {
                  "type": "Identifier",
                  "start": 0,
                  "end": 1,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 1
                    }
                  },
                  "name": "x"
                },
                "right": {
                  "type": "ObjectExpression",
                  "start": 4,
                  "end": 36,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 4
                    },
                    "end": {
                      "line": 1,
                      "column": 36
                    }
                  },
                  "properties": [
                    {
                      "type": "Property",
                      "start": 6,
                      "end": 34,
                      "loc": {
                        "start": {
                          "line": 1,
                          "column": 6
                        },
                        "end": {
                          "line": 1,
                          "column": 34
                        }
                      },
                      "method": false,
                      "shorthand": false,
                      "computed": false,
                      "key": {
                        "type": "Identifier",
                        "start": 10,
                        "end": 15,
                        "loc": {
                          "start": {
                            "line": 1,
                            "column": 10
                          },
                          "end": {
                            "line": 1,
                            "column": 15
                          }
                        },
                        "name": "false"
                      },
                      "kind": "set",
                      "value": {
                        "type": "FunctionExpression",
                        "start": 15,
                        "end": 34,
                        "loc": {
                          "start": {
                            "line": 1,
                            "column": 15
                          },
                          "end": {
                            "line": 1,
                            "column": 34
                          }
                        },
                        "id": null,
                        "generator": false,
                        "expression": false,
                        "async": false,
                        "params": [
                          {
                            "type": "Identifier",
                            "start": 16,
                            "end": 17,
                            "loc": {
                              "start": {
                                "line": 1,
                                "column": 16
                              },
                              "end": {
                                "line": 1,
                                "column": 17
                              }
                            },
                            "name": "w"
                          }
                        ],
                        "body": {
                          "type": "BlockStatement",
                          "start": 19,
                          "end": 34,
                          "loc": {
                            "start": {
                              "line": 1,
                              "column": 19
                            },
                            "end": {
                              "line": 1,
                              "column": 34
                            }
                          },
                          "body": [
                            {
                              "type": "ExpressionStatement",
                              "start": 21,
                              "end": 32,
                              "loc": {
                                "start": {
                                  "line": 1,
                                  "column": 21
                                },
                                "end": {
                                  "line": 1,
                                  "column": 32
                                }
                              },
                              "expression": {
                                "type": "AssignmentExpression",
                                "start": 21,
                                "end": 32,
                                "loc": {
                                  "start": {
                                    "line": 1,
                                    "column": 21
                                  },
                                  "end": {
                                    "line": 1,
                                    "column": 32
                                  }
                                },
                                "operator": "=",
                                "left": {
                                  "type": "Identifier",
                                  "start": 21,
                                  "end": 28,
                                  "loc": {
                                    "start": {
                                      "line": 1,
                                      "column": 21
                                    },
                                    "end": {
                                      "line": 1,
                                      "column": 28
                                    }
                                  },
                                  "name": "m_false"
                                },
                                "right": {
                                  "type": "Identifier",
                                  "start": 31,
                                  "end": 32,
                                  "loc": {
                                    "start": {
                                      "line": 1,
                                      "column": 31
                                    },
                                    "end": {
                                      "line": 1,
                                      "column": 32
                                    }
                                  },
                                  "name": "w"
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "(1 + 2 ) * 3"', () => {
        expect(parseScript(`"Hello\\0World"`, {
            raw: true,
            locations: true,
            ranges: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 14,
          "loc": {
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 14
            }
          },
          "body": [
            {
              "type": "ExpressionStatement",
              "start": 0,
              "end": 14,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 0
                },
                "end": {
                  "line": 1,
                  "column": 14
                }
              },
              "expression": {
                "type": "Literal",
                "start": 0,
                "end": 14,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 14
                  }
                },
                "value": "Hello\u0000World",
                "raw": "\"Hello\\0World\""
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "y ? 1 : 2"', () => {
        expect(parseScript(`y ? 1 : 2`, {
            raw: true,
            locations: true,
            ranges: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 9,
          "loc": {
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 9
            }
          },
          "body": [
            {
              "type": "ExpressionStatement",
              "start": 0,
              "end": 9,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 0
                },
                "end": {
                  "line": 1,
                  "column": 9
                }
              },
              "expression": {
                "type": "ConditionalExpression",
                "start": 0,
                "end": 9,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 9
                  }
                },
                "test": {
                  "type": "Identifier",
                  "start": 0,
                  "end": 1,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 1
                    }
                  },
                  "name": "y"
                },
                "consequent": {
                  "type": "Literal",
                  "start": 4,
                  "end": 5,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 4
                    },
                    "end": {
                      "line": 1,
                      "column": 5
                    }
                  },
                  "value": 1,
                  "raw": "1"
                },
                "alternate": {
                  "type": "Literal",
                  "start": 8,
                  "end": 9,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 8
                    },
                    "end": {
                      "line": 1,
                      "column": 9
                    }
                  },
                  "value": 2,
                  "raw": "2"
                }
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "for(x = 0; x < 42;);"', () => {
        expect(parseScript(`for(x = 0; x < 42;);`, {
            raw: true,
            locations: true,
            ranges: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 20,
          "loc": {
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 20
            }
          },
          "body": [
            {
              "type": "ForStatement",
              "start": 0,
              "end": 20,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 0
                },
                "end": {
                  "line": 1,
                  "column": 20
                }
              },
              "init": {
                "type": "AssignmentExpression",
                "start": 4,
                "end": 9,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 4
                  },
                  "end": {
                    "line": 1,
                    "column": 9
                  }
                },
                "operator": "=",
                "left": {
                  "type": "Identifier",
                  "start": 4,
                  "end": 5,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 4
                    },
                    "end": {
                      "line": 1,
                      "column": 5
                    }
                  },
                  "name": "x"
                },
                "right": {
                  "type": "Literal",
                  "start": 8,
                  "end": 9,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 8
                    },
                    "end": {
                      "line": 1,
                      "column": 9
                    }
                  },
                  "value": 0,
                  "raw": "0"
                }
              },
              "test": {
                "type": "BinaryExpression",
                "start": 11,
                "end": 17,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 11
                  },
                  "end": {
                    "line": 1,
                    "column": 17
                  }
                },
                "left": {
                  "type": "Identifier",
                  "start": 11,
                  "end": 12,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 11
                    },
                    "end": {
                      "line": 1,
                      "column": 12
                    }
                  },
                  "name": "x"
                },
                "operator": "<",
                "right": {
                  "type": "Literal",
                  "start": 15,
                  "end": 17,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 15
                    },
                    "end": {
                      "line": 1,
                      "column": 17
                    }
                  },
                  "value": 42,
                  "raw": "42"
                }
              },
              "update": null,
              "body": {
                "type": "EmptyStatement",
                "start": 19,
                "end": 20,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 19
                  },
                  "end": {
                    "line": 1,
                    "column": 20
                  }
                }
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "done: while (true) { break done }"', () => {
        expect(parseScript(`done: while (true) { break done }`, {
            raw: true,
            locations: true,
            ranges: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 33,
          "loc": {
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 33
            }
          },
          "body": [
            {
              "type": "LabeledStatement",
              "start": 0,
              "end": 33,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 0
                },
                "end": {
                  "line": 1,
                  "column": 33
                }
              },
              "body": {
                "type": "WhileStatement",
                "start": 6,
                "end": 33,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 6
                  },
                  "end": {
                    "line": 1,
                    "column": 33
                  }
                },
                "test": {
                  "type": "Literal",
                  "start": 13,
                  "end": 17,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 13
                    },
                    "end": {
                      "line": 1,
                      "column": 17
                    }
                  },
                  "value": true,
                  "raw": "true"
                },
                "body": {
                  "type": "BlockStatement",
                  "start": 19,
                  "end": 33,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 19
                    },
                    "end": {
                      "line": 1,
                      "column": 33
                    }
                  },
                  "body": [
                    {
                      "type": "BreakStatement",
                      "start": 21,
                      "end": 31,
                      "loc": {
                        "start": {
                          "line": 1,
                          "column": 21
                        },
                        "end": {
                          "line": 1,
                          "column": 31
                        }
                      },
                      "label": {
                        "type": "Identifier",
                        "start": 27,
                        "end": 31,
                        "loc": {
                          "start": {
                            "line": 1,
                            "column": 27
                          },
                          "end": {
                            "line": 1,
                            "column": 31
                          }
                        },
                        "name": "done"
                      }
                    }
                  ]
                }
              },
              "label": {
                "type": "Identifier",
                "start": 0,
                "end": 4,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 4
                  }
                },
                "name": "done"
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "target1: target2: target3: while (true) { continue target1; }"', () => {
        expect(parseScript(`target1: target2: target3: while (true) { continue target1; }`, {
            raw: true,
            locations: true,
            ranges: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 61,
          "loc": {
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 61
            }
          },
          "body": [
            {
              "type": "LabeledStatement",
              "start": 0,
              "end": 61,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 0
                },
                "end": {
                  "line": 1,
                  "column": 61
                }
              },
              "body": {
                "type": "LabeledStatement",
                "start": 9,
                "end": 61,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 9
                  },
                  "end": {
                    "line": 1,
                    "column": 61
                  }
                },
                "body": {
                  "type": "LabeledStatement",
                  "start": 18,
                  "end": 61,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 18
                    },
                    "end": {
                      "line": 1,
                      "column": 61
                    }
                  },
                  "body": {
                    "type": "WhileStatement",
                    "start": 27,
                    "end": 61,
                    "loc": {
                      "start": {
                        "line": 1,
                        "column": 27
                      },
                      "end": {
                        "line": 1,
                        "column": 61
                      }
                    },
                    "test": {
                      "type": "Literal",
                      "start": 34,
                      "end": 38,
                      "loc": {
                        "start": {
                          "line": 1,
                          "column": 34
                        },
                        "end": {
                          "line": 1,
                          "column": 38
                        }
                      },
                      "value": true,
                      "raw": "true"
                    },
                    "body": {
                      "type": "BlockStatement",
                      "start": 40,
                      "end": 61,
                      "loc": {
                        "start": {
                          "line": 1,
                          "column": 40
                        },
                        "end": {
                          "line": 1,
                          "column": 61
                        }
                      },
                      "body": [
                        {
                          "type": "ContinueStatement",
                          "start": 42,
                          "end": 59,
                          "loc": {
                            "start": {
                              "line": 1,
                              "column": 42
                            },
                            "end": {
                              "line": 1,
                              "column": 59
                            }
                          },
                          "label": {
                            "type": "Identifier",
                            "start": 51,
                            "end": 58,
                            "loc": {
                              "start": {
                                "line": 1,
                                "column": 51
                              },
                              "end": {
                                "line": 1,
                                "column": 58
                              }
                            },
                            "name": "target1"
                          }
                        }
                      ]
                    }
                  },
                  "label": {
                    "type": "Identifier",
                    "start": 18,
                    "end": 25,
                    "loc": {
                      "start": {
                        "line": 1,
                        "column": 18
                      },
                      "end": {
                        "line": 1,
                        "column": 25
                      }
                    },
                    "name": "target3"
                  }
                },
                "label": {
                  "type": "Identifier",
                  "start": 9,
                  "end": 16,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 9
                    },
                    "end": {
                      "line": 1,
                      "column": 16
                    }
                  },
                  "name": "target2"
                }
              },
              "label": {
                "type": "Identifier",
                "start": 0,
                "end": 7,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 7
                  }
                },
                "name": "target1"
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "with (x) foo = bar"', () => {
        expect(parseScript(`with (x) foo = bar`, {
            raw: true,
            locations: true,
            ranges: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 18,
          "loc": {
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 18
            }
          },
          "body": [
            {
              "type": "WithStatement",
              "start": 0,
              "end": 18,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 0
                },
                "end": {
                  "line": 1,
                  "column": 18
                }
              },
              "object": {
                "type": "Identifier",
                "start": 6,
                "end": 7,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 6
                  },
                  "end": {
                    "line": 1,
                    "column": 7
                  }
                },
                "name": "x"
              },
              "body": {
                "type": "ExpressionStatement",
                "start": 9,
                "end": 18,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 9
                  },
                  "end": {
                    "line": 1,
                    "column": 18
                  }
                },
                "expression": {
                  "type": "AssignmentExpression",
                  "start": 9,
                  "end": 18,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 9
                    },
                    "end": {
                      "line": 1,
                      "column": 18
                    }
                  },
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "start": 9,
                    "end": 12,
                    "loc": {
                      "start": {
                        "line": 1,
                        "column": 9
                      },
                      "end": {
                        "line": 1,
                        "column": 12
                      }
                    },
                    "name": "foo"
                  },
                  "right": {
                    "type": "Identifier",
                    "start": 15,
                    "end": 18,
                    "loc": {
                      "start": {
                        "line": 1,
                        "column": 15
                      },
                      "end": {
                        "line": 1,
                        "column": 18
                      }
                    },
                    "name": "bar"
                  }
                }
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "switch (x) {}"', () => {
        expect(parseScript(`switch (x) {}`, {
            raw: true,
            locations: true,
            ranges: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 13,
          "loc": {
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 13
            }
          },
          "body": [
            {
              "type": "SwitchStatement",
              "start": 0,
              "end": 13,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 0
                },
                "end": {
                  "line": 1,
                  "column": 13
                }
              },
              "discriminant": {
                "type": "Identifier",
                "start": 8,
                "end": 9,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 8
                  },
                  "end": {
                    "line": 1,
                    "column": 9
                  }
                },
                "name": "x"
              },
              "cases": []
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "switch (answer) { case 42: hi(); break; default: break }"', () => {
        expect(parseScript(`switch (answer) { case 42: hi(); break; default: break }`, {
            raw: true,
            locations: true,
            ranges: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 56,
          "loc": {
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 56
            }
          },
          "body": [
            {
              "type": "SwitchStatement",
              "start": 0,
              "end": 56,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 0
                },
                "end": {
                  "line": 1,
                  "column": 56
                }
              },
              "discriminant": {
                "type": "Identifier",
                "start": 8,
                "end": 14,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 8
                  },
                  "end": {
                    "line": 1,
                    "column": 14
                  }
                },
                "name": "answer"
              },
              "cases": [
                {
                  "type": "SwitchCase",
                  "start": 18,
                  "end": 39,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 18
                    },
                    "end": {
                      "line": 1,
                      "column": 39
                    }
                  },
                  "consequent": [
                    {
                      "type": "ExpressionStatement",
                      "start": 27,
                      "end": 32,
                      "loc": {
                        "start": {
                          "line": 1,
                          "column": 27
                        },
                        "end": {
                          "line": 1,
                          "column": 32
                        }
                      },
                      "expression": {
                        "type": "CallExpression",
                        "start": 27,
                        "end": 31,
                        "loc": {
                          "start": {
                            "line": 1,
                            "column": 27
                          },
                          "end": {
                            "line": 1,
                            "column": 31
                          }
                        },
                        "callee": {
                          "type": "Identifier",
                          "start": 27,
                          "end": 29,
                          "loc": {
                            "start": {
                              "line": 1,
                              "column": 27
                            },
                            "end": {
                              "line": 1,
                              "column": 29
                            }
                          },
                          "name": "hi"
                        },
                        "arguments": []
                      }
                    },
                    {
                      "type": "BreakStatement",
                      "start": 33,
                      "end": 39,
                      "loc": {
                        "start": {
                          "line": 1,
                          "column": 33
                        },
                        "end": {
                          "line": 1,
                          "column": 39
                        }
                      },
                      "label": null
                    }
                  ],
                  "test": {
                    "type": "Literal",
                    "start": 23,
                    "end": 25,
                    "loc": {
                      "start": {
                        "line": 1,
                        "column": 23
                      },
                      "end": {
                        "line": 1,
                        "column": 25
                      }
                    },
                    "value": 42,
                    "raw": "42"
                  }
                },
                {
                  "type": "SwitchCase",
                  "start": 40,
                  "end": 54,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 40
                    },
                    "end": {
                      "line": 1,
                      "column": 54
                    }
                  },
                  "consequent": [
                    {
                      "type": "BreakStatement",
                      "start": 49,
                      "end": 54,
                      "loc": {
                        "start": {
                          "line": 1,
                          "column": 49
                        },
                        "end": {
                          "line": 1,
                          "column": 54
                        }
                      },
                      "label": null
                    }
                  ],
                  "test": null
                }
              ]
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "start: for (;;) break start"', () => {
        expect(parseScript(`start: for (;;) break start`, {
            raw: true,
            locations: true,
            ranges: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 27,
          "loc": {
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 27
            }
          },
          "body": [
            {
              "type": "LabeledStatement",
              "start": 0,
              "end": 27,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 0
                },
                "end": {
                  "line": 1,
                  "column": 27
                }
              },
              "body": {
                "type": "ForStatement",
                "start": 7,
                "end": 27,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 7
                  },
                  "end": {
                    "line": 1,
                    "column": 27
                  }
                },
                "init": null,
                "test": null,
                "update": null,
                "body": {
                  "type": "BreakStatement",
                  "start": 16,
                  "end": 27,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 16
                    },
                    "end": {
                      "line": 1,
                      "column": 27
                    }
                  },
                  "label": {
                    "type": "Identifier",
                    "start": 22,
                    "end": 27,
                    "loc": {
                      "start": {
                        "line": 1,
                        "column": 22
                      },
                      "end": {
                        "line": 1,
                        "column": 27
                      }
                    },
                    "name": "start"
                  }
                }
              },
              "label": {
                "type": "Identifier",
                "start": 0,
                "end": 5,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 5
                  }
                },
                "name": "start"
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "start: while (true) break start"', () => {
        expect(parseScript(`start: while (true) break start`, {
            raw: true,
            locations: true,
            ranges: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 31,
          "loc": {
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 31
            }
          },
          "body": [
            {
              "type": "LabeledStatement",
              "start": 0,
              "end": 31,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 0
                },
                "end": {
                  "line": 1,
                  "column": 31
                }
              },
              "body": {
                "type": "WhileStatement",
                "start": 7,
                "end": 31,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 7
                  },
                  "end": {
                    "line": 1,
                    "column": 31
                  }
                },
                "test": {
                  "type": "Literal",
                  "start": 14,
                  "end": 18,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 14
                    },
                    "end": {
                      "line": 1,
                      "column": 18
                    }
                  },
                  "value": true,
                  "raw": "true"
                },
                "body": {
                  "type": "BreakStatement",
                  "start": 20,
                  "end": 31,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 20
                    },
                    "end": {
                      "line": 1,
                      "column": 31
                    }
                  },
                  "label": {
                    "type": "Identifier",
                    "start": 26,
                    "end": 31,
                    "loc": {
                      "start": {
                        "line": 1,
                        "column": 26
                      },
                      "end": {
                        "line": 1,
                        "column": 31
                      }
                    },
                    "name": "start"
                  }
                }
              },
              "label": {
                "type": "Identifier",
                "start": 0,
                "end": 5,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 5
                  }
                },
                "name": "start"
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "throw x;"', () => {
        expect(parseScript(`throw x;`, {
            raw: true,
            locations: true,
            ranges: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 8,
          "loc": {
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 8
            }
          },
          "body": [
            {
              "type": "ThrowStatement",
              "start": 0,
              "end": 8,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 0
                },
                "end": {
                  "line": 1,
                  "column": 8
                }
              },
              "argument": {
                "type": "Identifier",
                "start": 6,
                "end": 7,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 6
                  },
                  "end": {
                    "line": 1,
                    "column": 7
                  }
                },
                "name": "x"
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "throw x * y"', () => {
        expect(parseScript(`throw x * y`, {
            raw: true,
            locations: true,
            ranges: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 11,
          "loc": {
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 11
            }
          },
          "body": [
            {
              "type": "ThrowStatement",
              "start": 0,
              "end": 11,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 0
                },
                "end": {
                  "line": 1,
                  "column": 11
                }
              },
              "argument": {
                "type": "BinaryExpression",
                "start": 6,
                "end": 11,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 6
                  },
                  "end": {
                    "line": 1,
                    "column": 11
                  }
                },
                "left": {
                  "type": "Identifier",
                  "start": 6,
                  "end": 7,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 6
                    },
                    "end": {
                      "line": 1,
                      "column": 7
                    }
                  },
                  "name": "x"
                },
                "operator": "*",
                "right": {
                  "type": "Identifier",
                  "start": 10,
                  "end": 11,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 10
                    },
                    "end": {
                      "line": 1,
                      "column": 11
                    }
                  },
                  "name": "y"
                }
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "123..toString(10)"', () => {
        expect(parseScript(`123..toString(10)`, {
            raw: true,
            locations: true,
            ranges: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 17,
          "loc": {
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 17
            }
          },
          "body": [
            {
              "type": "ExpressionStatement",
              "start": 0,
              "end": 17,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 0
                },
                "end": {
                  "line": 1,
                  "column": 17
                }
              },
              "expression": {
                "type": "CallExpression",
                "start": 0,
                "end": 17,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 17
                  }
                },
                "callee": {
                  "type": "MemberExpression",
                  "start": 0,
                  "end": 13,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 13
                    }
                  },
                  "object": {
                    "type": "Literal",
                    "start": 0,
                    "end": 4,
                    "loc": {
                      "start": {
                        "line": 1,
                        "column": 0
                      },
                      "end": {
                        "line": 1,
                        "column": 4
                      }
                    },
                    "value": 123,
                    "raw": "123."
                  },
                  "property": {
                    "type": "Identifier",
                    "start": 5,
                    "end": 13,
                    "loc": {
                      "start": {
                        "line": 1,
                        "column": 5
                      },
                      "end": {
                        "line": 1,
                        "column": 13
                      }
                    },
                    "name": "toString"
                  },
                  "computed": false
                },
                "arguments": [
                  {
                    "type": "Literal",
                    "start": 14,
                    "end": 16,
                    "loc": {
                      "start": {
                        "line": 1,
                        "column": 14
                      },
                      "end": {
                        "line": 1,
                        "column": 16
                      }
                    },
                    "value": 10,
                    "raw": "10"
                  }
                ]
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "23.+2"', () => {
        expect(parseScript(`23.+2`, {
            raw: true,
            locations: true,
            ranges: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 5,
          "loc": {
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 5
            }
          },
          "body": [
            {
              "type": "ExpressionStatement",
              "start": 0,
              "end": 5,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 0
                },
                "end": {
                  "line": 1,
                  "column": 5
                }
              },
              "expression": {
                "type": "BinaryExpression",
                "start": 0,
                "end": 5,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 5
                  }
                },
                "left": {
                  "type": "Literal",
                  "start": 0,
                  "end": 3,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 3
                    }
                  },
                  "value": 23,
                  "raw": "23."
                },
                "operator": "+",
                "right": {
                  "type": "Literal",
                  "start": 4,
                  "end": 5,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 4
                    },
                    "end": {
                      "line": 1,
                      "column": 5
                    }
                  },
                  "value": 2,
                  "raw": "2"
                }
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "foo: 10; foo: 20;"', () => {
        expect(parseScript(`foo: 10; foo: 20;`, {
            raw: true,
            locations: true,
            ranges: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 17,
          "loc": {
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 17
            }
          },
          "body": [
            {
              "type": "LabeledStatement",
              "start": 0,
              "end": 8,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 0
                },
                "end": {
                  "line": 1,
                  "column": 8
                }
              },
              "body": {
                "type": "ExpressionStatement",
                "start": 5,
                "end": 8,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 5
                  },
                  "end": {
                    "line": 1,
                    "column": 8
                  }
                },
                "expression": {
                  "type": "Literal",
                  "start": 5,
                  "end": 7,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 5
                    },
                    "end": {
                      "line": 1,
                      "column": 7
                    }
                  },
                  "value": 10,
                  "raw": "10"
                }
              },
              "label": {
                "type": "Identifier",
                "start": 0,
                "end": 3,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 3
                  }
                },
                "name": "foo"
              }
            },
            {
              "type": "LabeledStatement",
              "start": 9,
              "end": 17,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 9
                },
                "end": {
                  "line": 1,
                  "column": 17
                }
              },
              "body": {
                "type": "ExpressionStatement",
                "start": 14,
                "end": 17,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 14
                  },
                  "end": {
                    "line": 1,
                    "column": 17
                  }
                },
                "expression": {
                  "type": "Literal",
                  "start": 14,
                  "end": 16,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 14
                    },
                    "end": {
                      "line": 1,
                      "column": 16
                    }
                  },
                  "value": 20,
                  "raw": "20"
                }
              },
              "label": {
                "type": "Identifier",
                "start": 9,
                "end": 12,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 9
                  },
                  "end": {
                    "line": 1,
                    "column": 12
                  }
                },
                "name": "foo"
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "a.in / b"', () => {
        expect(parseScript(`a.in / b`, {
            raw: true,
            locations: true,
            ranges: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 8,
          "loc": {
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 8
            }
          },
          "body": [
            {
              "type": "ExpressionStatement",
              "start": 0,
              "end": 8,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 0
                },
                "end": {
                  "line": 1,
                  "column": 8
                }
              },
              "expression": {
                "type": "BinaryExpression",
                "start": 0,
                "end": 8,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 8
                  }
                },
                "left": {
                  "type": "MemberExpression",
                  "start": 0,
                  "end": 4,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 4
                    }
                  },
                  "object": {
                    "type": "Identifier",
                    "start": 0,
                    "end": 1,
                    "loc": {
                      "start": {
                        "line": 1,
                        "column": 0
                      },
                      "end": {
                        "line": 1,
                        "column": 1
                      }
                    },
                    "name": "a"
                  },
                  "property": {
                    "type": "Identifier",
                    "start": 2,
                    "end": 4,
                    "loc": {
                      "start": {
                        "line": 1,
                        "column": 2
                      },
                      "end": {
                        "line": 1,
                        "column": 4
                      }
                    },
                    "name": "in"
                  },
                  "computed": false
                },
                "operator": "/",
                "right": {
                  "type": "Identifier",
                  "start": 7,
                  "end": 8,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 7
                    },
                    "end": {
                      "line": 1,
                      "column": 8
                    }
                  },
                  "name": "b"
                }
              }
            }
          ],
          "sourceType": "script"
        });
      });


      it('should parse "({a: [1]}+[]) / 2"', () => {
        expect(parseScript(`({a: [1]}+[]) / 2`, {
            raw: true,
            locations: true,
            ranges: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 17,
          "loc": {
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 17
            }
          },
          "body": [
            {
              "type": "ExpressionStatement",
              "start": 0,
              "end": 17,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 0
                },
                "end": {
                  "line": 1,
                  "column": 17
                }
              },
              "expression": {
                "type": "BinaryExpression",
                "start": 0,
                "end": 17,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 17
                  }
                },
                "left": {
                  "type": "BinaryExpression",
                  "start": 1,
                  "end": 12,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 1
                    },
                    "end": {
                      "line": 1,
                      "column": 12
                    }
                  },
                  "left": {
                    "type": "ObjectExpression",
                    "start": 1,
                    "end": 9,
                    "loc": {
                      "start": {
                        "line": 1,
                        "column": 1
                      },
                      "end": {
                        "line": 1,
                        "column": 9
                      }
                    },
                    "properties": [
                      {
                        "type": "Property",
                        "start": 2,
                        "end": 8,
                        "loc": {
                          "start": {
                            "line": 1,
                            "column": 2
                          },
                          "end": {
                            "line": 1,
                            "column": 8
                          }
                        },
                        "method": false,
                        "shorthand": false,
                        "computed": false,
                        "key": {
                          "type": "Identifier",
                          "start": 2,
                          "end": 3,
                          "loc": {
                            "start": {
                              "line": 1,
                              "column": 2
                            },
                            "end": {
                              "line": 1,
                              "column": 3
                            }
                          },
                          "name": "a"
                        },
                        "value": {
                          "type": "ArrayExpression",
                          "start": 5,
                          "end": 8,
                          "loc": {
                            "start": {
                              "line": 1,
                              "column": 5
                            },
                            "end": {
                              "line": 1,
                              "column": 8
                            }
                          },
                          "elements": [
                            {
                              "type": "Literal",
                              "start": 6,
                              "end": 7,
                              "loc": {
                                "start": {
                                  "line": 1,
                                  "column": 6
                                },
                                "end": {
                                  "line": 1,
                                  "column": 7
                                }
                              },
                              "value": 1,
                              "raw": "1"
                            }
                          ]
                        },
                        "kind": "init"
                      }
                    ]
                  },
                  "operator": "+",
                  "right": {
                    "type": "ArrayExpression",
                    "start": 10,
                    "end": 12,
                    "loc": {
                      "start": {
                        "line": 1,
                        "column": 10
                      },
                      "end": {
                        "line": 1,
                        "column": 12
                      }
                    },
                    "elements": []
                  }
                },
                "operator": "/",
                "right": {
                  "type": "Literal",
                  "start": 16,
                  "end": 17,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 16
                    },
                    "end": {
                      "line": 1,
                      "column": 17
                    }
                  },
                  "value": 2,
                  "raw": "2"
                }
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "+function f() {} / 3;"', () => {
        expect(parseScript(`+function f() {} / 3;`, {
            raw: true,
            locations: true,
            ranges: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 21,
          "loc": {
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 21
            }
          },
          "body": [
            {
              "type": "ExpressionStatement",
              "start": 0,
              "end": 21,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 0
                },
                "end": {
                  "line": 1,
                  "column": 21
                }
              },
              "expression": {
                "type": "BinaryExpression",
                "start": 0,
                "end": 20,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 20
                  }
                },
                "left": {
                  "type": "UnaryExpression",
                  "start": 0,
                  "end": 16,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 16
                    }
                  },
                  "operator": "+",
                  "prefix": true,
                  "argument": {
                    "type": "FunctionExpression",
                    "start": 1,
                    "end": 16,
                    "loc": {
                      "start": {
                        "line": 1,
                        "column": 1
                      },
                      "end": {
                        "line": 1,
                        "column": 16
                      }
                    },
                    "id": {
                      "type": "Identifier",
                      "start": 10,
                      "end": 11,
                      "loc": {
                        "start": {
                          "line": 1,
                          "column": 10
                        },
                        "end": {
                          "line": 1,
                          "column": 11
                        }
                      },
                      "name": "f"
                    },
                    "generator": false,
                    "expression": false,
                    "async": false,
                    "params": [],
                    "body": {
                      "type": "BlockStatement",
                      "start": 14,
                      "end": 16,
                      "loc": {
                        "start": {
                          "line": 1,
                          "column": 14
                        },
                        "end": {
                          "line": 1,
                          "column": 16
                        }
                      },
                      "body": []
                    }
                  }
                },
                "operator": "/",
                "right": {
                  "type": "Literal",
                  "start": 19,
                  "end": 20,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 19
                    },
                    "end": {
                      "line": 1,
                      "column": 20
                    }
                  },
                  "value": 3,
                  "raw": "3"
                }
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "(1 + 2 ) * 3"', () => {
        expect(parseScript(`(function ( a ) { });
        (function ( [ a ] ) { });
        (function ( [ a, b ] ) { });
        (function ( [ [ a ] ] ) { });
        (function ( [ [ a, b ] ] ) { });
        (function ( [ a, [ b ] ] ) { });
        (function ( [ [ b ], a ] ) { });
        
        (function ( { a } ) { });
        (function ( { a, b } ) { });
        
        (function ( [ { a } ] ) { });
        (function ( [ { a, b } ] ) { });
        (function ( [ a, { b } ] ) { });
        (function ( [ { b }, a ] ) { });
        
        ( [ a ] ) => { };
        ( [ a, b ] ) => { };
        
        ( { a } ) => { };
        ( { a, b, c, d, e } ) => { };
        
        ( [ a ] ) => b;
        ( [ a, b ] ) => c;
        
        ( { a } ) => b;
        ( { a, b } ) => c;`, {
            raw: true,
            locations: true,
            ranges: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 760,
          "loc": {
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 27,
              "column": 26
            }
          },
          "body": [
            {
              "type": "ExpressionStatement",
              "start": 0,
              "end": 21,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 0
                },
                "end": {
                  "line": 1,
                  "column": 21
                }
              },
              "expression": {
                "type": "FunctionExpression",
                "start": 1,
                "end": 19,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 1
                  },
                  "end": {
                    "line": 1,
                    "column": 19
                  }
                },
                "id": null,
                "generator": false,
                "expression": false,
                "async": false,
                "params": [
                  {
                    "type": "Identifier",
                    "start": 12,
                    "end": 13,
                    "loc": {
                      "start": {
                        "line": 1,
                        "column": 12
                      },
                      "end": {
                        "line": 1,
                        "column": 13
                      }
                    },
                    "name": "a"
                  }
                ],
                "body": {
                  "type": "BlockStatement",
                  "start": 16,
                  "end": 19,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 16
                    },
                    "end": {
                      "line": 1,
                      "column": 19
                    }
                  },
                  "body": []
                }
              }
            },
            {
              "type": "ExpressionStatement",
              "start": 30,
              "end": 55,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 8
                },
                "end": {
                  "line": 2,
                  "column": 33
                }
              },
              "expression": {
                "type": "FunctionExpression",
                "start": 31,
                "end": 53,
                "loc": {
                  "start": {
                    "line": 2,
                    "column": 9
                  },
                  "end": {
                    "line": 2,
                    "column": 31
                  }
                },
                "id": null,
                "generator": false,
                "expression": false,
                "async": false,
                "params": [
                  {
                    "type": "ArrayPattern",
                    "start": 42,
                    "end": 47,
                    "loc": {
                      "start": {
                        "line": 2,
                        "column": 20
                      },
                      "end": {
                        "line": 2,
                        "column": 25
                      }
                    },
                    "elements": [
                      {
                        "type": "Identifier",
                        "start": 44,
                        "end": 45,
                        "loc": {
                          "start": {
                            "line": 2,
                            "column": 22
                          },
                          "end": {
                            "line": 2,
                            "column": 23
                          }
                        },
                        "name": "a"
                      }
                    ]
                  }
                ],
                "body": {
                  "type": "BlockStatement",
                  "start": 50,
                  "end": 53,
                  "loc": {
                    "start": {
                      "line": 2,
                      "column": 28
                    },
                    "end": {
                      "line": 2,
                      "column": 31
                    }
                  },
                  "body": []
                }
              }
            },
            {
              "type": "ExpressionStatement",
              "start": 64,
              "end": 92,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 8
                },
                "end": {
                  "line": 3,
                  "column": 36
                }
              },
              "expression": {
                "type": "FunctionExpression",
                "start": 65,
                "end": 90,
                "loc": {
                  "start": {
                    "line": 3,
                    "column": 9
                  },
                  "end": {
                    "line": 3,
                    "column": 34
                  }
                },
                "id": null,
                "generator": false,
                "expression": false,
                "async": false,
                "params": [
                  {
                    "type": "ArrayPattern",
                    "start": 76,
                    "end": 84,
                    "loc": {
                      "start": {
                        "line": 3,
                        "column": 20
                      },
                      "end": {
                        "line": 3,
                        "column": 28
                      }
                    },
                    "elements": [
                      {
                        "type": "Identifier",
                        "start": 78,
                        "end": 79,
                        "loc": {
                          "start": {
                            "line": 3,
                            "column": 22
                          },
                          "end": {
                            "line": 3,
                            "column": 23
                          }
                        },
                        "name": "a"
                      },
                      {
                        "type": "Identifier",
                        "start": 81,
                        "end": 82,
                        "loc": {
                          "start": {
                            "line": 3,
                            "column": 25
                          },
                          "end": {
                            "line": 3,
                            "column": 26
                          }
                        },
                        "name": "b"
                      }
                    ]
                  }
                ],
                "body": {
                  "type": "BlockStatement",
                  "start": 87,
                  "end": 90,
                  "loc": {
                    "start": {
                      "line": 3,
                      "column": 31
                    },
                    "end": {
                      "line": 3,
                      "column": 34
                    }
                  },
                  "body": []
                }
              }
            },
            {
              "type": "ExpressionStatement",
              "start": 101,
              "end": 130,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 8
                },
                "end": {
                  "line": 4,
                  "column": 37
                }
              },
              "expression": {
                "type": "FunctionExpression",
                "start": 102,
                "end": 128,
                "loc": {
                  "start": {
                    "line": 4,
                    "column": 9
                  },
                  "end": {
                    "line": 4,
                    "column": 35
                  }
                },
                "id": null,
                "generator": false,
                "expression": false,
                "async": false,
                "params": [
                  {
                    "type": "ArrayPattern",
                    "start": 113,
                    "end": 122,
                    "loc": {
                      "start": {
                        "line": 4,
                        "column": 20
                      },
                      "end": {
                        "line": 4,
                        "column": 29
                      }
                    },
                    "elements": [
                      {
                        "type": "ArrayPattern",
                        "start": 115,
                        "end": 120,
                        "loc": {
                          "start": {
                            "line": 4,
                            "column": 22
                          },
                          "end": {
                            "line": 4,
                            "column": 27
                          }
                        },
                        "elements": [
                          {
                            "type": "Identifier",
                            "start": 117,
                            "end": 118,
                            "loc": {
                              "start": {
                                "line": 4,
                                "column": 24
                              },
                              "end": {
                                "line": 4,
                                "column": 25
                              }
                            },
                            "name": "a"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "body": {
                  "type": "BlockStatement",
                  "start": 125,
                  "end": 128,
                  "loc": {
                    "start": {
                      "line": 4,
                      "column": 32
                    },
                    "end": {
                      "line": 4,
                      "column": 35
                    }
                  },
                  "body": []
                }
              }
            },
            {
              "type": "ExpressionStatement",
              "start": 139,
              "end": 171,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 8
                },
                "end": {
                  "line": 5,
                  "column": 40
                }
              },
              "expression": {
                "type": "FunctionExpression",
                "start": 140,
                "end": 169,
                "loc": {
                  "start": {
                    "line": 5,
                    "column": 9
                  },
                  "end": {
                    "line": 5,
                    "column": 38
                  }
                },
                "id": null,
                "generator": false,
                "expression": false,
                "async": false,
                "params": [
                  {
                    "type": "ArrayPattern",
                    "start": 151,
                    "end": 163,
                    "loc": {
                      "start": {
                        "line": 5,
                        "column": 20
                      },
                      "end": {
                        "line": 5,
                        "column": 32
                      }
                    },
                    "elements": [
                      {
                        "type": "ArrayPattern",
                        "start": 153,
                        "end": 161,
                        "loc": {
                          "start": {
                            "line": 5,
                            "column": 22
                          },
                          "end": {
                            "line": 5,
                            "column": 30
                          }
                        },
                        "elements": [
                          {
                            "type": "Identifier",
                            "start": 155,
                            "end": 156,
                            "loc": {
                              "start": {
                                "line": 5,
                                "column": 24
                              },
                              "end": {
                                "line": 5,
                                "column": 25
                              }
                            },
                            "name": "a"
                          },
                          {
                            "type": "Identifier",
                            "start": 158,
                            "end": 159,
                            "loc": {
                              "start": {
                                "line": 5,
                                "column": 27
                              },
                              "end": {
                                "line": 5,
                                "column": 28
                              }
                            },
                            "name": "b"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "body": {
                  "type": "BlockStatement",
                  "start": 166,
                  "end": 169,
                  "loc": {
                    "start": {
                      "line": 5,
                      "column": 35
                    },
                    "end": {
                      "line": 5,
                      "column": 38
                    }
                  },
                  "body": []
                }
              }
            },
            {
              "type": "ExpressionStatement",
              "start": 180,
              "end": 212,
              "loc": {
                "start": {
                  "line": 6,
                  "column": 8
                },
                "end": {
                  "line": 6,
                  "column": 40
                }
              },
              "expression": {
                "type": "FunctionExpression",
                "start": 181,
                "end": 210,
                "loc": {
                  "start": {
                    "line": 6,
                    "column": 9
                  },
                  "end": {
                    "line": 6,
                    "column": 38
                  }
                },
                "id": null,
                "generator": false,
                "expression": false,
                "async": false,
                "params": [
                  {
                    "type": "ArrayPattern",
                    "start": 192,
                    "end": 204,
                    "loc": {
                      "start": {
                        "line": 6,
                        "column": 20
                      },
                      "end": {
                        "line": 6,
                        "column": 32
                      }
                    },
                    "elements": [
                      {
                        "type": "Identifier",
                        "start": 194,
                        "end": 195,
                        "loc": {
                          "start": {
                            "line": 6,
                            "column": 22
                          },
                          "end": {
                            "line": 6,
                            "column": 23
                          }
                        },
                        "name": "a"
                      },
                      {
                        "type": "ArrayPattern",
                        "start": 197,
                        "end": 202,
                        "loc": {
                          "start": {
                            "line": 6,
                            "column": 25
                          },
                          "end": {
                            "line": 6,
                            "column": 30
                          }
                        },
                        "elements": [
                          {
                            "type": "Identifier",
                            "start": 199,
                            "end": 200,
                            "loc": {
                              "start": {
                                "line": 6,
                                "column": 27
                              },
                              "end": {
                                "line": 6,
                                "column": 28
                              }
                            },
                            "name": "b"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "body": {
                  "type": "BlockStatement",
                  "start": 207,
                  "end": 210,
                  "loc": {
                    "start": {
                      "line": 6,
                      "column": 35
                    },
                    "end": {
                      "line": 6,
                      "column": 38
                    }
                  },
                  "body": []
                }
              }
            },
            {
              "type": "ExpressionStatement",
              "start": 221,
              "end": 253,
              "loc": {
                "start": {
                  "line": 7,
                  "column": 8
                },
                "end": {
                  "line": 7,
                  "column": 40
                }
              },
              "expression": {
                "type": "FunctionExpression",
                "start": 222,
                "end": 251,
                "loc": {
                  "start": {
                    "line": 7,
                    "column": 9
                  },
                  "end": {
                    "line": 7,
                    "column": 38
                  }
                },
                "id": null,
                "generator": false,
                "expression": false,
                "async": false,
                "params": [
                  {
                    "type": "ArrayPattern",
                    "start": 233,
                    "end": 245,
                    "loc": {
                      "start": {
                        "line": 7,
                        "column": 20
                      },
                      "end": {
                        "line": 7,
                        "column": 32
                      }
                    },
                    "elements": [
                      {
                        "type": "ArrayPattern",
                        "start": 235,
                        "end": 240,
                        "loc": {
                          "start": {
                            "line": 7,
                            "column": 22
                          },
                          "end": {
                            "line": 7,
                            "column": 27
                          }
                        },
                        "elements": [
                          {
                            "type": "Identifier",
                            "start": 237,
                            "end": 238,
                            "loc": {
                              "start": {
                                "line": 7,
                                "column": 24
                              },
                              "end": {
                                "line": 7,
                                "column": 25
                              }
                            },
                            "name": "b"
                          }
                        ]
                      },
                      {
                        "type": "Identifier",
                        "start": 242,
                        "end": 243,
                        "loc": {
                          "start": {
                            "line": 7,
                            "column": 29
                          },
                          "end": {
                            "line": 7,
                            "column": 30
                          }
                        },
                        "name": "a"
                      }
                    ]
                  }
                ],
                "body": {
                  "type": "BlockStatement",
                  "start": 248,
                  "end": 251,
                  "loc": {
                    "start": {
                      "line": 7,
                      "column": 35
                    },
                    "end": {
                      "line": 7,
                      "column": 38
                    }
                  },
                  "body": []
                }
              }
            },
            {
              "type": "ExpressionStatement",
              "start": 271,
              "end": 296,
              "loc": {
                "start": {
                  "line": 9,
                  "column": 8
                },
                "end": {
                  "line": 9,
                  "column": 33
                }
              },
              "expression": {
                "type": "FunctionExpression",
                "start": 272,
                "end": 294,
                "loc": {
                  "start": {
                    "line": 9,
                    "column": 9
                  },
                  "end": {
                    "line": 9,
                    "column": 31
                  }
                },
                "id": null,
                "generator": false,
                "expression": false,
                "async": false,
                "params": [
                  {
                    "type": "ObjectPattern",
                    "start": 283,
                    "end": 288,
                    "loc": {
                      "start": {
                        "line": 9,
                        "column": 20
                      },
                      "end": {
                        "line": 9,
                        "column": 25
                      }
                    },
                    "properties": [
                      {
                        "type": "Property",
                        "start": 285,
                        "end": 286,
                        "loc": {
                          "start": {
                            "line": 9,
                            "column": 22
                          },
                          "end": {
                            "line": 9,
                            "column": 23
                          }
                        },
                        "method": false,
                        "shorthand": true,
                        "computed": false,
                        "key": {
                          "type": "Identifier",
                          "start": 285,
                          "end": 286,
                          "loc": {
                            "start": {
                              "line": 9,
                              "column": 22
                            },
                            "end": {
                              "line": 9,
                              "column": 23
                            }
                          },
                          "name": "a"
                        },
                        "kind": "init",
                        "value": {
                          "type": "Identifier",
                          "start": 285,
                          "end": 286,
                          "loc": {
                            "start": {
                              "line": 9,
                              "column": 22
                            },
                            "end": {
                              "line": 9,
                              "column": 23
                            }
                          },
                          "name": "a"
                        }
                      }
                    ]
                  }
                ],
                "body": {
                  "type": "BlockStatement",
                  "start": 291,
                  "end": 294,
                  "loc": {
                    "start": {
                      "line": 9,
                      "column": 28
                    },
                    "end": {
                      "line": 9,
                      "column": 31
                    }
                  },
                  "body": []
                }
              }
            },
            {
              "type": "ExpressionStatement",
              "start": 305,
              "end": 333,
              "loc": {
                "start": {
                  "line": 10,
                  "column": 8
                },
                "end": {
                  "line": 10,
                  "column": 36
                }
              },
              "expression": {
                "type": "FunctionExpression",
                "start": 306,
                "end": 331,
                "loc": {
                  "start": {
                    "line": 10,
                    "column": 9
                  },
                  "end": {
                    "line": 10,
                    "column": 34
                  }
                },
                "id": null,
                "generator": false,
                "expression": false,
                "async": false,
                "params": [
                  {
                    "type": "ObjectPattern",
                    "start": 317,
                    "end": 325,
                    "loc": {
                      "start": {
                        "line": 10,
                        "column": 20
                      },
                      "end": {
                        "line": 10,
                        "column": 28
                      }
                    },
                    "properties": [
                      {
                        "type": "Property",
                        "start": 319,
                        "end": 320,
                        "loc": {
                          "start": {
                            "line": 10,
                            "column": 22
                          },
                          "end": {
                            "line": 10,
                            "column": 23
                          }
                        },
                        "method": false,
                        "shorthand": true,
                        "computed": false,
                        "key": {
                          "type": "Identifier",
                          "start": 319,
                          "end": 320,
                          "loc": {
                            "start": {
                              "line": 10,
                              "column": 22
                            },
                            "end": {
                              "line": 10,
                              "column": 23
                            }
                          },
                          "name": "a"
                        },
                        "kind": "init",
                        "value": {
                          "type": "Identifier",
                          "start": 319,
                          "end": 320,
                          "loc": {
                            "start": {
                              "line": 10,
                              "column": 22
                            },
                            "end": {
                              "line": 10,
                              "column": 23
                            }
                          },
                          "name": "a"
                        }
                      },
                      {
                        "type": "Property",
                        "start": 322,
                        "end": 323,
                        "loc": {
                          "start": {
                            "line": 10,
                            "column": 25
                          },
                          "end": {
                            "line": 10,
                            "column": 26
                          }
                        },
                        "method": false,
                        "shorthand": true,
                        "computed": false,
                        "key": {
                          "type": "Identifier",
                          "start": 322,
                          "end": 323,
                          "loc": {
                            "start": {
                              "line": 10,
                              "column": 25
                            },
                            "end": {
                              "line": 10,
                              "column": 26
                            }
                          },
                          "name": "b"
                        },
                        "kind": "init",
                        "value": {
                          "type": "Identifier",
                          "start": 322,
                          "end": 323,
                          "loc": {
                            "start": {
                              "line": 10,
                              "column": 25
                            },
                            "end": {
                              "line": 10,
                              "column": 26
                            }
                          },
                          "name": "b"
                        }
                      }
                    ]
                  }
                ],
                "body": {
                  "type": "BlockStatement",
                  "start": 328,
                  "end": 331,
                  "loc": {
                    "start": {
                      "line": 10,
                      "column": 31
                    },
                    "end": {
                      "line": 10,
                      "column": 34
                    }
                  },
                  "body": []
                }
              }
            },
            {
              "type": "ExpressionStatement",
              "start": 351,
              "end": 380,
              "loc": {
                "start": {
                  "line": 12,
                  "column": 8
                },
                "end": {
                  "line": 12,
                  "column": 37
                }
              },
              "expression": {
                "type": "FunctionExpression",
                "start": 352,
                "end": 378,
                "loc": {
                  "start": {
                    "line": 12,
                    "column": 9
                  },
                  "end": {
                    "line": 12,
                    "column": 35
                  }
                },
                "id": null,
                "generator": false,
                "expression": false,
                "async": false,
                "params": [
                  {
                    "type": "ArrayPattern",
                    "start": 363,
                    "end": 372,
                    "loc": {
                      "start": {
                        "line": 12,
                        "column": 20
                      },
                      "end": {
                        "line": 12,
                        "column": 29
                      }
                    },
                    "elements": [
                      {
                        "type": "ObjectPattern",
                        "start": 365,
                        "end": 370,
                        "loc": {
                          "start": {
                            "line": 12,
                            "column": 22
                          },
                          "end": {
                            "line": 12,
                            "column": 27
                          }
                        },
                        "properties": [
                          {
                            "type": "Property",
                            "start": 367,
                            "end": 368,
                            "loc": {
                              "start": {
                                "line": 12,
                                "column": 24
                              },
                              "end": {
                                "line": 12,
                                "column": 25
                              }
                            },
                            "method": false,
                            "shorthand": true,
                            "computed": false,
                            "key": {
                              "type": "Identifier",
                              "start": 367,
                              "end": 368,
                              "loc": {
                                "start": {
                                  "line": 12,
                                  "column": 24
                                },
                                "end": {
                                  "line": 12,
                                  "column": 25
                                }
                              },
                              "name": "a"
                            },
                            "kind": "init",
                            "value": {
                              "type": "Identifier",
                              "start": 367,
                              "end": 368,
                              "loc": {
                                "start": {
                                  "line": 12,
                                  "column": 24
                                },
                                "end": {
                                  "line": 12,
                                  "column": 25
                                }
                              },
                              "name": "a"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ],
                "body": {
                  "type": "BlockStatement",
                  "start": 375,
                  "end": 378,
                  "loc": {
                    "start": {
                      "line": 12,
                      "column": 32
                    },
                    "end": {
                      "line": 12,
                      "column": 35
                    }
                  },
                  "body": []
                }
              }
            },
            {
              "type": "ExpressionStatement",
              "start": 389,
              "end": 421,
              "loc": {
                "start": {
                  "line": 13,
                  "column": 8
                },
                "end": {
                  "line": 13,
                  "column": 40
                }
              },
              "expression": {
                "type": "FunctionExpression",
                "start": 390,
                "end": 419,
                "loc": {
                  "start": {
                    "line": 13,
                    "column": 9
                  },
                  "end": {
                    "line": 13,
                    "column": 38
                  }
                },
                "id": null,
                "generator": false,
                "expression": false,
                "async": false,
                "params": [
                  {
                    "type": "ArrayPattern",
                    "start": 401,
                    "end": 413,
                    "loc": {
                      "start": {
                        "line": 13,
                        "column": 20
                      },
                      "end": {
                        "line": 13,
                        "column": 32
                      }
                    },
                    "elements": [
                      {
                        "type": "ObjectPattern",
                        "start": 403,
                        "end": 411,
                        "loc": {
                          "start": {
                            "line": 13,
                            "column": 22
                          },
                          "end": {
                            "line": 13,
                            "column": 30
                          }
                        },
                        "properties": [
                          {
                            "type": "Property",
                            "start": 405,
                            "end": 406,
                            "loc": {
                              "start": {
                                "line": 13,
                                "column": 24
                              },
                              "end": {
                                "line": 13,
                                "column": 25
                              }
                            },
                            "method": false,
                            "shorthand": true,
                            "computed": false,
                            "key": {
                              "type": "Identifier",
                              "start": 405,
                              "end": 406,
                              "loc": {
                                "start": {
                                  "line": 13,
                                  "column": 24
                                },
                                "end": {
                                  "line": 13,
                                  "column": 25
                                }
                              },
                              "name": "a"
                            },
                            "kind": "init",
                            "value": {
                              "type": "Identifier",
                              "start": 405,
                              "end": 406,
                              "loc": {
                                "start": {
                                  "line": 13,
                                  "column": 24
                                },
                                "end": {
                                  "line": 13,
                                  "column": 25
                                }
                              },
                              "name": "a"
                            }
                          },
                          {
                            "type": "Property",
                            "start": 408,
                            "end": 409,
                            "loc": {
                              "start": {
                                "line": 13,
                                "column": 27
                              },
                              "end": {
                                "line": 13,
                                "column": 28
                              }
                            },
                            "method": false,
                            "shorthand": true,
                            "computed": false,
                            "key": {
                              "type": "Identifier",
                              "start": 408,
                              "end": 409,
                              "loc": {
                                "start": {
                                  "line": 13,
                                  "column": 27
                                },
                                "end": {
                                  "line": 13,
                                  "column": 28
                                }
                              },
                              "name": "b"
                            },
                            "kind": "init",
                            "value": {
                              "type": "Identifier",
                              "start": 408,
                              "end": 409,
                              "loc": {
                                "start": {
                                  "line": 13,
                                  "column": 27
                                },
                                "end": {
                                  "line": 13,
                                  "column": 28
                                }
                              },
                              "name": "b"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ],
                "body": {
                  "type": "BlockStatement",
                  "start": 416,
                  "end": 419,
                  "loc": {
                    "start": {
                      "line": 13,
                      "column": 35
                    },
                    "end": {
                      "line": 13,
                      "column": 38
                    }
                  },
                  "body": []
                }
              }
            },
            {
              "type": "ExpressionStatement",
              "start": 430,
              "end": 462,
              "loc": {
                "start": {
                  "line": 14,
                  "column": 8
                },
                "end": {
                  "line": 14,
                  "column": 40
                }
              },
              "expression": {
                "type": "FunctionExpression",
                "start": 431,
                "end": 460,
                "loc": {
                  "start": {
                    "line": 14,
                    "column": 9
                  },
                  "end": {
                    "line": 14,
                    "column": 38
                  }
                },
                "id": null,
                "generator": false,
                "expression": false,
                "async": false,
                "params": [
                  {
                    "type": "ArrayPattern",
                    "start": 442,
                    "end": 454,
                    "loc": {
                      "start": {
                        "line": 14,
                        "column": 20
                      },
                      "end": {
                        "line": 14,
                        "column": 32
                      }
                    },
                    "elements": [
                      {
                        "type": "Identifier",
                        "start": 444,
                        "end": 445,
                        "loc": {
                          "start": {
                            "line": 14,
                            "column": 22
                          },
                          "end": {
                            "line": 14,
                            "column": 23
                          }
                        },
                        "name": "a"
                      },
                      {
                        "type": "ObjectPattern",
                        "start": 447,
                        "end": 452,
                        "loc": {
                          "start": {
                            "line": 14,
                            "column": 25
                          },
                          "end": {
                            "line": 14,
                            "column": 30
                          }
                        },
                        "properties": [
                          {
                            "type": "Property",
                            "start": 449,
                            "end": 450,
                            "loc": {
                              "start": {
                                "line": 14,
                                "column": 27
                              },
                              "end": {
                                "line": 14,
                                "column": 28
                              }
                            },
                            "method": false,
                            "shorthand": true,
                            "computed": false,
                            "key": {
                              "type": "Identifier",
                              "start": 449,
                              "end": 450,
                              "loc": {
                                "start": {
                                  "line": 14,
                                  "column": 27
                                },
                                "end": {
                                  "line": 14,
                                  "column": 28
                                }
                              },
                              "name": "b"
                            },
                            "kind": "init",
                            "value": {
                              "type": "Identifier",
                              "start": 449,
                              "end": 450,
                              "loc": {
                                "start": {
                                  "line": 14,
                                  "column": 27
                                },
                                "end": {
                                  "line": 14,
                                  "column": 28
                                }
                              },
                              "name": "b"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ],
                "body": {
                  "type": "BlockStatement",
                  "start": 457,
                  "end": 460,
                  "loc": {
                    "start": {
                      "line": 14,
                      "column": 35
                    },
                    "end": {
                      "line": 14,
                      "column": 38
                    }
                  },
                  "body": []
                }
              }
            },
            {
              "type": "ExpressionStatement",
              "start": 471,
              "end": 503,
              "loc": {
                "start": {
                  "line": 15,
                  "column": 8
                },
                "end": {
                  "line": 15,
                  "column": 40
                }
              },
              "expression": {
                "type": "FunctionExpression",
                "start": 472,
                "end": 501,
                "loc": {
                  "start": {
                    "line": 15,
                    "column": 9
                  },
                  "end": {
                    "line": 15,
                    "column": 38
                  }
                },
                "id": null,
                "generator": false,
                "expression": false,
                "async": false,
                "params": [
                  {
                    "type": "ArrayPattern",
                    "start": 483,
                    "end": 495,
                    "loc": {
                      "start": {
                        "line": 15,
                        "column": 20
                      },
                      "end": {
                        "line": 15,
                        "column": 32
                      }
                    },
                    "elements": [
                      {
                        "type": "ObjectPattern",
                        "start": 485,
                        "end": 490,
                        "loc": {
                          "start": {
                            "line": 15,
                            "column": 22
                          },
                          "end": {
                            "line": 15,
                            "column": 27
                          }
                        },
                        "properties": [
                          {
                            "type": "Property",
                            "start": 487,
                            "end": 488,
                            "loc": {
                              "start": {
                                "line": 15,
                                "column": 24
                              },
                              "end": {
                                "line": 15,
                                "column": 25
                              }
                            },
                            "method": false,
                            "shorthand": true,
                            "computed": false,
                            "key": {
                              "type": "Identifier",
                              "start": 487,
                              "end": 488,
                              "loc": {
                                "start": {
                                  "line": 15,
                                  "column": 24
                                },
                                "end": {
                                  "line": 15,
                                  "column": 25
                                }
                              },
                              "name": "b"
                            },
                            "kind": "init",
                            "value": {
                              "type": "Identifier",
                              "start": 487,
                              "end": 488,
                              "loc": {
                                "start": {
                                  "line": 15,
                                  "column": 24
                                },
                                "end": {
                                  "line": 15,
                                  "column": 25
                                }
                              },
                              "name": "b"
                            }
                          }
                        ]
                      },
                      {
                        "type": "Identifier",
                        "start": 492,
                        "end": 493,
                        "loc": {
                          "start": {
                            "line": 15,
                            "column": 29
                          },
                          "end": {
                            "line": 15,
                            "column": 30
                          }
                        },
                        "name": "a"
                      }
                    ]
                  }
                ],
                "body": {
                  "type": "BlockStatement",
                  "start": 498,
                  "end": 501,
                  "loc": {
                    "start": {
                      "line": 15,
                      "column": 35
                    },
                    "end": {
                      "line": 15,
                      "column": 38
                    }
                  },
                  "body": []
                }
              }
            },
            {
              "type": "ExpressionStatement",
              "start": 521,
              "end": 538,
              "loc": {
                "start": {
                  "line": 17,
                  "column": 8
                },
                "end": {
                  "line": 17,
                  "column": 25
                }
              },
              "expression": {
                "type": "ArrowFunctionExpression",
                "start": 521,
                "end": 537,
                "loc": {
                  "start": {
                    "line": 17,
                    "column": 8
                  },
                  "end": {
                    "line": 17,
                    "column": 24
                  }
                },
                "id": null,
                "generator": false,
                "expression": false,
                "async": false,
                "params": [
                  {
                    "type": "ArrayPattern",
                    "start": 523,
                    "end": 528,
                    "loc": {
                      "start": {
                        "line": 17,
                        "column": 10
                      },
                      "end": {
                        "line": 17,
                        "column": 15
                      }
                    },
                    "elements": [
                      {
                        "type": "Identifier",
                        "start": 525,
                        "end": 526,
                        "loc": {
                          "start": {
                            "line": 17,
                            "column": 12
                          },
                          "end": {
                            "line": 17,
                            "column": 13
                          }
                        },
                        "name": "a"
                      }
                    ]
                  }
                ],
                "body": {
                  "type": "BlockStatement",
                  "start": 534,
                  "end": 537,
                  "loc": {
                    "start": {
                      "line": 17,
                      "column": 21
                    },
                    "end": {
                      "line": 17,
                      "column": 24
                    }
                  },
                  "body": []
                }
              }
            },
            {
              "type": "ExpressionStatement",
              "start": 547,
              "end": 567,
              "loc": {
                "start": {
                  "line": 18,
                  "column": 8
                },
                "end": {
                  "line": 18,
                  "column": 28
                }
              },
              "expression": {
                "type": "ArrowFunctionExpression",
                "start": 547,
                "end": 566,
                "loc": {
                  "start": {
                    "line": 18,
                    "column": 8
                  },
                  "end": {
                    "line": 18,
                    "column": 27
                  }
                },
                "id": null,
                "generator": false,
                "expression": false,
                "async": false,
                "params": [
                  {
                    "type": "ArrayPattern",
                    "start": 549,
                    "end": 557,
                    "loc": {
                      "start": {
                        "line": 18,
                        "column": 10
                      },
                      "end": {
                        "line": 18,
                        "column": 18
                      }
                    },
                    "elements": [
                      {
                        "type": "Identifier",
                        "start": 551,
                        "end": 552,
                        "loc": {
                          "start": {
                            "line": 18,
                            "column": 12
                          },
                          "end": {
                            "line": 18,
                            "column": 13
                          }
                        },
                        "name": "a"
                      },
                      {
                        "type": "Identifier",
                        "start": 554,
                        "end": 555,
                        "loc": {
                          "start": {
                            "line": 18,
                            "column": 15
                          },
                          "end": {
                            "line": 18,
                            "column": 16
                          }
                        },
                        "name": "b"
                      }
                    ]
                  }
                ],
                "body": {
                  "type": "BlockStatement",
                  "start": 563,
                  "end": 566,
                  "loc": {
                    "start": {
                      "line": 18,
                      "column": 24
                    },
                    "end": {
                      "line": 18,
                      "column": 27
                    }
                  },
                  "body": []
                }
              }
            },
            {
              "type": "ExpressionStatement",
              "start": 585,
              "end": 602,
              "loc": {
                "start": {
                  "line": 20,
                  "column": 8
                },
                "end": {
                  "line": 20,
                  "column": 25
                }
              },
              "expression": {
                "type": "ArrowFunctionExpression",
                "start": 585,
                "end": 601,
                "loc": {
                  "start": {
                    "line": 20,
                    "column": 8
                  },
                  "end": {
                    "line": 20,
                    "column": 24
                  }
                },
                "id": null,
                "generator": false,
                "expression": false,
                "async": false,
                "params": [
                  {
                    "type": "ObjectPattern",
                    "start": 587,
                    "end": 592,
                    "loc": {
                      "start": {
                        "line": 20,
                        "column": 10
                      },
                      "end": {
                        "line": 20,
                        "column": 15
                      }
                    },
                    "properties": [
                      {
                        "type": "Property",
                        "start": 589,
                        "end": 590,
                        "loc": {
                          "start": {
                            "line": 20,
                            "column": 12
                          },
                          "end": {
                            "line": 20,
                            "column": 13
                          }
                        },
                        "method": false,
                        "shorthand": true,
                        "computed": false,
                        "key": {
                          "type": "Identifier",
                          "start": 589,
                          "end": 590,
                          "loc": {
                            "start": {
                              "line": 20,
                              "column": 12
                            },
                            "end": {
                              "line": 20,
                              "column": 13
                            }
                          },
                          "name": "a"
                        },
                        "kind": "init",
                        "value": {
                          "type": "Identifier",
                          "start": 589,
                          "end": 590,
                          "loc": {
                            "start": {
                              "line": 20,
                              "column": 12
                            },
                            "end": {
                              "line": 20,
                              "column": 13
                            }
                          },
                          "name": "a"
                        }
                      }
                    ]
                  }
                ],
                "body": {
                  "type": "BlockStatement",
                  "start": 598,
                  "end": 601,
                  "loc": {
                    "start": {
                      "line": 20,
                      "column": 21
                    },
                    "end": {
                      "line": 20,
                      "column": 24
                    }
                  },
                  "body": []
                }
              }
            },
            {
              "type": "ExpressionStatement",
              "start": 611,
              "end": 640,
              "loc": {
                "start": {
                  "line": 21,
                  "column": 8
                },
                "end": {
                  "line": 21,
                  "column": 37
                }
              },
              "expression": {
                "type": "ArrowFunctionExpression",
                "start": 611,
                "end": 639,
                "loc": {
                  "start": {
                    "line": 21,
                    "column": 8
                  },
                  "end": {
                    "line": 21,
                    "column": 36
                  }
                },
                "id": null,
                "generator": false,
                "expression": false,
                "async": false,
                "params": [
                  {
                    "type": "ObjectPattern",
                    "start": 613,
                    "end": 630,
                    "loc": {
                      "start": {
                        "line": 21,
                        "column": 10
                      },
                      "end": {
                        "line": 21,
                        "column": 27
                      }
                    },
                    "properties": [
                      {
                        "type": "Property",
                        "start": 615,
                        "end": 616,
                        "loc": {
                          "start": {
                            "line": 21,
                            "column": 12
                          },
                          "end": {
                            "line": 21,
                            "column": 13
                          }
                        },
                        "method": false,
                        "shorthand": true,
                        "computed": false,
                        "key": {
                          "type": "Identifier",
                          "start": 615,
                          "end": 616,
                          "loc": {
                            "start": {
                              "line": 21,
                              "column": 12
                            },
                            "end": {
                              "line": 21,
                              "column": 13
                            }
                          },
                          "name": "a"
                        },
                        "kind": "init",
                        "value": {
                          "type": "Identifier",
                          "start": 615,
                          "end": 616,
                          "loc": {
                            "start": {
                              "line": 21,
                              "column": 12
                            },
                            "end": {
                              "line": 21,
                              "column": 13
                            }
                          },
                          "name": "a"
                        }
                      },
                      {
                        "type": "Property",
                        "start": 618,
                        "end": 619,
                        "loc": {
                          "start": {
                            "line": 21,
                            "column": 15
                          },
                          "end": {
                            "line": 21,
                            "column": 16
                          }
                        },
                        "method": false,
                        "shorthand": true,
                        "computed": false,
                        "key": {
                          "type": "Identifier",
                          "start": 618,
                          "end": 619,
                          "loc": {
                            "start": {
                              "line": 21,
                              "column": 15
                            },
                            "end": {
                              "line": 21,
                              "column": 16
                            }
                          },
                          "name": "b"
                        },
                        "kind": "init",
                        "value": {
                          "type": "Identifier",
                          "start": 618,
                          "end": 619,
                          "loc": {
                            "start": {
                              "line": 21,
                              "column": 15
                            },
                            "end": {
                              "line": 21,
                              "column": 16
                            }
                          },
                          "name": "b"
                        }
                      },
                      {
                        "type": "Property",
                        "start": 621,
                        "end": 622,
                        "loc": {
                          "start": {
                            "line": 21,
                            "column": 18
                          },
                          "end": {
                            "line": 21,
                            "column": 19
                          }
                        },
                        "method": false,
                        "shorthand": true,
                        "computed": false,
                        "key": {
                          "type": "Identifier",
                          "start": 621,
                          "end": 622,
                          "loc": {
                            "start": {
                              "line": 21,
                              "column": 18
                            },
                            "end": {
                              "line": 21,
                              "column": 19
                            }
                          },
                          "name": "c"
                        },
                        "kind": "init",
                        "value": {
                          "type": "Identifier",
                          "start": 621,
                          "end": 622,
                          "loc": {
                            "start": {
                              "line": 21,
                              "column": 18
                            },
                            "end": {
                              "line": 21,
                              "column": 19
                            }
                          },
                          "name": "c"
                        }
                      },
                      {
                        "type": "Property",
                        "start": 624,
                        "end": 625,
                        "loc": {
                          "start": {
                            "line": 21,
                            "column": 21
                          },
                          "end": {
                            "line": 21,
                            "column": 22
                          }
                        },
                        "method": false,
                        "shorthand": true,
                        "computed": false,
                        "key": {
                          "type": "Identifier",
                          "start": 624,
                          "end": 625,
                          "loc": {
                            "start": {
                              "line": 21,
                              "column": 21
                            },
                            "end": {
                              "line": 21,
                              "column": 22
                            }
                          },
                          "name": "d"
                        },
                        "kind": "init",
                        "value": {
                          "type": "Identifier",
                          "start": 624,
                          "end": 625,
                          "loc": {
                            "start": {
                              "line": 21,
                              "column": 21
                            },
                            "end": {
                              "line": 21,
                              "column": 22
                            }
                          },
                          "name": "d"
                        }
                      },
                      {
                        "type": "Property",
                        "start": 627,
                        "end": 628,
                        "loc": {
                          "start": {
                            "line": 21,
                            "column": 24
                          },
                          "end": {
                            "line": 21,
                            "column": 25
                          }
                        },
                        "method": false,
                        "shorthand": true,
                        "computed": false,
                        "key": {
                          "type": "Identifier",
                          "start": 627,
                          "end": 628,
                          "loc": {
                            "start": {
                              "line": 21,
                              "column": 24
                            },
                            "end": {
                              "line": 21,
                              "column": 25
                            }
                          },
                          "name": "e"
                        },
                        "kind": "init",
                        "value": {
                          "type": "Identifier",
                          "start": 627,
                          "end": 628,
                          "loc": {
                            "start": {
                              "line": 21,
                              "column": 24
                            },
                            "end": {
                              "line": 21,
                              "column": 25
                            }
                          },
                          "name": "e"
                        }
                      }
                    ]
                  }
                ],
                "body": {
                  "type": "BlockStatement",
                  "start": 636,
                  "end": 639,
                  "loc": {
                    "start": {
                      "line": 21,
                      "column": 33
                    },
                    "end": {
                      "line": 21,
                      "column": 36
                    }
                  },
                  "body": []
                }
              }
            },
            {
              "type": "ExpressionStatement",
              "start": 658,
              "end": 673,
              "loc": {
                "start": {
                  "line": 23,
                  "column": 8
                },
                "end": {
                  "line": 23,
                  "column": 23
                }
              },
              "expression": {
                "type": "ArrowFunctionExpression",
                "start": 658,
                "end": 672,
                "loc": {
                  "start": {
                    "line": 23,
                    "column": 8
                  },
                  "end": {
                    "line": 23,
                    "column": 22
                  }
                },
                "id": null,
                "generator": false,
                "expression": true,
                "async": false,
                "params": [
                  {
                    "type": "ArrayPattern",
                    "start": 660,
                    "end": 665,
                    "loc": {
                      "start": {
                        "line": 23,
                        "column": 10
                      },
                      "end": {
                        "line": 23,
                        "column": 15
                      }
                    },
                    "elements": [
                      {
                        "type": "Identifier",
                        "start": 662,
                        "end": 663,
                        "loc": {
                          "start": {
                            "line": 23,
                            "column": 12
                          },
                          "end": {
                            "line": 23,
                            "column": 13
                          }
                        },
                        "name": "a"
                      }
                    ]
                  }
                ],
                "body": {
                  "type": "Identifier",
                  "start": 671,
                  "end": 672,
                  "loc": {
                    "start": {
                      "line": 23,
                      "column": 21
                    },
                    "end": {
                      "line": 23,
                      "column": 22
                    }
                  },
                  "name": "b"
                }
              }
            },
            {
              "type": "ExpressionStatement",
              "start": 682,
              "end": 700,
              "loc": {
                "start": {
                  "line": 24,
                  "column": 8
                },
                "end": {
                  "line": 24,
                  "column": 26
                }
              },
              "expression": {
                "type": "ArrowFunctionExpression",
                "start": 682,
                "end": 699,
                "loc": {
                  "start": {
                    "line": 24,
                    "column": 8
                  },
                  "end": {
                    "line": 24,
                    "column": 25
                  }
                },
                "id": null,
                "generator": false,
                "expression": true,
                "async": false,
                "params": [
                  {
                    "type": "ArrayPattern",
                    "start": 684,
                    "end": 692,
                    "loc": {
                      "start": {
                        "line": 24,
                        "column": 10
                      },
                      "end": {
                        "line": 24,
                        "column": 18
                      }
                    },
                    "elements": [
                      {
                        "type": "Identifier",
                        "start": 686,
                        "end": 687,
                        "loc": {
                          "start": {
                            "line": 24,
                            "column": 12
                          },
                          "end": {
                            "line": 24,
                            "column": 13
                          }
                        },
                        "name": "a"
                      },
                      {
                        "type": "Identifier",
                        "start": 689,
                        "end": 690,
                        "loc": {
                          "start": {
                            "line": 24,
                            "column": 15
                          },
                          "end": {
                            "line": 24,
                            "column": 16
                          }
                        },
                        "name": "b"
                      }
                    ]
                  }
                ],
                "body": {
                  "type": "Identifier",
                  "start": 698,
                  "end": 699,
                  "loc": {
                    "start": {
                      "line": 24,
                      "column": 24
                    },
                    "end": {
                      "line": 24,
                      "column": 25
                    }
                  },
                  "name": "c"
                }
              }
            },
            {
              "type": "ExpressionStatement",
              "start": 718,
              "end": 733,
              "loc": {
                "start": {
                  "line": 26,
                  "column": 8
                },
                "end": {
                  "line": 26,
                  "column": 23
                }
              },
              "expression": {
                "type": "ArrowFunctionExpression",
                "start": 718,
                "end": 732,
                "loc": {
                  "start": {
                    "line": 26,
                    "column": 8
                  },
                  "end": {
                    "line": 26,
                    "column": 22
                  }
                },
                "id": null,
                "generator": false,
                "expression": true,
                "async": false,
                "params": [
                  {
                    "type": "ObjectPattern",
                    "start": 720,
                    "end": 725,
                    "loc": {
                      "start": {
                        "line": 26,
                        "column": 10
                      },
                      "end": {
                        "line": 26,
                        "column": 15
                      }
                    },
                    "properties": [
                      {
                        "type": "Property",
                        "start": 722,
                        "end": 723,
                        "loc": {
                          "start": {
                            "line": 26,
                            "column": 12
                          },
                          "end": {
                            "line": 26,
                            "column": 13
                          }
                        },
                        "method": false,
                        "shorthand": true,
                        "computed": false,
                        "key": {
                          "type": "Identifier",
                          "start": 722,
                          "end": 723,
                          "loc": {
                            "start": {
                              "line": 26,
                              "column": 12
                            },
                            "end": {
                              "line": 26,
                              "column": 13
                            }
                          },
                          "name": "a"
                        },
                        "kind": "init",
                        "value": {
                          "type": "Identifier",
                          "start": 722,
                          "end": 723,
                          "loc": {
                            "start": {
                              "line": 26,
                              "column": 12
                            },
                            "end": {
                              "line": 26,
                              "column": 13
                            }
                          },
                          "name": "a"
                        }
                      }
                    ]
                  }
                ],
                "body": {
                  "type": "Identifier",
                  "start": 731,
                  "end": 732,
                  "loc": {
                    "start": {
                      "line": 26,
                      "column": 21
                    },
                    "end": {
                      "line": 26,
                      "column": 22
                    }
                  },
                  "name": "b"
                }
              }
            },
            {
              "type": "ExpressionStatement",
              "start": 742,
              "end": 760,
              "loc": {
                "start": {
                  "line": 27,
                  "column": 8
                },
                "end": {
                  "line": 27,
                  "column": 26
                }
              },
              "expression": {
                "type": "ArrowFunctionExpression",
                "start": 742,
                "end": 759,
                "loc": {
                  "start": {
                    "line": 27,
                    "column": 8
                  },
                  "end": {
                    "line": 27,
                    "column": 25
                  }
                },
                "id": null,
                "generator": false,
                "expression": true,
                "async": false,
                "params": [
                  {
                    "type": "ObjectPattern",
                    "start": 744,
                    "end": 752,
                    "loc": {
                      "start": {
                        "line": 27,
                        "column": 10
                      },
                      "end": {
                        "line": 27,
                        "column": 18
                      }
                    },
                    "properties": [
                      {
                        "type": "Property",
                        "start": 746,
                        "end": 747,
                        "loc": {
                          "start": {
                            "line": 27,
                            "column": 12
                          },
                          "end": {
                            "line": 27,
                            "column": 13
                          }
                        },
                        "method": false,
                        "shorthand": true,
                        "computed": false,
                        "key": {
                          "type": "Identifier",
                          "start": 746,
                          "end": 747,
                          "loc": {
                            "start": {
                              "line": 27,
                              "column": 12
                            },
                            "end": {
                              "line": 27,
                              "column": 13
                            }
                          },
                          "name": "a"
                        },
                        "kind": "init",
                        "value": {
                          "type": "Identifier",
                          "start": 746,
                          "end": 747,
                          "loc": {
                            "start": {
                              "line": 27,
                              "column": 12
                            },
                            "end": {
                              "line": 27,
                              "column": 13
                            }
                          },
                          "name": "a"
                        }
                      },
                      {
                        "type": "Property",
                        "start": 749,
                        "end": 750,
                        "loc": {
                          "start": {
                            "line": 27,
                            "column": 15
                          },
                          "end": {
                            "line": 27,
                            "column": 16
                          }
                        },
                        "method": false,
                        "shorthand": true,
                        "computed": false,
                        "key": {
                          "type": "Identifier",
                          "start": 749,
                          "end": 750,
                          "loc": {
                            "start": {
                              "line": 27,
                              "column": 15
                            },
                            "end": {
                              "line": 27,
                              "column": 16
                            }
                          },
                          "name": "b"
                        },
                        "kind": "init",
                        "value": {
                          "type": "Identifier",
                          "start": 749,
                          "end": 750,
                          "loc": {
                            "start": {
                              "line": 27,
                              "column": 15
                            },
                            "end": {
                              "line": 27,
                              "column": 16
                            }
                          },
                          "name": "b"
                        }
                      }
                    ]
                  }
                ],
                "body": {
                  "type": "Identifier",
                  "start": 758,
                  "end": 759,
                  "loc": {
                    "start": {
                      "line": 27,
                      "column": 24
                    },
                    "end": {
                      "line": 27,
                      "column": 25
                    }
                  },
                  "name": "c"
                }
              }
            }
          ],
          "sourceType": "script"
        });
      });


      it('should parse "a[b, c]"', () => {
        expect(parseScript(`a[b, c]`, {
            raw: true,
            locations: true,
            ranges: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 7,
          "loc": {
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 7
            }
          },
          "body": [
            {
              "type": "ExpressionStatement",
              "start": 0,
              "end": 7,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 0
                },
                "end": {
                  "line": 1,
                  "column": 7
                }
              },
              "expression": {
                "type": "MemberExpression",
                "start": 0,
                "end": 7,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 7
                  }
                },
                "object": {
                  "type": "Identifier",
                  "start": 0,
                  "end": 1,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 1
                    }
                  },
                  "name": "a"
                },
                "property": {
                  "type": "SequenceExpression",
                  "start": 2,
                  "end": 6,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 2
                    },
                    "end": {
                      "line": 1,
                      "column": 6
                    }
                  },
                  "expressions": [
                    {
                      "type": "Identifier",
                      "start": 2,
                      "end": 3,
                      "loc": {
                        "start": {
                          "line": 1,
                          "column": 2
                        },
                        "end": {
                          "line": 1,
                          "column": 3
                        }
                      },
                      "name": "b"
                    },
                    {
                      "type": "Identifier",
                      "start": 5,
                      "end": 6,
                      "loc": {
                        "start": {
                          "line": 1,
                          "column": 5
                        },
                        "end": {
                          "line": 1,
                          "column": 6
                        }
                      },
                      "name": "c"
                    }
                  ]
                },
                "computed": true
              }
            }
          ],
          "sourceType": "script"
        });
      });


      it('should parse "(function({a}){})"', () => {
        expect(parseScript(`(function({a}){})`, {
            raw: true,
            locations: true,
            ranges: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 17,
          "loc": {
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 17
            }
          },
          "body": [
            {
              "type": "ExpressionStatement",
              "start": 0,
              "end": 17,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 0
                },
                "end": {
                  "line": 1,
                  "column": 17
                }
              },
              "expression": {
                "type": "FunctionExpression",
                "start": 1,
                "end": 16,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 1
                  },
                  "end": {
                    "line": 1,
                    "column": 16
                  }
                },
                "id": null,
                "generator": false,
                "expression": false,
                "async": false,
                "params": [
                  {
                    "type": "ObjectPattern",
                    "start": 10,
                    "end": 13,
                    "loc": {
                      "start": {
                        "line": 1,
                        "column": 10
                      },
                      "end": {
                        "line": 1,
                        "column": 13
                      }
                    },
                    "properties": [
                      {
                        "type": "Property",
                        "start": 11,
                        "end": 12,
                        "loc": {
                          "start": {
                            "line": 1,
                            "column": 11
                          },
                          "end": {
                            "line": 1,
                            "column": 12
                          }
                        },
                        "method": false,
                        "shorthand": true,
                        "computed": false,
                        "key": {
                          "type": "Identifier",
                          "start": 11,
                          "end": 12,
                          "loc": {
                            "start": {
                              "line": 1,
                              "column": 11
                            },
                            "end": {
                              "line": 1,
                              "column": 12
                            }
                          },
                          "name": "a"
                        },
                        "kind": "init",
                        "value": {
                          "type": "Identifier",
                          "start": 11,
                          "end": 12,
                          "loc": {
                            "start": {
                              "line": 1,
                              "column": 11
                            },
                            "end": {
                              "line": 1,
                              "column": 12
                            }
                          },
                          "name": "a"
                        }
                      }
                    ]
                  }
                ],
                "body": {
                  "type": "BlockStatement",
                  "start": 14,
                  "end": 16,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 14
                    },
                    "end": {
                      "line": 1,
                      "column": 16
                    }
                  },
                  "body": []
                }
              }
            }
          ],
          "sourceType": "script"
        });
      });


      it('should parse "({ a: b } = c)"', () => {
        expect(parseScript(`({ a: b } = c)`, {
            raw: true,
            locations: true,
            ranges: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 14,
          "loc": {
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 14
            }
          },
          "body": [
            {
              "type": "ExpressionStatement",
              "start": 0,
              "end": 14,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 0
                },
                "end": {
                  "line": 1,
                  "column": 14
                }
              },
              "expression": {
                "type": "AssignmentExpression",
                "start": 1,
                "end": 13,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 1
                  },
                  "end": {
                    "line": 1,
                    "column": 13
                  }
                },
                "operator": "=",
                "left": {
                  "type": "ObjectPattern",
                  "start": 1,
                  "end": 9,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 1
                    },
                    "end": {
                      "line": 1,
                      "column": 9
                    }
                  },
                  "properties": [
                    {
                      "type": "Property",
                      "start": 3,
                      "end": 7,
                      "loc": {
                        "start": {
                          "line": 1,
                          "column": 3
                        },
                        "end": {
                          "line": 1,
                          "column": 7
                        }
                      },
                      "method": false,
                      "shorthand": false,
                      "computed": false,
                      "key": {
                        "type": "Identifier",
                        "start": 3,
                        "end": 4,
                        "loc": {
                          "start": {
                            "line": 1,
                            "column": 3
                          },
                          "end": {
                            "line": 1,
                            "column": 4
                          }
                        },
                        "name": "a"
                      },
                      "value": {
                        "type": "Identifier",
                        "start": 6,
                        "end": 7,
                        "loc": {
                          "start": {
                            "line": 1,
                            "column": 6
                          },
                          "end": {
                            "line": 1,
                            "column": 7
                          }
                        },
                        "name": "b"
                      },
                      "kind": "init"
                    }
                  ]
                },
                "right": {
                  "type": "Identifier",
                  "start": 12,
                  "end": 13,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 12
                    },
                    "end": {
                      "line": 1,
                      "column": 13
                    }
                  },
                  "name": "c"
                }
              }
            }
          ],
          "sourceType": "script"
        });
      });


      it('should parse "({set a(b=1){}})"', () => {
        expect(parseScript(`({set a(b=1){}})`, {
            raw: true,
            locations: true,
            ranges: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 16,
          "loc": {
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 16
            }
          },
          "body": [
            {
              "type": "ExpressionStatement",
              "start": 0,
              "end": 16,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 0
                },
                "end": {
                  "line": 1,
                  "column": 16
                }
              },
              "expression": {
                "type": "ObjectExpression",
                "start": 1,
                "end": 15,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 1
                  },
                  "end": {
                    "line": 1,
                    "column": 15
                  }
                },
                "properties": [
                  {
                    "type": "Property",
                    "start": 2,
                    "end": 14,
                    "loc": {
                      "start": {
                        "line": 1,
                        "column": 2
                      },
                      "end": {
                        "line": 1,
                        "column": 14
                      }
                    },
                    "method": false,
                    "shorthand": false,
                    "computed": false,
                    "key": {
                      "type": "Identifier",
                      "start": 6,
                      "end": 7,
                      "loc": {
                        "start": {
                          "line": 1,
                          "column": 6
                        },
                        "end": {
                          "line": 1,
                          "column": 7
                        }
                      },
                      "name": "a"
                    },
                    "kind": "set",
                    "value": {
                      "type": "FunctionExpression",
                      "start": 7,
                      "end": 14,
                      "loc": {
                        "start": {
                          "line": 1,
                          "column": 7
                        },
                        "end": {
                          "line": 1,
                          "column": 14
                        }
                      },
                      "id": null,
                      "generator": false,
                      "expression": false,
                      "async": false,
                      "params": [
                        {
                          "type": "AssignmentPattern",
                          "start": 8,
                          "end": 11,
                          "loc": {
                            "start": {
                              "line": 1,
                              "column": 8
                            },
                            "end": {
                              "line": 1,
                              "column": 11
                            }
                          },
                          "left": {
                            "type": "Identifier",
                            "start": 8,
                            "end": 9,
                            "loc": {
                              "start": {
                                "line": 1,
                                "column": 8
                              },
                              "end": {
                                "line": 1,
                                "column": 9
                              }
                            },
                            "name": "b"
                          },
                          "right": {
                            "type": "Literal",
                            "start": 10,
                            "end": 11,
                            "loc": {
                              "start": {
                                "line": 1,
                                "column": 10
                              },
                              "end": {
                                "line": 1,
                                "column": 11
                              }
                            },
                            "value": 1,
                            "raw": "1"
                          }
                        }
                      ],
                      "body": {
                        "type": "BlockStatement",
                        "start": 12,
                        "end": 14,
                        "loc": {
                          "start": {
                            "line": 1,
                            "column": 12
                          },
                          "end": {
                            "line": 1,
                            "column": 14
                          }
                        },
                        "body": []
                      }
                    }
                  }
                ]
              }
            }
          ],
          "sourceType": "script"
        });
      });


      it('should parse "{ a }"', () => {
        expect(parseScript(`{ a }`, {
            raw: true,
            locations: true,
            ranges: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 5,
          "loc": {
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 5
            }
          },
          "body": [
            {
              "type": "BlockStatement",
              "start": 0,
              "end": 5,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 0
                },
                "end": {
                  "line": 1,
                  "column": 5
                }
              },
              "body": [
                {
                  "type": "ExpressionStatement",
                  "start": 2,
                  "end": 3,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 2
                    },
                    "end": {
                      "line": 1,
                      "column": 3
                    }
                  },
                  "expression": {
                    "type": "Identifier",
                    "start": 2,
                    "end": 3,
                    "loc": {
                      "start": {
                        "line": 1,
                        "column": 2
                      },
                      "end": {
                        "line": 1,
                        "column": 3
                      }
                    },
                    "name": "a"
                  }
                }
              ]
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "switch (a) {}"', () => {
        expect(parseScript(`switch (a) {}`, {
            raw: true,
            locations: true,
            ranges: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 13,
          "loc": {
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 13
            }
          },
          "body": [
            {
              "type": "SwitchStatement",
              "start": 0,
              "end": 13,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 0
                },
                "end": {
                  "line": 1,
                  "column": 13
                }
              },
              "discriminant": {
                "type": "Identifier",
                "start": 8,
                "end": 9,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 8
                  },
                  "end": {
                    "line": 1,
                    "column": 9
                  }
                },
                "name": "a"
              },
              "cases": []
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "function a() { var b; if (b = "b") { return b; } else { return b; } }; a();"', () => {
        expect(parseScript(`function a() { var b; if (b = 'b') { return b; } else { return b; } }; a();`, {
            raw: true,
            locations: true,
            ranges: true
        })).to.eql({
  "type": "Program",
  "start": 0,
  "end": 75,
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 1,
      "column": 75
    }
  },
  "body": [
    {
      "type": "FunctionDeclaration",
      "start": 0,
      "end": 69,
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 1,
          "column": 69
        }
      },
      "id": {
        "type": "Identifier",
        "start": 9,
        "end": 10,
        "loc": {
          "start": {
            "line": 1,
            "column": 9
          },
          "end": {
            "line": 1,
            "column": 10
          }
        },
        "name": "a"
      },
      "generator": false,
      "expression": false,
      "async": false,
      "params": [],
      "body": {
        "type": "BlockStatement",
        "start": 13,
        "end": 69,
        "loc": {
          "start": {
            "line": 1,
            "column": 13
          },
          "end": {
            "line": 1,
            "column": 69
          }
        },
        "body": [
          {
            "type": "VariableDeclaration",
            "start": 15,
            "end": 21,
            "loc": {
              "start": {
                "line": 1,
                "column": 15
              },
              "end": {
                "line": 1,
                "column": 21
              }
            },
            "declarations": [
              {
                "type": "VariableDeclarator",
                "start": 19,
                "end": 20,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 19
                  },
                  "end": {
                    "line": 1,
                    "column": 20
                  }
                },
                "id": {
                  "type": "Identifier",
                  "start": 19,
                  "end": 20,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 19
                    },
                    "end": {
                      "line": 1,
                      "column": 20
                    }
                  },
                  "name": "b"
                },
                "init": null
              }
            ],
            "kind": "var"
          },
          {
            "type": "IfStatement",
            "start": 22,
            "end": 67,
            "loc": {
              "start": {
                "line": 1,
                "column": 22
              },
              "end": {
                "line": 1,
                "column": 67
              }
            },
            "test": {
              "type": "AssignmentExpression",
              "start": 26,
              "end": 33,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 26
                },
                "end": {
                  "line": 1,
                  "column": 33
                }
              },
              "operator": "=",
              "left": {
                "type": "Identifier",
                "start": 26,
                "end": 27,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 26
                  },
                  "end": {
                    "line": 1,
                    "column": 27
                  }
                },
                "name": "b"
              },
              "right": {
                "type": "Literal",
                "start": 30,
                "end": 33,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 30
                  },
                  "end": {
                    "line": 1,
                    "column": 33
                  }
                },
                "value": "b",
                "raw": "'b'"
              }
            },
            "consequent": {
              "type": "BlockStatement",
              "start": 35,
              "end": 48,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 35
                },
                "end": {
                  "line": 1,
                  "column": 48
                }
              },
              "body": [
                {
                  "type": "ReturnStatement",
                  "start": 37,
                  "end": 46,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 37
                    },
                    "end": {
                      "line": 1,
                      "column": 46
                    }
                  },
                  "argument": {
                    "type": "Identifier",
                    "start": 44,
                    "end": 45,
                    "loc": {
                      "start": {
                        "line": 1,
                        "column": 44
                      },
                      "end": {
                        "line": 1,
                        "column": 45
                      }
                    },
                    "name": "b"
                  }
                }
              ]
            },
            "alternate": {
              "type": "BlockStatement",
              "start": 54,
              "end": 67,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 54
                },
                "end": {
                  "line": 1,
                  "column": 67
                }
              },
              "body": [
                {
                  "type": "ReturnStatement",
                  "start": 56,
                  "end": 65,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 56
                    },
                    "end": {
                      "line": 1,
                      "column": 65
                    }
                  },
                  "argument": {
                    "type": "Identifier",
                    "start": 63,
                    "end": 64,
                    "loc": {
                      "start": {
                        "line": 1,
                        "column": 63
                      },
                      "end": {
                        "line": 1,
                        "column": 64
                      }
                    },
                    "name": "b"
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "type": "EmptyStatement",
      "start": 69,
      "end": 70,
      "loc": {
        "start": {
          "line": 1,
          "column": 69
        },
        "end": {
          "line": 1,
          "column": 70
        }
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 71,
      "end": 75,
      "loc": {
        "start": {
          "line": 1,
          "column": 71
        },
        "end": {
          "line": 1,
          "column": 75
        }
      },
      "expression": {
        "type": "CallExpression",
        "start": 71,
        "end": 74,
        "loc": {
          "start": {
            "line": 1,
            "column": 71
          },
          "end": {
            "line": 1,
            "column": 74
          }
        },
        "callee": {
          "type": "Identifier",
          "start": 71,
          "end": 72,
          "loc": {
            "start": {
              "line": 1,
              "column": 71
            },
            "end": {
              "line": 1,
              "column": 72
            }
          },
          "name": "a"
        },
        "arguments": []
      }
    }
  ],
  "sourceType": "script"
});
      });

      it('should parse "([a,...b])=>1;"', () => {
        expect(parseScript(`([a,...b])=>1;`, {
            raw: true,
            locations: true,
            ranges: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 14,
          "loc": {
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 14
            }
          },
          "body": [
            {
              "type": "ExpressionStatement",
              "start": 0,
              "end": 14,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 0
                },
                "end": {
                  "line": 1,
                  "column": 14
                }
              },
              "expression": {
                "type": "ArrowFunctionExpression",
                "start": 0,
                "end": 13,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 13
                  }
                },
                "id": null,
                "generator": false,
                "expression": true,
                "async": false,
                "params": [
                  {
                    "type": "ArrayPattern",
                    "start": 1,
                    "end": 9,
                    "loc": {
                      "start": {
                        "line": 1,
                        "column": 1
                      },
                      "end": {
                        "line": 1,
                        "column": 9
                      }
                    },
                    "elements": [
                      {
                        "type": "Identifier",
                        "start": 2,
                        "end": 3,
                        "loc": {
                          "start": {
                            "line": 1,
                            "column": 2
                          },
                          "end": {
                            "line": 1,
                            "column": 3
                          }
                        },
                        "name": "a"
                      },
                      {
                        "type": "RestElement",
                        "start": 4,
                        "end": 8,
                        "loc": {
                          "start": {
                            "line": 1,
                            "column": 4
                          },
                          "end": {
                            "line": 1,
                            "column": 8
                          }
                        },
                        "argument": {
                          "type": "Identifier",
                          "start": 7,
                          "end": 8,
                          "loc": {
                            "start": {
                              "line": 1,
                              "column": 7
                            },
                            "end": {
                              "line": 1,
                              "column": 8
                            }
                          },
                          "name": "b"
                        }
                      }
                    ]
                  }
                ],
                "body": {
                  "type": "Literal",
                  "start": 12,
                  "end": 13,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 12
                    },
                    "end": {
                      "line": 1,
                      "column": 13
                    }
                  },
                  "value": 1,
                  "raw": "1"
                }
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "a()``"', () => {
        expect(parseScript('a()``', {
            raw: true
        })).to.eql({
          "type": "Program",
          "body": [
              {
                  "type": "ExpressionStatement",
                  "expression": {
                      "type": "TaggedTemplateExpression",
                      "tag": {
                          "type": "CallExpression",
                          "arguments": [],
                          "callee": {
                              "type": "Identifier",
                              "name": "a"
                          }
                      },
                      "quasi": {
                          "type": "TemplateLiteral",
                          "expressions": [],
                          "quasis": [
                              {
                                  "type": "TemplateElement",
                                  "value": {
                                      "cooked": "",
                                      "raw": ""
                                  },
                                  "tail": true
                              }
                          ]
                      }
                  }
              }
          ],
          "sourceType": "script"
      });
      });

      it('should parse "let {a} = b"', () => {
        expect(parseScript(`let {a} = b`, {
            raw: true,
            locations: true,
            ranges: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 11,
          "loc": {
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 11
            }
          },
          "body": [
            {
              "type": "VariableDeclaration",
              "start": 0,
              "end": 11,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 0
                },
                "end": {
                  "line": 1,
                  "column": 11
                }
              },
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "start": 4,
                  "end": 11,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 4
                    },
                    "end": {
                      "line": 1,
                      "column": 11
                    }
                  },
                  "id": {
                    "type": "ObjectPattern",
                    "start": 4,
                    "end": 7,
                    "loc": {
                      "start": {
                        "line": 1,
                        "column": 4
                      },
                      "end": {
                        "line": 1,
                        "column": 7
                      }
                    },
                    "properties": [
                      {
                        "type": "Property",
                        "start": 5,
                        "end": 6,
                        "loc": {
                          "start": {
                            "line": 1,
                            "column": 5
                          },
                          "end": {
                            "line": 1,
                            "column": 6
                          }
                        },
                        "method": false,
                        "shorthand": true,
                        "computed": false,
                        "key": {
                          "type": "Identifier",
                          "start": 5,
                          "end": 6,
                          "loc": {
                            "start": {
                              "line": 1,
                              "column": 5
                            },
                            "end": {
                              "line": 1,
                              "column": 6
                            }
                          },
                          "name": "a"
                        },
                        "kind": "init",
                        "value": {
                          "type": "Identifier",
                          "start": 5,
                          "end": 6,
                          "loc": {
                            "start": {
                              "line": 1,
                              "column": 5
                            },
                            "end": {
                              "line": 1,
                              "column": 6
                            }
                          },
                          "name": "a"
                        }
                      }
                    ]
                  },
                  "init": {
                    "type": "Identifier",
                    "start": 10,
                    "end": 11,
                    "loc": {
                      "start": {
                        "line": 1,
                        "column": 10
                      },
                      "end": {
                        "line": 1,
                        "column": 11
                      }
                    },
                    "name": "b"
                  }
                }
              ],
              "kind": "let"
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "let {a} = b"', () => {
        expect(parseScript(`(function() {
          // https://github.com/Constellation/esmangle/issues/65
          var a = 1;
          var b = 2;
          var c = 3;
          var d = [].e.f(arguments);
          return [a, b, c, g];
        }());`, {
            raw: true,
            locations: true,
            ranges: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 223,
          "loc": {
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 8,
              "column": 13
            }
          },
          "body": [
            {
              "type": "ExpressionStatement",
              "start": 0,
              "end": 223,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 0
                },
                "end": {
                  "line": 8,
                  "column": 13
                }
              },
              "expression": {
                "type": "CallExpression",
                "start": 1,
                "end": 221,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 1
                  },
                  "end": {
                    "line": 8,
                    "column": 11
                  }
                },
                "callee": {
                  "type": "FunctionExpression",
                  "start": 1,
                  "end": 219,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 1
                    },
                    "end": {
                      "line": 8,
                      "column": 9
                    }
                  },
                  "id": null,
                  "generator": false,
                  "expression": false,
                  "async": false,
                  "params": [],
                  "body": {
                    "type": "BlockStatement",
                    "start": 12,
                    "end": 219,
                    "loc": {
                      "start": {
                        "line": 1,
                        "column": 12
                      },
                      "end": {
                        "line": 8,
                        "column": 9
                      }
                    },
                    "body": [
                      {
                        "type": "VariableDeclaration",
                        "start": 89,
                        "end": 99,
                        "loc": {
                          "start": {
                            "line": 3,
                            "column": 10
                          },
                          "end": {
                            "line": 3,
                            "column": 20
                          }
                        },
                        "declarations": [
                          {
                            "type": "VariableDeclarator",
                            "start": 93,
                            "end": 98,
                            "loc": {
                              "start": {
                                "line": 3,
                                "column": 14
                              },
                              "end": {
                                "line": 3,
                                "column": 19
                              }
                            },
                            "id": {
                              "type": "Identifier",
                              "start": 93,
                              "end": 94,
                              "loc": {
                                "start": {
                                  "line": 3,
                                  "column": 14
                                },
                                "end": {
                                  "line": 3,
                                  "column": 15
                                }
                              },
                              "name": "a"
                            },
                            "init": {
                              "type": "Literal",
                              "start": 97,
                              "end": 98,
                              "loc": {
                                "start": {
                                  "line": 3,
                                  "column": 18
                                },
                                "end": {
                                  "line": 3,
                                  "column": 19
                                }
                              },
                              "value": 1,
                              "raw": "1"
                            }
                          }
                        ],
                        "kind": "var"
                      },
                      {
                        "type": "VariableDeclaration",
                        "start": 110,
                        "end": 120,
                        "loc": {
                          "start": {
                            "line": 4,
                            "column": 10
                          },
                          "end": {
                            "line": 4,
                            "column": 20
                          }
                        },
                        "declarations": [
                          {
                            "type": "VariableDeclarator",
                            "start": 114,
                            "end": 119,
                            "loc": {
                              "start": {
                                "line": 4,
                                "column": 14
                              },
                              "end": {
                                "line": 4,
                                "column": 19
                              }
                            },
                            "id": {
                              "type": "Identifier",
                              "start": 114,
                              "end": 115,
                              "loc": {
                                "start": {
                                  "line": 4,
                                  "column": 14
                                },
                                "end": {
                                  "line": 4,
                                  "column": 15
                                }
                              },
                              "name": "b"
                            },
                            "init": {
                              "type": "Literal",
                              "start": 118,
                              "end": 119,
                              "loc": {
                                "start": {
                                  "line": 4,
                                  "column": 18
                                },
                                "end": {
                                  "line": 4,
                                  "column": 19
                                }
                              },
                              "value": 2,
                              "raw": "2"
                            }
                          }
                        ],
                        "kind": "var"
                      },
                      {
                        "type": "VariableDeclaration",
                        "start": 131,
                        "end": 141,
                        "loc": {
                          "start": {
                            "line": 5,
                            "column": 10
                          },
                          "end": {
                            "line": 5,
                            "column": 20
                          }
                        },
                        "declarations": [
                          {
                            "type": "VariableDeclarator",
                            "start": 135,
                            "end": 140,
                            "loc": {
                              "start": {
                                "line": 5,
                                "column": 14
                              },
                              "end": {
                                "line": 5,
                                "column": 19
                              }
                            },
                            "id": {
                              "type": "Identifier",
                              "start": 135,
                              "end": 136,
                              "loc": {
                                "start": {
                                  "line": 5,
                                  "column": 14
                                },
                                "end": {
                                  "line": 5,
                                  "column": 15
                                }
                              },
                              "name": "c"
                            },
                            "init": {
                              "type": "Literal",
                              "start": 139,
                              "end": 140,
                              "loc": {
                                "start": {
                                  "line": 5,
                                  "column": 18
                                },
                                "end": {
                                  "line": 5,
                                  "column": 19
                                }
                              },
                              "value": 3,
                              "raw": "3"
                            }
                          }
                        ],
                        "kind": "var"
                      },
                      {
                        "type": "VariableDeclaration",
                        "start": 152,
                        "end": 178,
                        "loc": {
                          "start": {
                            "line": 6,
                            "column": 10
                          },
                          "end": {
                            "line": 6,
                            "column": 36
                          }
                        },
                        "declarations": [
                          {
                            "type": "VariableDeclarator",
                            "start": 156,
                            "end": 177,
                            "loc": {
                              "start": {
                                "line": 6,
                                "column": 14
                              },
                              "end": {
                                "line": 6,
                                "column": 35
                              }
                            },
                            "id": {
                              "type": "Identifier",
                              "start": 156,
                              "end": 157,
                              "loc": {
                                "start": {
                                  "line": 6,
                                  "column": 14
                                },
                                "end": {
                                  "line": 6,
                                  "column": 15
                                }
                              },
                              "name": "d"
                            },
                            "init": {
                              "type": "CallExpression",
                              "start": 160,
                              "end": 177,
                              "loc": {
                                "start": {
                                  "line": 6,
                                  "column": 18
                                },
                                "end": {
                                  "line": 6,
                                  "column": 35
                                }
                              },
                              "callee": {
                                "type": "MemberExpression",
                                "start": 160,
                                "end": 166,
                                "loc": {
                                  "start": {
                                    "line": 6,
                                    "column": 18
                                  },
                                  "end": {
                                    "line": 6,
                                    "column": 24
                                  }
                                },
                                "object": {
                                  "type": "MemberExpression",
                                  "start": 160,
                                  "end": 164,
                                  "loc": {
                                    "start": {
                                      "line": 6,
                                      "column": 18
                                    },
                                    "end": {
                                      "line": 6,
                                      "column": 22
                                    }
                                  },
                                  "object": {
                                    "type": "ArrayExpression",
                                    "start": 160,
                                    "end": 162,
                                    "loc": {
                                      "start": {
                                        "line": 6,
                                        "column": 18
                                      },
                                      "end": {
                                        "line": 6,
                                        "column": 20
                                      }
                                    },
                                    "elements": []
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "start": 163,
                                    "end": 164,
                                    "loc": {
                                      "start": {
                                        "line": 6,
                                        "column": 21
                                      },
                                      "end": {
                                        "line": 6,
                                        "column": 22
                                      }
                                    },
                                    "name": "e"
                                  },
                                  "computed": false
                                },
                                "property": {
                                  "type": "Identifier",
                                  "start": 165,
                                  "end": 166,
                                  "loc": {
                                    "start": {
                                      "line": 6,
                                      "column": 23
                                    },
                                    "end": {
                                      "line": 6,
                                      "column": 24
                                    }
                                  },
                                  "name": "f"
                                },
                                "computed": false
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "start": 167,
                                  "end": 176,
                                  "loc": {
                                    "start": {
                                      "line": 6,
                                      "column": 25
                                    },
                                    "end": {
                                      "line": 6,
                                      "column": 34
                                    }
                                  },
                                  "name": "arguments"
                                }
                              ]
                            }
                          }
                        ],
                        "kind": "var"
                      },
                      {
                        "type": "ReturnStatement",
                        "start": 189,
                        "end": 209,
                        "loc": {
                          "start": {
                            "line": 7,
                            "column": 10
                          },
                          "end": {
                            "line": 7,
                            "column": 30
                          }
                        },
                        "argument": {
                          "type": "ArrayExpression",
                          "start": 196,
                          "end": 208,
                          "loc": {
                            "start": {
                              "line": 7,
                              "column": 17
                            },
                            "end": {
                              "line": 7,
                              "column": 29
                            }
                          },
                          "elements": [
                            {
                              "type": "Identifier",
                              "start": 197,
                              "end": 198,
                              "loc": {
                                "start": {
                                  "line": 7,
                                  "column": 18
                                },
                                "end": {
                                  "line": 7,
                                  "column": 19
                                }
                              },
                              "name": "a"
                            },
                            {
                              "type": "Identifier",
                              "start": 200,
                              "end": 201,
                              "loc": {
                                "start": {
                                  "line": 7,
                                  "column": 21
                                },
                                "end": {
                                  "line": 7,
                                  "column": 22
                                }
                              },
                              "name": "b"
                            },
                            {
                              "type": "Identifier",
                              "start": 203,
                              "end": 204,
                              "loc": {
                                "start": {
                                  "line": 7,
                                  "column": 24
                                },
                                "end": {
                                  "line": 7,
                                  "column": 25
                                }
                              },
                              "name": "c"
                            },
                            {
                              "type": "Identifier",
                              "start": 206,
                              "end": 207,
                              "loc": {
                                "start": {
                                  "line": 7,
                                  "column": 27
                                },
                                "end": {
                                  "line": 7,
                                  "column": 28
                                }
                              },
                              "name": "g"
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                "arguments": []
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "function a() { b(); }"', () => {
        expect(parseScript(`function a() { b(); }`, {
            raw: true,
            locations: true,
            ranges: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 21,
          "loc": {
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 21
            }
          },
          "body": [
            {
              "type": "FunctionDeclaration",
              "start": 0,
              "end": 21,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 0
                },
                "end": {
                  "line": 1,
                  "column": 21
                }
              },
              "id": {
                "type": "Identifier",
                "start": 9,
                "end": 10,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 9
                  },
                  "end": {
                    "line": 1,
                    "column": 10
                  }
                },
                "name": "a"
              },
              "generator": false,
              "expression": false,
              "async": false,
              "params": [],
              "body": {
                "type": "BlockStatement",
                "start": 13,
                "end": 21,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 13
                  },
                  "end": {
                    "line": 1,
                    "column": 21
                  }
                },
                "body": [
                  {
                    "type": "ExpressionStatement",
                    "start": 15,
                    "end": 19,
                    "loc": {
                      "start": {
                        "line": 1,
                        "column": 15
                      },
                      "end": {
                        "line": 1,
                        "column": 19
                      }
                    },
                    "expression": {
                      "type": "CallExpression",
                      "start": 15,
                      "end": 18,
                      "loc": {
                        "start": {
                          "line": 1,
                          "column": 15
                        },
                        "end": {
                          "line": 1,
                          "column": 18
                        }
                      },
                      "callee": {
                        "type": "Identifier",
                        "start": 15,
                        "end": 16,
                        "loc": {
                          "start": {
                            "line": 1,
                            "column": 15
                          },
                          "end": {
                            "line": 1,
                            "column": 16
                          }
                        },
                        "name": "b"
                      },
                      "arguments": []
                    }
                  }
                ]
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "var [a, ...[b, c]] = d"', () => {
        expect(parseScript(`var [a, ...[b, c]] = d`, {
            raw: true,
            locations: true,
            ranges: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 22,
          "loc": {
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 22
            }
          },
          "body": [
            {
              "type": "VariableDeclaration",
              "start": 0,
              "end": 22,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 0
                },
                "end": {
                  "line": 1,
                  "column": 22
                }
              },
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "start": 4,
                  "end": 22,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 4
                    },
                    "end": {
                      "line": 1,
                      "column": 22
                    }
                  },
                  "id": {
                    "type": "ArrayPattern",
                    "start": 4,
                    "end": 18,
                    "loc": {
                      "start": {
                        "line": 1,
                        "column": 4
                      },
                      "end": {
                        "line": 1,
                        "column": 18
                      }
                    },
                    "elements": [
                      {
                        "type": "Identifier",
                        "start": 5,
                        "end": 6,
                        "loc": {
                          "start": {
                            "line": 1,
                            "column": 5
                          },
                          "end": {
                            "line": 1,
                            "column": 6
                          }
                        },
                        "name": "a"
                      },
                      {
                        "type": "RestElement",
                        "start": 8,
                        "end": 17,
                        "loc": {
                          "start": {
                            "line": 1,
                            "column": 8
                          },
                          "end": {
                            "line": 1,
                            "column": 17
                          }
                        },
                        "argument": {
                          "type": "ArrayPattern",
                          "start": 11,
                          "end": 17,
                          "loc": {
                            "start": {
                              "line": 1,
                              "column": 11
                            },
                            "end": {
                              "line": 1,
                              "column": 17
                            }
                          },
                          "elements": [
                            {
                              "type": "Identifier",
                              "start": 12,
                              "end": 13,
                              "loc": {
                                "start": {
                                  "line": 1,
                                  "column": 12
                                },
                                "end": {
                                  "line": 1,
                                  "column": 13
                                }
                              },
                              "name": "b"
                            },
                            {
                              "type": "Identifier",
                              "start": 15,
                              "end": 16,
                              "loc": {
                                "start": {
                                  "line": 1,
                                  "column": 15
                                },
                                "end": {
                                  "line": 1,
                                  "column": 16
                                }
                              },
                              "name": "c"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "init": {
                    "type": "Identifier",
                    "start": 21,
                    "end": 22,
                    "loc": {
                      "start": {
                        "line": 1,
                        "column": 21
                      },
                      "end": {
                        "line": 1,
                        "column": 22
                      }
                    },
                    "name": "d"
                  }
                }
              ],
              "kind": "var"
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "(a = b("100")) == a "', () => {
        expect(parseScript(`(a = b('100')) == a`, {
            raw: true
        })).to.eql({
          "type": "Program",
          "body": [
              {
                  "type": "ExpressionStatement",
                  "expression": {
                      "type": "BinaryExpression",
                      "left": {
                          "type": "AssignmentExpression",
                          "left": {
                              "type": "Identifier",
                              "name": "a"
                          },
                          "operator": "=",
                          "right": {
                              "type": "CallExpression",
                              "arguments": [
                                  {
                                      "type": "Literal",
                                      "value": "100",
                                      "raw": "'100'"
                                  }
                              ],
                              "callee": {
                                  "type": "Identifier",
                                  "name": "b"
                              }
                          }
                      },
                      "right": {
                          "type": "Identifier",
                          "name": "a"
                      },
                      "operator": "=="
                  }
              }
          ],
          "sourceType": "script"
      });
      });

      it('should parse "({get __proto__() {}})"', () => {
        expect(parseScript(`({get __proto__() {}})`, {
            raw: true,
            locations: true,
            ranges: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 22,
          "loc": {
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 22
            }
          },
          "body": [
            {
              "type": "ExpressionStatement",
              "start": 0,
              "end": 22,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 0
                },
                "end": {
                  "line": 1,
                  "column": 22
                }
              },
              "expression": {
                "type": "ObjectExpression",
                "start": 1,
                "end": 21,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 1
                  },
                  "end": {
                    "line": 1,
                    "column": 21
                  }
                },
                "properties": [
                  {
                    "type": "Property",
                    "start": 2,
                    "end": 20,
                    "loc": {
                      "start": {
                        "line": 1,
                        "column": 2
                      },
                      "end": {
                        "line": 1,
                        "column": 20
                      }
                    },
                    "method": false,
                    "shorthand": false,
                    "computed": false,
                    "key": {
                      "type": "Identifier",
                      "start": 6,
                      "end": 15,
                      "loc": {
                        "start": {
                          "line": 1,
                          "column": 6
                        },
                        "end": {
                          "line": 1,
                          "column": 15
                        }
                      },
                      "name": "__proto__"
                    },
                    "kind": "get",
                    "value": {
                      "type": "FunctionExpression",
                      "start": 15,
                      "end": 20,
                      "loc": {
                        "start": {
                          "line": 1,
                          "column": 15
                        },
                        "end": {
                          "line": 1,
                          "column": 20
                        }
                      },
                      "id": null,
                      "generator": false,
                      "expression": false,
                      "async": false,
                      "params": [],
                      "body": {
                        "type": "BlockStatement",
                        "start": 18,
                        "end": 20,
                        "loc": {
                          "start": {
                            "line": 1,
                            "column": 18
                          },
                          "end": {
                            "line": 1,
                            "column": 20
                          }
                        },
                        "body": []
                      }
                    }
                  }
                ]
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "a: break a;"', () => {
        expect(parseScript(`a: break a;`, {
            raw: true,
            locations: true,
            ranges: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 11,
          "loc": {
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 11
            }
          },
          "body": [
            {
              "type": "LabeledStatement",
              "start": 0,
              "end": 11,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 0
                },
                "end": {
                  "line": 1,
                  "column": 11
                }
              },
              "body": {
                "type": "BreakStatement",
                "start": 3,
                "end": 11,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 3
                  },
                  "end": {
                    "line": 1,
                    "column": 11
                  }
                },
                "label": {
                  "type": "Identifier",
                  "start": 9,
                  "end": 10,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 9
                    },
                    "end": {
                      "line": 1,
                      "column": 10
                    }
                  },
                  "name": "a"
                }
              },
              "label": {
                "type": "Identifier",
                "start": 0,
                "end": 1,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 1
                  }
                },
                "name": "a"
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "let [a,,b]=1"', () => {
        expect(parseScript(`let [a,,b]=1`, {
            raw: true,
            locations: true,
            ranges: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 12,
          "loc": {
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 12
            }
          },
          "body": [
            {
              "type": "VariableDeclaration",
              "start": 0,
              "end": 12,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 0
                },
                "end": {
                  "line": 1,
                  "column": 12
                }
              },
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "start": 4,
                  "end": 12,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 4
                    },
                    "end": {
                      "line": 1,
                      "column": 12
                    }
                  },
                  "id": {
                    "type": "ArrayPattern",
                    "start": 4,
                    "end": 10,
                    "loc": {
                      "start": {
                        "line": 1,
                        "column": 4
                      },
                      "end": {
                        "line": 1,
                        "column": 10
                      }
                    },
                    "elements": [
                      {
                        "type": "Identifier",
                        "start": 5,
                        "end": 6,
                        "loc": {
                          "start": {
                            "line": 1,
                            "column": 5
                          },
                          "end": {
                            "line": 1,
                            "column": 6
                          }
                        },
                        "name": "a"
                      },
                      null,
                      {
                        "type": "Identifier",
                        "start": 8,
                        "end": 9,
                        "loc": {
                          "start": {
                            "line": 1,
                            "column": 8
                          },
                          "end": {
                            "line": 1,
                            "column": 9
                          }
                        },
                        "name": "b"
                      }
                    ]
                  },
                  "init": {
                    "type": "Literal",
                    "start": 11,
                    "end": 12,
                    "loc": {
                      "start": {
                        "line": 1,
                        "column": 11
                      },
                      "end": {
                        "line": 1,
                        "column": 12
                      }
                    },
                    "value": 1,
                    "raw": "1"
                  }
                }
              ],
              "kind": "let"
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "!(a=b)"', () => {
        expect(parseScript(`!(a=b)`, {
            raw: true,
            locations: true,
            ranges: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 6,
          "loc": {
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 6
            }
          },
          "body": [
            {
              "type": "ExpressionStatement",
              "start": 0,
              "end": 6,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 0
                },
                "end": {
                  "line": 1,
                  "column": 6
                }
              },
              "expression": {
                "type": "UnaryExpression",
                "start": 0,
                "end": 6,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 6
                  }
                },
                "operator": "!",
                "prefix": true,
                "argument": {
                  "type": "AssignmentExpression",
                  "start": 2,
                  "end": 5,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 2
                    },
                    "end": {
                      "line": 1,
                      "column": 5
                    }
                  },
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "start": 2,
                    "end": 3,
                    "loc": {
                      "start": {
                        "line": 1,
                        "column": 2
                      },
                      "end": {
                        "line": 1,
                        "column": 3
                      }
                    },
                    "name": "a"
                  },
                  "right": {
                    "type": "Identifier",
                    "start": 4,
                    "end": 5,
                    "loc": {
                      "start": {
                        "line": 1,
                        "column": 4
                      },
                      "end": {
                        "line": 1,
                        "column": 5
                      }
                    },
                    "name": "b"
                  }
                }
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "({a,b=b,a:c,[a]:[d]})=>1;"', () => {
        expect(parseScript(`({a,b=b,a:c,[a]:[d]})=>1;`, {
            raw: true,
            locations: true,
            ranges: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 25,
          "loc": {
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 25
            }
          },
          "body": [
            {
              "type": "ExpressionStatement",
              "start": 0,
              "end": 25,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 0
                },
                "end": {
                  "line": 1,
                  "column": 25
                }
              },
              "expression": {
                "type": "ArrowFunctionExpression",
                "start": 0,
                "end": 24,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 24
                  }
                },
                "id": null,
                "generator": false,
                "expression": true,
                "async": false,
                "params": [
                  {
                    "type": "ObjectPattern",
                    "start": 1,
                    "end": 20,
                    "loc": {
                      "start": {
                        "line": 1,
                        "column": 1
                      },
                      "end": {
                        "line": 1,
                        "column": 20
                      }
                    },
                    "properties": [
                      {
                        "type": "Property",
                        "start": 2,
                        "end": 3,
                        "loc": {
                          "start": {
                            "line": 1,
                            "column": 2
                          },
                          "end": {
                            "line": 1,
                            "column": 3
                          }
                        },
                        "method": false,
                        "shorthand": true,
                        "computed": false,
                        "key": {
                          "type": "Identifier",
                          "start": 2,
                          "end": 3,
                          "loc": {
                            "start": {
                              "line": 1,
                              "column": 2
                            },
                            "end": {
                              "line": 1,
                              "column": 3
                            }
                          },
                          "name": "a"
                        },
                        "kind": "init",
                        "value": {
                          "type": "Identifier",
                          "start": 2,
                          "end": 3,
                          "loc": {
                            "start": {
                              "line": 1,
                              "column": 2
                            },
                            "end": {
                              "line": 1,
                              "column": 3
                            }
                          },
                          "name": "a"
                        }
                      },
                      {
                        "type": "Property",
                        "start": 4,
                        "end": 7,
                        "loc": {
                          "start": {
                            "line": 1,
                            "column": 4
                          },
                          "end": {
                            "line": 1,
                            "column": 7
                          }
                        },
                        "method": false,
                        "shorthand": true,
                        "computed": false,
                        "key": {
                          "type": "Identifier",
                          "start": 4,
                          "end": 5,
                          "loc": {
                            "start": {
                              "line": 1,
                              "column": 4
                            },
                            "end": {
                              "line": 1,
                              "column": 5
                            }
                          },
                          "name": "b"
                        },
                        "kind": "init",
                        "value": {
                          "type": "AssignmentPattern",
                          "start": 4,
                          "end": 7,
                          "loc": {
                            "start": {
                              "line": 1,
                              "column": 4
                            },
                            "end": {
                              "line": 1,
                              "column": 7
                            }
                          },
                          "left": {
                            "type": "Identifier",
                            "start": 4,
                            "end": 5,
                            "loc": {
                              "start": {
                                "line": 1,
                                "column": 4
                              },
                              "end": {
                                "line": 1,
                                "column": 5
                              }
                            },
                            "name": "b"
                          },
                          "right": {
                            "type": "Identifier",
                            "start": 6,
                            "end": 7,
                            "loc": {
                              "start": {
                                "line": 1,
                                "column": 6
                              },
                              "end": {
                                "line": 1,
                                "column": 7
                              }
                            },
                            "name": "b"
                          }
                        }
                      },
                      {
                        "type": "Property",
                        "start": 8,
                        "end": 11,
                        "loc": {
                          "start": {
                            "line": 1,
                            "column": 8
                          },
                          "end": {
                            "line": 1,
                            "column": 11
                          }
                        },
                        "method": false,
                        "shorthand": false,
                        "computed": false,
                        "key": {
                          "type": "Identifier",
                          "start": 8,
                          "end": 9,
                          "loc": {
                            "start": {
                              "line": 1,
                              "column": 8
                            },
                            "end": {
                              "line": 1,
                              "column": 9
                            }
                          },
                          "name": "a"
                        },
                        "value": {
                          "type": "Identifier",
                          "start": 10,
                          "end": 11,
                          "loc": {
                            "start": {
                              "line": 1,
                              "column": 10
                            },
                            "end": {
                              "line": 1,
                              "column": 11
                            }
                          },
                          "name": "c"
                        },
                        "kind": "init"
                      },
                      {
                        "type": "Property",
                        "start": 12,
                        "end": 19,
                        "loc": {
                          "start": {
                            "line": 1,
                            "column": 12
                          },
                          "end": {
                            "line": 1,
                            "column": 19
                          }
                        },
                        "method": false,
                        "shorthand": false,
                        "computed": true,
                        "key": {
                          "type": "Identifier",
                          "start": 13,
                          "end": 14,
                          "loc": {
                            "start": {
                              "line": 1,
                              "column": 13
                            },
                            "end": {
                              "line": 1,
                              "column": 14
                            }
                          },
                          "name": "a"
                        },
                        "value": {
                          "type": "ArrayPattern",
                          "start": 16,
                          "end": 19,
                          "loc": {
                            "start": {
                              "line": 1,
                              "column": 16
                            },
                            "end": {
                              "line": 1,
                              "column": 19
                            }
                          },
                          "elements": [
                            {
                              "type": "Identifier",
                              "start": 17,
                              "end": 18,
                              "loc": {
                                "start": {
                                  "line": 1,
                                  "column": 17
                                },
                                "end": {
                                  "line": 1,
                                  "column": 18
                                }
                              },
                              "name": "d"
                            }
                          ]
                        },
                        "kind": "init"
                      }
                    ]
                  }
                ],
                "body": {
                  "type": "Literal",
                  "start": 23,
                  "end": 24,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 23
                    },
                    "end": {
                      "line": 1,
                      "column": 24
                    }
                  },
                  "value": 1,
                  "raw": "1"
                }
              }
            }
          ],
          "sourceType": "script"
        });
      });

      it('should parse "a => { return 1; }"', () => {
        expect(parseScript(`a => { return 1; }`, {
            raw: true,
            locations: true,
            ranges: true
        })).to.eql({
          "type": "Program",
          "start": 0,
          "end": 18,
          "loc": {
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 18
            }
          },
          "body": [
            {
              "type": "ExpressionStatement",
              "start": 0,
              "end": 18,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 0
                },
                "end": {
                  "line": 1,
                  "column": 18
                }
              },
              "expression": {
                "type": "ArrowFunctionExpression",
                "start": 0,
                "end": 18,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 18
                  }
                },
                "id": null,
                "generator": false,
                "expression": false,
                "async": false,
                "params": [
                  {
                    "type": "Identifier",
                    "start": 0,
                    "end": 1,
                    "loc": {
                      "start": {
                        "line": 1,
                        "column": 0
                      },
                      "end": {
                        "line": 1,
                        "column": 1
                      }
                    },
                    "name": "a"
                  }
                ],
                "body": {
                  "type": "BlockStatement",
                  "start": 5,
                  "end": 18,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 5
                    },
                    "end": {
                      "line": 1,
                      "column": 18
                    }
                  },
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "start": 7,
                      "end": 16,
                      "loc": {
                        "start": {
                          "line": 1,
                          "column": 7
                        },
                        "end": {
                          "line": 1,
                          "column": 16
                        }
                      },
                      "argument": {
                        "type": "Literal",
                        "start": 14,
                        "end": 15,
                        "loc": {
                          "start": {
                            "line": 1,
                            "column": 14
                          },
                          "end": {
                            "line": 1,
                            "column": 15
                          }
                        },
                        "value": 1,
                        "raw": "1"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "sourceType": "script"
        });
      });


    });